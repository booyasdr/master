                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.1.0 #7066 (Nov 22 2011) (MINGW32)
                              4 ; This file was generated Sun Apr 26 07:15:20 2015
                              5 ;--------------------------------------------------------
                              6 	.module eeprom_mark
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _main
                             13 	.globl _strncmp
                             14 	.globl _strcpy
                             15 	.globl _sprintf
                             16 	.globl _EIP
                             17 	.globl _B
                             18 	.globl _EIE
                             19 	.globl _ACC
                             20 	.globl _EICON
                             21 	.globl _PSW
                             22 	.globl _TH2
                             23 	.globl _TL2
                             24 	.globl _RCAP2H
                             25 	.globl _RCAP2L
                             26 	.globl _T2CON
                             27 	.globl _SBUF1
                             28 	.globl _SCON1
                             29 	.globl _GPIFSGLDATLNOX
                             30 	.globl _GPIFSGLDATLX
                             31 	.globl _GPIFSGLDATH
                             32 	.globl _GPIFTRIG
                             33 	.globl _EP01STAT
                             34 	.globl _IP
                             35 	.globl _OEE
                             36 	.globl _OED
                             37 	.globl _OEC
                             38 	.globl _OEB
                             39 	.globl _OEA
                             40 	.globl _IOE
                             41 	.globl _IOD
                             42 	.globl _AUTOPTRSETUP
                             43 	.globl _EP68FIFOFLGS
                             44 	.globl _EP24FIFOFLGS
                             45 	.globl _EP2468STAT
                             46 	.globl _IE
                             47 	.globl _INT4CLR
                             48 	.globl _INT2CLR
                             49 	.globl _IOC
                             50 	.globl _AUTODAT2
                             51 	.globl _AUTOPTRL2
                             52 	.globl _AUTOPTRH2
                             53 	.globl _AUTODAT1
                             54 	.globl _APTR1L
                             55 	.globl _APTR1H
                             56 	.globl _SBU
                             57 	.globl _SCO
                             58 	.globl _MPA
                             59 	.globl _EXIF
                             60 	.globl _IOB
                             61 	.globl _SPC_
                             62 	.globl _CKCO
                             63 	.globl _TH1
                             64 	.globl _TH0
                             65 	.globl _TL1
                             66 	.globl _TL0
                             67 	.globl _TMOD
                             68 	.globl _TCON
                             69 	.globl _PCON
                             70 	.globl _DPS
                             71 	.globl _DPH1
                             72 	.globl _DPL1
                             73 	.globl _DPH
                             74 	.globl _DPL
                             75 	.globl _SP
                             76 	.globl _IOA
                             77 	.globl _EP8FIFOBUF
                             78 	.globl _EP6FIFOBUF
                             79 	.globl _EP4FIFOBUF
                             80 	.globl _EP2FIFOBUF
                             81 	.globl _EP1INBUF
                             82 	.globl _EP1OUTBUF
                             83 	.globl _EP0BUF
                             84 	.globl _CT4
                             85 	.globl _CT3
                             86 	.globl _CT2
                             87 	.globl _CT1
                             88 	.globl _USBTEST
                             89 	.globl _TESTCFG
                             90 	.globl _DBUG
                             91 	.globl _UDMACRCQUAL
                             92 	.globl _UDMACRCL
                             93 	.globl _UDMACRCH
                             94 	.globl _GPIFHOLDAMOUNT
                             95 	.globl _FLOWSTBHPERIOD
                             96 	.globl _FLOWSTBEDGE
                             97 	.globl _FLOWSTB
                             98 	.globl _FLOWHOLDOFF
                             99 	.globl _FLOWEQ1CTL
                            100 	.globl _FLOWEQ0CTL
                            101 	.globl _FLOWLOGIC
                            102 	.globl _FLOWSTATE
                            103 	.globl _GPIFABORT
                            104 	.globl _GPIFREADYSTAT
                            105 	.globl _GPIFREADYCFG
                            106 	.globl _XGPIFSGLDATLNOX
                            107 	.globl _XGPIFSGLDATLX
                            108 	.globl _XGPIFSGLDATH
                            109 	.globl _EP8GPIFTRIG
                            110 	.globl _EP8GPIFPFSTOP
                            111 	.globl _EP8GPIFFLGSEL
                            112 	.globl _EP6GPIFTRIG
                            113 	.globl _EP6GPIFPFSTOP
                            114 	.globl _EP6GPIFFLGSEL
                            115 	.globl _EP4GPIFTRIG
                            116 	.globl _EP4GPIFPFSTOP
                            117 	.globl _EP4GPIFFLGSEL
                            118 	.globl _EP2GPIFTRIG
                            119 	.globl _EP2GPIFPFSTOP
                            120 	.globl _EP2GPIFFLGSEL
                            121 	.globl _GPIFTCB0
                            122 	.globl _GPIFTCB1
                            123 	.globl _GPIFTCB2
                            124 	.globl _GPIFTCB3
                            125 	.globl _GPIFADRL
                            126 	.globl _GPIFADRH
                            127 	.globl _GPIFCTLCFG
                            128 	.globl _GPIFIDLECTL
                            129 	.globl _GPIFIDLECS
                            130 	.globl _GPIFWFSELECT
                            131 	.globl _SETUPDAT
                            132 	.globl _SUDPTRCTL
                            133 	.globl _SUDPTRL
                            134 	.globl _SUDPTRH
                            135 	.globl _EP8FIFOBCL
                            136 	.globl _EP8FIFOBCH
                            137 	.globl _EP6FIFOBCL
                            138 	.globl _EP6FIFOBCH
                            139 	.globl _EP4FIFOBCL
                            140 	.globl _EP4FIFOBCH
                            141 	.globl _EP2FIFOBCL
                            142 	.globl _EP2FIFOBCH
                            143 	.globl _EP8FIFOFLGS
                            144 	.globl _EP6FIFOFLGS
                            145 	.globl _EP4FIFOFLGS
                            146 	.globl _EP2FIFOFLGS
                            147 	.globl _EP8CS
                            148 	.globl _EP6CS
                            149 	.globl _EP4CS
                            150 	.globl _EP2CS
                            151 	.globl _EP1INCS
                            152 	.globl _EP1OUTCS
                            153 	.globl _EP0CS
                            154 	.globl _EP8BCL
                            155 	.globl _EP8BCH
                            156 	.globl _EP6BCL
                            157 	.globl _EP6BCH
                            158 	.globl _EP4BCL
                            159 	.globl _EP4BCH
                            160 	.globl _EP2BCL
                            161 	.globl _EP2BCH
                            162 	.globl _EP1INBC
                            163 	.globl _EP1OUTBC
                            164 	.globl _EP0BCL
                            165 	.globl _EP0BCH
                            166 	.globl _FNADDR
                            167 	.globl _MICROFRAME
                            168 	.globl _USBFRAMEL
                            169 	.globl _USBFRAMEH
                            170 	.globl _TOGCTL
                            171 	.globl _WAKEUPCS
                            172 	.globl _SUSPEND
                            173 	.globl _USBCS
                            174 	.globl _XAUTODAT2
                            175 	.globl _XAUTODAT1
                            176 	.globl _I2CTL
                            177 	.globl _I2DAT
                            178 	.globl _I2CS
                            179 	.globl _PORTECFG
                            180 	.globl _PORTCCFG
                            181 	.globl _PORTACFG
                            182 	.globl _INTSETUP
                            183 	.globl _INT4IVEC
                            184 	.globl _INT2IVEC
                            185 	.globl _CLRERRCNT
                            186 	.globl _ERRCNTLIM
                            187 	.globl _USBERRIRQ
                            188 	.globl _USBERRIE
                            189 	.globl _GPIFIRQ
                            190 	.globl _GPIFIE
                            191 	.globl _EPIRQ
                            192 	.globl _EPIE
                            193 	.globl _USBIRQ
                            194 	.globl _USBIE
                            195 	.globl _NAKIRQ
                            196 	.globl _NAKIE
                            197 	.globl _IBNIRQ
                            198 	.globl _IBNIE
                            199 	.globl _EP8FIFOIRQ
                            200 	.globl _EP8FIFOIE
                            201 	.globl _EP6FIFOIRQ
                            202 	.globl _EP6FIFOIE
                            203 	.globl _EP4FIFOIRQ
                            204 	.globl _EP4FIFOIE
                            205 	.globl _EP2FIFOIRQ
                            206 	.globl _EP2FIFOIE
                            207 	.globl _OUTPKTEND
                            208 	.globl _INPKTEND
                            209 	.globl _EP8ISOINPKTS
                            210 	.globl _EP6ISOINPKTS
                            211 	.globl _EP4ISOINPKTS
                            212 	.globl _EP2ISOINPKTS
                            213 	.globl _EP8FIFOPFL
                            214 	.globl _EP8FIFOPFH
                            215 	.globl _EP6FIFOPFL
                            216 	.globl _EP6FIFOPFH
                            217 	.globl _EP4FIFOPFL
                            218 	.globl _EP4FIFOPFH
                            219 	.globl _EP2FIFOPFL
                            220 	.globl _EP2FIFOPFH
                            221 	.globl _EP8AUTOINLENL
                            222 	.globl _EP8AUTOINLENH
                            223 	.globl _EP6AUTOINLENL
                            224 	.globl _EP6AUTOINLENH
                            225 	.globl _EP4AUTOINLENL
                            226 	.globl _EP4AUTOINLENH
                            227 	.globl _EP2AUTOINLENL
                            228 	.globl _EP2AUTOINLENH
                            229 	.globl _EP8FIFOCFG
                            230 	.globl _EP6FIFOCFG
                            231 	.globl _EP4FIFOCFG
                            232 	.globl _EP2FIFOCFG
                            233 	.globl _EP8CFG
                            234 	.globl _EP6CFG
                            235 	.globl _EP4CFG
                            236 	.globl _EP2CFG
                            237 	.globl _EP1INCFG
                            238 	.globl _EP1OUTCFG
                            239 	.globl _REVCTL
                            240 	.globl _REVID
                            241 	.globl _FIFOPINPOLAR
                            242 	.globl _UART230
                            243 	.globl _BPADDRL
                            244 	.globl _BPADDRH
                            245 	.globl _BREAKPT
                            246 	.globl _FIFORESET
                            247 	.globl _PINFLAGSCD
                            248 	.globl _PINFLAGSAB
                            249 	.globl _IFCONFIG
                            250 	.globl _CPUCS
                            251 	.globl _RES_WAVEDATA_END
                            252 	.globl _GPIF_WAVE_DATA
                            253 	.globl _HWmark
                            254 	.globl _command
                            255 	.globl _jump_table
                            256 	.globl _dat
                            257 	.globl _err
                            258 	.globl _FWmark
                            259 ;--------------------------------------------------------
                            260 ; special function registers
                            261 ;--------------------------------------------------------
                            262 	.area RSEG    (ABS,DATA)
   0000                     263 	.org 0x0000
                    0080    264 _IOA	=	0x0080
                    0081    265 _SP	=	0x0081
                    0082    266 _DPL	=	0x0082
                    0083    267 _DPH	=	0x0083
                    0084    268 _DPL1	=	0x0084
                    0085    269 _DPH1	=	0x0085
                    0086    270 _DPS	=	0x0086
                    0087    271 _PCON	=	0x0087
                    0088    272 _TCON	=	0x0088
                    0089    273 _TMOD	=	0x0089
                    008A    274 _TL0	=	0x008a
                    008B    275 _TL1	=	0x008b
                    008C    276 _TH0	=	0x008c
                    008D    277 _TH1	=	0x008d
                    008E    278 _CKCO	=	0x008e
                    008F    279 _SPC_	=	0x008f
                    0090    280 _IOB	=	0x0090
                    0091    281 _EXIF	=	0x0091
                    0092    282 _MPA	=	0x0092
                    0098    283 _SCO	=	0x0098
                    0099    284 _SBU	=	0x0099
                    009A    285 _APTR1H	=	0x009a
                    009B    286 _APTR1L	=	0x009b
                    009C    287 _AUTODAT1	=	0x009c
                    009D    288 _AUTOPTRH2	=	0x009d
                    009E    289 _AUTOPTRL2	=	0x009e
                    009F    290 _AUTODAT2	=	0x009f
                    00A0    291 _IOC	=	0x00a0
                    00A1    292 _INT2CLR	=	0x00a1
                    00A2    293 _INT4CLR	=	0x00a2
                    00A8    294 _IE	=	0x00a8
                    00AA    295 _EP2468STAT	=	0x00aa
                    00AB    296 _EP24FIFOFLGS	=	0x00ab
                    00AC    297 _EP68FIFOFLGS	=	0x00ac
                    00AF    298 _AUTOPTRSETUP	=	0x00af
                    00B0    299 _IOD	=	0x00b0
                    00B1    300 _IOE	=	0x00b1
                    00B2    301 _OEA	=	0x00b2
                    00B3    302 _OEB	=	0x00b3
                    00B4    303 _OEC	=	0x00b4
                    00B5    304 _OED	=	0x00b5
                    00B6    305 _OEE	=	0x00b6
                    00B8    306 _IP	=	0x00b8
                    00BA    307 _EP01STAT	=	0x00ba
                    00BB    308 _GPIFTRIG	=	0x00bb
                    00BD    309 _GPIFSGLDATH	=	0x00bd
                    00BE    310 _GPIFSGLDATLX	=	0x00be
                    00BF    311 _GPIFSGLDATLNOX	=	0x00bf
                    00C0    312 _SCON1	=	0x00c0
                    00C1    313 _SBUF1	=	0x00c1
                    00C8    314 _T2CON	=	0x00c8
                    00CA    315 _RCAP2L	=	0x00ca
                    00CB    316 _RCAP2H	=	0x00cb
                    00CC    317 _TL2	=	0x00cc
                    00CD    318 _TH2	=	0x00cd
                    00D0    319 _PSW	=	0x00d0
                    00D8    320 _EICON	=	0x00d8
                    00E0    321 _ACC	=	0x00e0
                    00E8    322 _EIE	=	0x00e8
                    00F0    323 _B	=	0x00f0
                    00F8    324 _EIP	=	0x00f8
                            325 ;--------------------------------------------------------
                            326 ; special function bits
                            327 ;--------------------------------------------------------
                            328 	.area RSEG    (ABS,DATA)
   0000                     329 	.org 0x0000
                            330 ;--------------------------------------------------------
                            331 ; overlayable register banks
                            332 ;--------------------------------------------------------
                            333 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     334 	.ds 8
                            335 ;--------------------------------------------------------
                            336 ; internal ram data
                            337 ;--------------------------------------------------------
                            338 	.area DSEG    (DATA)
   0000                     339 _FWmark::
   0000                     340 	.ds 3
   0003                     341 _err::
   0003                     342 	.ds 2
   0005                     343 _dat::
   0005                     344 	.ds 2
   0007                     345 _jump_table::
   0007                     346 	.ds 2
   0009                     347 _command::
   0009                     348 	.ds 2
   000B                     349 _HWmark::
   000B                     350 	.ds 2
   000D                     351 _writemarkeeprom_mark_1_1:
   000D                     352 	.ds 3
   0010                     353 _writemarkeeprom_sloc0_1_0:
   0010                     354 	.ds 2
   0012                     355 _writemarkeeprom_sloc1_1_0:
   0012                     356 	.ds 2
   0014                     357 _main_mark_1_1:
   0014                     358 	.ds 16
   0024                     359 _hostreadmarkep1poll_ep1outbc_1_1:
   0024                     360 	.ds 1
   0025                     361 _hostreadmarkep1poll_n_1_1:
   0025                     362 	.ds 2
                            363 ;--------------------------------------------------------
                            364 ; overlayable items in internal ram 
                            365 ;--------------------------------------------------------
                            366 	.area	OSEG    (OVR,DATA)
                            367 	.area	OSEG    (OVR,DATA)
   0000                     368 _EEWrite_PARM_2:
   0000                     369 	.ds 1
                            370 	.area	OSEG    (OVR,DATA)
   0000                     371 _EERead_PARM_2:
   0000                     372 	.ds 3
   0003                     373 _EERead_n_1_1:
   0003                     374 	.ds 2
                            375 ;--------------------------------------------------------
                            376 ; Stack segment in internal ram 
                            377 ;--------------------------------------------------------
                            378 	.area	SSEG	(DATA)
   0000                     379 __start__stack:
   0000                     380 	.ds	1
                            381 
                            382 ;--------------------------------------------------------
                            383 ; indirectly addressable internal ram data
                            384 ;--------------------------------------------------------
                            385 	.area ISEG    (DATA)
                            386 ;--------------------------------------------------------
                            387 ; absolute internal ram data
                            388 ;--------------------------------------------------------
                            389 	.area IABS    (ABS,DATA)
                            390 	.area IABS    (ABS,DATA)
                            391 ;--------------------------------------------------------
                            392 ; bit data
                            393 ;--------------------------------------------------------
                            394 	.area BSEG    (BIT)
                            395 ;--------------------------------------------------------
                            396 ; paged external ram data
                            397 ;--------------------------------------------------------
                            398 	.area PSEG    (PAG,XDATA)
                            399 ;--------------------------------------------------------
                            400 ; external ram data
                            401 ;--------------------------------------------------------
                            402 	.area XSEG    (XDATA)
                    E400    403 _GPIF_WAVE_DATA	=	0xe400
                    E480    404 _RES_WAVEDATA_END	=	0xe480
                    E600    405 _CPUCS	=	0xe600
                    E601    406 _IFCONFIG	=	0xe601
                    E602    407 _PINFLAGSAB	=	0xe602
                    E603    408 _PINFLAGSCD	=	0xe603
                    E604    409 _FIFORESET	=	0xe604
                    E605    410 _BREAKPT	=	0xe605
                    E606    411 _BPADDRH	=	0xe606
                    E607    412 _BPADDRL	=	0xe607
                    E608    413 _UART230	=	0xe608
                    E609    414 _FIFOPINPOLAR	=	0xe609
                    E60A    415 _REVID	=	0xe60a
                    E60B    416 _REVCTL	=	0xe60b
                    E610    417 _EP1OUTCFG	=	0xe610
                    E611    418 _EP1INCFG	=	0xe611
                    E612    419 _EP2CFG	=	0xe612
                    E613    420 _EP4CFG	=	0xe613
                    E614    421 _EP6CFG	=	0xe614
                    E615    422 _EP8CFG	=	0xe615
                    E618    423 _EP2FIFOCFG	=	0xe618
                    E619    424 _EP4FIFOCFG	=	0xe619
                    E61A    425 _EP6FIFOCFG	=	0xe61a
                    E61B    426 _EP8FIFOCFG	=	0xe61b
                    E620    427 _EP2AUTOINLENH	=	0xe620
                    E621    428 _EP2AUTOINLENL	=	0xe621
                    E622    429 _EP4AUTOINLENH	=	0xe622
                    E623    430 _EP4AUTOINLENL	=	0xe623
                    E624    431 _EP6AUTOINLENH	=	0xe624
                    E625    432 _EP6AUTOINLENL	=	0xe625
                    E626    433 _EP8AUTOINLENH	=	0xe626
                    E627    434 _EP8AUTOINLENL	=	0xe627
                    E630    435 _EP2FIFOPFH	=	0xe630
                    E631    436 _EP2FIFOPFL	=	0xe631
                    E632    437 _EP4FIFOPFH	=	0xe632
                    E633    438 _EP4FIFOPFL	=	0xe633
                    E634    439 _EP6FIFOPFH	=	0xe634
                    E635    440 _EP6FIFOPFL	=	0xe635
                    E636    441 _EP8FIFOPFH	=	0xe636
                    E637    442 _EP8FIFOPFL	=	0xe637
                    E640    443 _EP2ISOINPKTS	=	0xe640
                    E641    444 _EP4ISOINPKTS	=	0xe641
                    E642    445 _EP6ISOINPKTS	=	0xe642
                    E643    446 _EP8ISOINPKTS	=	0xe643
                    E648    447 _INPKTEND	=	0xe648
                    E649    448 _OUTPKTEND	=	0xe649
                    E650    449 _EP2FIFOIE	=	0xe650
                    E651    450 _EP2FIFOIRQ	=	0xe651
                    E652    451 _EP4FIFOIE	=	0xe652
                    E653    452 _EP4FIFOIRQ	=	0xe653
                    E654    453 _EP6FIFOIE	=	0xe654
                    E655    454 _EP6FIFOIRQ	=	0xe655
                    E656    455 _EP8FIFOIE	=	0xe656
                    E657    456 _EP8FIFOIRQ	=	0xe657
                    E658    457 _IBNIE	=	0xe658
                    E659    458 _IBNIRQ	=	0xe659
                    E65A    459 _NAKIE	=	0xe65a
                    E65B    460 _NAKIRQ	=	0xe65b
                    E65C    461 _USBIE	=	0xe65c
                    E65D    462 _USBIRQ	=	0xe65d
                    E65E    463 _EPIE	=	0xe65e
                    E65F    464 _EPIRQ	=	0xe65f
                    E660    465 _GPIFIE	=	0xe660
                    E661    466 _GPIFIRQ	=	0xe661
                    E662    467 _USBERRIE	=	0xe662
                    E663    468 _USBERRIRQ	=	0xe663
                    E664    469 _ERRCNTLIM	=	0xe664
                    E665    470 _CLRERRCNT	=	0xe665
                    E666    471 _INT2IVEC	=	0xe666
                    E667    472 _INT4IVEC	=	0xe667
                    E668    473 _INTSETUP	=	0xe668
                    E670    474 _PORTACFG	=	0xe670
                    E671    475 _PORTCCFG	=	0xe671
                    E672    476 _PORTECFG	=	0xe672
                    E678    477 _I2CS	=	0xe678
                    E679    478 _I2DAT	=	0xe679
                    E67A    479 _I2CTL	=	0xe67a
                    E67B    480 _XAUTODAT1	=	0xe67b
                    E67C    481 _XAUTODAT2	=	0xe67c
                    E680    482 _USBCS	=	0xe680
                    E681    483 _SUSPEND	=	0xe681
                    E682    484 _WAKEUPCS	=	0xe682
                    E683    485 _TOGCTL	=	0xe683
                    E684    486 _USBFRAMEH	=	0xe684
                    E685    487 _USBFRAMEL	=	0xe685
                    E686    488 _MICROFRAME	=	0xe686
                    E687    489 _FNADDR	=	0xe687
                    E68A    490 _EP0BCH	=	0xe68a
                    E68B    491 _EP0BCL	=	0xe68b
                    E68D    492 _EP1OUTBC	=	0xe68d
                    E68F    493 _EP1INBC	=	0xe68f
                    E690    494 _EP2BCH	=	0xe690
                    E691    495 _EP2BCL	=	0xe691
                    E694    496 _EP4BCH	=	0xe694
                    E695    497 _EP4BCL	=	0xe695
                    E698    498 _EP6BCH	=	0xe698
                    E699    499 _EP6BCL	=	0xe699
                    E69C    500 _EP8BCH	=	0xe69c
                    E69D    501 _EP8BCL	=	0xe69d
                    E6A0    502 _EP0CS	=	0xe6a0
                    E6A1    503 _EP1OUTCS	=	0xe6a1
                    E6A2    504 _EP1INCS	=	0xe6a2
                    E6A3    505 _EP2CS	=	0xe6a3
                    E6A4    506 _EP4CS	=	0xe6a4
                    E6A5    507 _EP6CS	=	0xe6a5
                    E6A6    508 _EP8CS	=	0xe6a6
                    E6A7    509 _EP2FIFOFLGS	=	0xe6a7
                    E6A8    510 _EP4FIFOFLGS	=	0xe6a8
                    E6A9    511 _EP6FIFOFLGS	=	0xe6a9
                    E6AA    512 _EP8FIFOFLGS	=	0xe6aa
                    E6AB    513 _EP2FIFOBCH	=	0xe6ab
                    E6AC    514 _EP2FIFOBCL	=	0xe6ac
                    E6AD    515 _EP4FIFOBCH	=	0xe6ad
                    E6AE    516 _EP4FIFOBCL	=	0xe6ae
                    E6AF    517 _EP6FIFOBCH	=	0xe6af
                    E6B0    518 _EP6FIFOBCL	=	0xe6b0
                    E6B1    519 _EP8FIFOBCH	=	0xe6b1
                    E6B2    520 _EP8FIFOBCL	=	0xe6b2
                    E6B3    521 _SUDPTRH	=	0xe6b3
                    E6B4    522 _SUDPTRL	=	0xe6b4
                    E6B5    523 _SUDPTRCTL	=	0xe6b5
                    E6B8    524 _SETUPDAT	=	0xe6b8
                    E6C0    525 _GPIFWFSELECT	=	0xe6c0
                    E6C1    526 _GPIFIDLECS	=	0xe6c1
                    E6C2    527 _GPIFIDLECTL	=	0xe6c2
                    E6C3    528 _GPIFCTLCFG	=	0xe6c3
                    E6C4    529 _GPIFADRH	=	0xe6c4
                    E6C5    530 _GPIFADRL	=	0xe6c5
                    E6CE    531 _GPIFTCB3	=	0xe6ce
                    E6CF    532 _GPIFTCB2	=	0xe6cf
                    E6D0    533 _GPIFTCB1	=	0xe6d0
                    E6D1    534 _GPIFTCB0	=	0xe6d1
                    E6D2    535 _EP2GPIFFLGSEL	=	0xe6d2
                    E6D3    536 _EP2GPIFPFSTOP	=	0xe6d3
                    E6D4    537 _EP2GPIFTRIG	=	0xe6d4
                    E6DA    538 _EP4GPIFFLGSEL	=	0xe6da
                    E6DB    539 _EP4GPIFPFSTOP	=	0xe6db
                    E6DC    540 _EP4GPIFTRIG	=	0xe6dc
                    E6E2    541 _EP6GPIFFLGSEL	=	0xe6e2
                    E6E3    542 _EP6GPIFPFSTOP	=	0xe6e3
                    E6E4    543 _EP6GPIFTRIG	=	0xe6e4
                    E6EA    544 _EP8GPIFFLGSEL	=	0xe6ea
                    E6EB    545 _EP8GPIFPFSTOP	=	0xe6eb
                    E6EC    546 _EP8GPIFTRIG	=	0xe6ec
                    E6F0    547 _XGPIFSGLDATH	=	0xe6f0
                    E6F1    548 _XGPIFSGLDATLX	=	0xe6f1
                    E6F2    549 _XGPIFSGLDATLNOX	=	0xe6f2
                    E6F3    550 _GPIFREADYCFG	=	0xe6f3
                    E6F4    551 _GPIFREADYSTAT	=	0xe6f4
                    E6F5    552 _GPIFABORT	=	0xe6f5
                    E6C6    553 _FLOWSTATE	=	0xe6c6
                    E6C7    554 _FLOWLOGIC	=	0xe6c7
                    E6C8    555 _FLOWEQ0CTL	=	0xe6c8
                    E6C9    556 _FLOWEQ1CTL	=	0xe6c9
                    E6CA    557 _FLOWHOLDOFF	=	0xe6ca
                    E6CB    558 _FLOWSTB	=	0xe6cb
                    E6CC    559 _FLOWSTBEDGE	=	0xe6cc
                    E6CD    560 _FLOWSTBHPERIOD	=	0xe6cd
                    E60C    561 _GPIFHOLDAMOUNT	=	0xe60c
                    E67D    562 _UDMACRCH	=	0xe67d
                    E67E    563 _UDMACRCL	=	0xe67e
                    E67F    564 _UDMACRCQUAL	=	0xe67f
                    E6F8    565 _DBUG	=	0xe6f8
                    E6F9    566 _TESTCFG	=	0xe6f9
                    E6FA    567 _USBTEST	=	0xe6fa
                    E6FB    568 _CT1	=	0xe6fb
                    E6FC    569 _CT2	=	0xe6fc
                    E6FD    570 _CT3	=	0xe6fd
                    E6FE    571 _CT4	=	0xe6fe
                    E740    572 _EP0BUF	=	0xe740
                    E780    573 _EP1OUTBUF	=	0xe780
                    E7C0    574 _EP1INBUF	=	0xe7c0
                    F000    575 _EP2FIFOBUF	=	0xf000
                    F400    576 _EP4FIFOBUF	=	0xf400
                    F800    577 _EP6FIFOBUF	=	0xf800
                    FC00    578 _EP8FIFOBUF	=	0xfc00
                            579 ;--------------------------------------------------------
                            580 ; absolute external ram data
                            581 ;--------------------------------------------------------
                            582 	.area XABS    (ABS,XDATA)
                            583 ;--------------------------------------------------------
                            584 ; external initialized ram data
                            585 ;--------------------------------------------------------
                            586 	.area XISEG   (XDATA)
                            587 	.area HOME    (CODE)
                            588 	.area GSINIT0 (CODE)
                            589 	.area GSINIT1 (CODE)
                            590 	.area GSINIT2 (CODE)
                            591 	.area GSINIT3 (CODE)
                            592 	.area GSINIT4 (CODE)
                            593 	.area GSINIT5 (CODE)
                            594 	.area GSINIT  (CODE)
                            595 	.area GSFINAL (CODE)
                            596 	.area CSEG    (CODE)
                            597 ;--------------------------------------------------------
                            598 ; interrupt vector 
                            599 ;--------------------------------------------------------
                            600 	.area HOME    (CODE)
   0000                     601 __interrupt_vect:
   0000 02s00r00            602 	ljmp	__sdcc_gsinit_startup
                            603 ;--------------------------------------------------------
                            604 ; global & static initialisations
                            605 ;--------------------------------------------------------
                            606 	.area HOME    (CODE)
                            607 	.area GSINIT  (CODE)
                            608 	.area GSFINAL (CODE)
                            609 	.area GSINIT  (CODE)
                            610 	.globl __sdcc_gsinit_startup
                            611 	.globl __sdcc_program_startup
                            612 	.globl __start__stack
                            613 	.globl __mcs51_genXINIT
                            614 	.globl __mcs51_genXRAMCLEAR
                            615 	.globl __mcs51_genRAMCLEAR
                            616 ;	eeprom_mark.c:19: char *FWmark = "FWEEPRv000.001";
   0000 75*00r2F            617 	mov	_FWmark,#__str_5
   0003 75*01s00            618 	mov	(_FWmark + 1),#(__str_5 >> 8)
   0006 75*02 80            619 	mov	(_FWmark + 2),#0x80
                            620 ;	eeprom_mark.c:21: xdata unsigned char *err =(xdata char*)0x1200;
   0009 75*03 00            621 	mov	_err,#0x00
   000C 75*04 12            622 	mov	(_err + 1),#0x12
                            623 ;	eeprom_mark.c:22: xdata unsigned char *dat =(xdata char*)0x1000;
   000F 75*05 00            624 	mov	_dat,#0x00
   0012 75*06 10            625 	mov	(_dat + 1),#0x10
                            626 ;	eeprom_mark.c:23: xdata unsigned char *jump_table =(xdata char*)0x1400;
   0015 75*07 00            627 	mov	_jump_table,#0x00
   0018 75*08 14            628 	mov	(_jump_table + 1),#0x14
                            629 ;	eeprom_mark.c:234: xdata unsigned char *command = (xdata unsigned char *)0x1100;
   001B 75*09 00            630 	mov	_command,#0x00
   001E 75*0A 11            631 	mov	(_command + 1),#0x11
                            632 ;	eeprom_mark.c:235: xdata unsigned char *HWmark = (xdata unsigned char *)0x1140;
   0021 75*0B 40            633 	mov	_HWmark,#0x40
   0024 75*0C 11            634 	mov	(_HWmark + 1),#0x11
                            635 	.area GSFINAL (CODE)
   0000 02s00r03            636 	ljmp	__sdcc_program_startup
                            637 ;--------------------------------------------------------
                            638 ; Home
                            639 ;--------------------------------------------------------
                            640 	.area HOME    (CODE)
                            641 	.area HOME    (CODE)
   0003                     642 __sdcc_program_startup:
   0003 12s04rA9            643 	lcall	_main
                            644 ;	return from main will lock up
   0006 80 FE               645 	sjmp .
                            646 ;--------------------------------------------------------
                            647 ; code
                            648 ;--------------------------------------------------------
                            649 	.area CSEG    (CODE)
                            650 ;------------------------------------------------------------
                            651 ;Allocation info for local variables in function 'EEErase'
                            652 ;------------------------------------------------------------
                            653 ;ee_adr                    Allocated to registers r6 r7 
                            654 ;------------------------------------------------------------
                            655 ;	eeprom_mark.c:43: static uint8 EEErase(uint16 ee_adr)
                            656 ;	-----------------------------------------
                            657 ;	 function EEErase
                            658 ;	-----------------------------------------
   0000                     659 _EEErase:
                    0007    660 	ar7 = 0x07
                    0006    661 	ar6 = 0x06
                    0005    662 	ar5 = 0x05
                    0004    663 	ar4 = 0x04
                    0003    664 	ar3 = 0x03
                    0002    665 	ar2 = 0x02
                    0001    666 	ar1 = 0x01
                    0000    667 	ar0 = 0x00
   0000 AE 82               668 	mov	r6,dpl
   0002 AF 83               669 	mov	r7,dph
                            670 ;	eeprom_mark.c:45: I2CS = I2CS_START;
   0004 90 E6 78            671 	mov	dptr,#_I2CS
   0007 74 80               672 	mov	a,#0x80
   0009 F0                  673 	movx	@dptr,a
                            674 ;	eeprom_mark.c:46: I2DAT = EEPROM_ADR | I2CWRITE;
   000A 90 E6 79            675 	mov	dptr,#_I2DAT
   000D 74 A2               676 	mov	a,#0xA2
   000F F0                  677 	movx	@dptr,a
                            678 ;	eeprom_mark.c:47: while(!(I2CS & I2CS_DONE));
   0010                     679 00101$:
   0010 90 E6 78            680 	mov	dptr,#_I2CS
   0013 E0                  681 	movx	a,@dptr
   0014 FD                  682 	mov	r5,a
   0015 30 E0 F8            683 	jnb	acc.0,00101$
                            684 ;	eeprom_mark.c:50: if(!(I2CS & I2CS_ACK)) return(1);
   0018 90 E6 78            685 	mov	dptr,#_I2CS
   001B E0                  686 	movx	a,@dptr
   001C FD                  687 	mov	r5,a
   001D 20 E1 04            688 	jb	acc.1,00105$
   0020 75 82 01            689 	mov	dpl,#0x01
   0023 22                  690 	ret
   0024                     691 00105$:
                            692 ;	eeprom_mark.c:53: I2DAT = (ee_adr>>8);
   0024 90 E6 79            693 	mov	dptr,#_I2DAT
   0027 EF                  694 	mov	a,r7
   0028 F0                  695 	movx	@dptr,a
                            696 ;	eeprom_mark.c:54: while(!(I2CS & I2CS_DONE));
   0029                     697 00106$:
   0029 90 E6 78            698 	mov	dptr,#_I2CS
   002C E0                  699 	movx	a,@dptr
   002D FD                  700 	mov	r5,a
   002E 30 E0 F8            701 	jnb	acc.0,00106$
                            702 ;	eeprom_mark.c:57: if(!(I2CS & I2CS_ACK)) return(2);
   0031 90 E6 78            703 	mov	dptr,#_I2CS
   0034 E0                  704 	movx	a,@dptr
   0035 FD                  705 	mov	r5,a
   0036 20 E1 04            706 	jb	acc.1,00110$
   0039 75 82 02            707 	mov	dpl,#0x02
   003C 22                  708 	ret
   003D                     709 00110$:
                            710 ;	eeprom_mark.c:60: I2DAT = (ee_adr & 0xff);
   003D 7F 00               711 	mov	r7,#0x00
   003F 90 E6 79            712 	mov	dptr,#_I2DAT
   0042 EE                  713 	mov	a,r6
   0043 F0                  714 	movx	@dptr,a
                            715 ;	eeprom_mark.c:61: while(!(I2CS & I2CS_DONE));
   0044                     716 00111$:
   0044 90 E6 78            717 	mov	dptr,#_I2CS
   0047 E0                  718 	movx	a,@dptr
   0048 FF                  719 	mov	r7,a
   0049 30 E0 F8            720 	jnb	acc.0,00111$
                            721 ;	eeprom_mark.c:64: if(!(I2CS & I2CS_ACK)) return(3);
   004C 90 E6 78            722 	mov	dptr,#_I2CS
   004F E0                  723 	movx	a,@dptr
   0050 FF                  724 	mov	r7,a
   0051 20 E1 04            725 	jb	acc.1,00115$
   0054 75 82 03            726 	mov	dpl,#0x03
   0057 22                  727 	ret
   0058                     728 00115$:
                            729 ;	eeprom_mark.c:67: I2DAT = 0xff;
   0058 90 E6 79            730 	mov	dptr,#_I2DAT
   005B 74 FF               731 	mov	a,#0xFF
   005D F0                  732 	movx	@dptr,a
                            733 ;	eeprom_mark.c:68: while(!(I2CS & I2CS_DONE));
   005E                     734 00116$:
   005E 90 E6 78            735 	mov	dptr,#_I2CS
   0061 E0                  736 	movx	a,@dptr
   0062 FF                  737 	mov	r7,a
   0063 30 E0 F8            738 	jnb	acc.0,00116$
                            739 ;	eeprom_mark.c:70: I2CS = I2CS_STOP;
                            740 ;	eeprom_mark.c:72: if(!(I2CS & I2CS_ACK)) return(4);
   0066 90 E6 78            741 	mov	dptr,#_I2CS
   0069 74 40               742 	mov	a,#0x40
   006B F0                  743 	movx	@dptr,a
   006C E0                  744 	movx	a,@dptr
   006D FF                  745 	mov	r7,a
   006E 20 E1 04            746 	jb	acc.1,00127$
   0071 75 82 04            747 	mov	dpl,#0x04
   0074 22                  748 	ret
   0075                     749 00127$:
                            750 ;	eeprom_mark.c:77: I2CS = I2CS_START;
   0075 90 E6 78            751 	mov	dptr,#_I2CS
   0078 74 80               752 	mov	a,#0x80
   007A F0                  753 	movx	@dptr,a
                            754 ;	eeprom_mark.c:78: I2DAT = EEPROM_ADR | I2CWRITE;
   007B 90 E6 79            755 	mov	dptr,#_I2DAT
   007E 74 A2               756 	mov	a,#0xA2
   0080 F0                  757 	movx	@dptr,a
                            758 ;	eeprom_mark.c:79: while(!(I2CS & I2CS_DONE));
   0081                     759 00121$:
   0081 90 E6 78            760 	mov	dptr,#_I2CS
   0084 E0                  761 	movx	a,@dptr
   0085 FF                  762 	mov	r7,a
   0086 30 E0 F8            763 	jnb	acc.0,00121$
                            764 ;	eeprom_mark.c:81: if((I2CS & I2CS_ACK)) break;
   0089 90 E6 78            765 	mov	dptr,#_I2CS
   008C E0                  766 	movx	a,@dptr
   008D FF                  767 	mov	r7,a
   008E 30 E1 E4            768 	jnb	acc.1,00127$
                            769 ;	eeprom_mark.c:84: return(64);
   0091 75 82 40            770 	mov	dpl,#0x40
   0094 22                  771 	ret
                            772 ;------------------------------------------------------------
                            773 ;Allocation info for local variables in function 'EEWrite'
                            774 ;------------------------------------------------------------
                            775 ;a                         Allocated with name '_EEWrite_PARM_2'
                            776 ;ee_adr                    Allocated to registers r6 r7 
                            777 ;------------------------------------------------------------
                            778 ;	eeprom_mark.c:92: static uint8 EEWrite(uint16 ee_adr, unsigned char a)
                            779 ;	-----------------------------------------
                            780 ;	 function EEWrite
                            781 ;	-----------------------------------------
   0095                     782 _EEWrite:
   0095 AE 82               783 	mov	r6,dpl
   0097 AF 83               784 	mov	r7,dph
                            785 ;	eeprom_mark.c:94: I2CS = I2CS_START;
   0099 90 E6 78            786 	mov	dptr,#_I2CS
   009C 74 80               787 	mov	a,#0x80
   009E F0                  788 	movx	@dptr,a
                            789 ;	eeprom_mark.c:95: I2DAT = EEPROM_ADR | I2CWRITE;
   009F 90 E6 79            790 	mov	dptr,#_I2DAT
   00A2 74 A2               791 	mov	a,#0xA2
   00A4 F0                  792 	movx	@dptr,a
                            793 ;	eeprom_mark.c:96: while(!(I2CS & I2CS_DONE));
   00A5                     794 00101$:
   00A5 90 E6 78            795 	mov	dptr,#_I2CS
   00A8 E0                  796 	movx	a,@dptr
   00A9 FD                  797 	mov	r5,a
   00AA 30 E0 F8            798 	jnb	acc.0,00101$
                            799 ;	eeprom_mark.c:99: if(!(I2CS & I2CS_ACK)) return(1);
   00AD 90 E6 78            800 	mov	dptr,#_I2CS
   00B0 E0                  801 	movx	a,@dptr
   00B1 FD                  802 	mov	r5,a
   00B2 20 E1 04            803 	jb	acc.1,00105$
   00B5 75 82 01            804 	mov	dpl,#0x01
   00B8 22                  805 	ret
   00B9                     806 00105$:
                            807 ;	eeprom_mark.c:102: I2DAT = (ee_adr>>8);
   00B9 90 E6 79            808 	mov	dptr,#_I2DAT
   00BC EF                  809 	mov	a,r7
   00BD F0                  810 	movx	@dptr,a
                            811 ;	eeprom_mark.c:103: while(!(I2CS & I2CS_DONE));
   00BE                     812 00106$:
   00BE 90 E6 78            813 	mov	dptr,#_I2CS
   00C1 E0                  814 	movx	a,@dptr
   00C2 FD                  815 	mov	r5,a
   00C3 30 E0 F8            816 	jnb	acc.0,00106$
                            817 ;	eeprom_mark.c:106: if(!(I2CS & I2CS_ACK)) return(2);
   00C6 90 E6 78            818 	mov	dptr,#_I2CS
   00C9 E0                  819 	movx	a,@dptr
   00CA FD                  820 	mov	r5,a
   00CB 20 E1 04            821 	jb	acc.1,00110$
   00CE 75 82 02            822 	mov	dpl,#0x02
   00D1 22                  823 	ret
   00D2                     824 00110$:
                            825 ;	eeprom_mark.c:109: I2DAT = (ee_adr & 0xff);
   00D2 7F 00               826 	mov	r7,#0x00
   00D4 90 E6 79            827 	mov	dptr,#_I2DAT
   00D7 EE                  828 	mov	a,r6
   00D8 F0                  829 	movx	@dptr,a
                            830 ;	eeprom_mark.c:110: while(!(I2CS & I2CS_DONE));
   00D9                     831 00111$:
   00D9 90 E6 78            832 	mov	dptr,#_I2CS
   00DC E0                  833 	movx	a,@dptr
   00DD FF                  834 	mov	r7,a
   00DE 30 E0 F8            835 	jnb	acc.0,00111$
                            836 ;	eeprom_mark.c:113: if(!(I2CS & I2CS_ACK)) return(3);
   00E1 90 E6 78            837 	mov	dptr,#_I2CS
   00E4 E0                  838 	movx	a,@dptr
   00E5 FF                  839 	mov	r7,a
   00E6 20 E1 04            840 	jb	acc.1,00115$
   00E9 75 82 03            841 	mov	dpl,#0x03
   00EC 22                  842 	ret
   00ED                     843 00115$:
                            844 ;	eeprom_mark.c:116: I2DAT = a;
   00ED 90 E6 79            845 	mov	dptr,#_I2DAT
   00F0 E5*00               846 	mov	a,_EEWrite_PARM_2
   00F2 F0                  847 	movx	@dptr,a
                            848 ;	eeprom_mark.c:117: while(!(I2CS & I2CS_DONE));
   00F3                     849 00116$:
   00F3 90 E6 78            850 	mov	dptr,#_I2CS
   00F6 E0                  851 	movx	a,@dptr
   00F7 FF                  852 	mov	r7,a
   00F8 30 E0 F8            853 	jnb	acc.0,00116$
                            854 ;	eeprom_mark.c:119: I2CS = I2CS_STOP;
                            855 ;	eeprom_mark.c:121: if(!(I2CS & I2CS_ACK)) return(4);
   00FB 90 E6 78            856 	mov	dptr,#_I2CS
   00FE 74 40               857 	mov	a,#0x40
   0100 F0                  858 	movx	@dptr,a
   0101 E0                  859 	movx	a,@dptr
   0102 FF                  860 	mov	r7,a
   0103 20 E1 04            861 	jb	acc.1,00127$
   0106 75 82 04            862 	mov	dpl,#0x04
   0109 22                  863 	ret
   010A                     864 00127$:
                            865 ;	eeprom_mark.c:126: I2CS = I2CS_START;
   010A 90 E6 78            866 	mov	dptr,#_I2CS
   010D 74 80               867 	mov	a,#0x80
   010F F0                  868 	movx	@dptr,a
                            869 ;	eeprom_mark.c:127: I2DAT = EEPROM_ADR | I2CWRITE;
   0110 90 E6 79            870 	mov	dptr,#_I2DAT
   0113 74 A2               871 	mov	a,#0xA2
   0115 F0                  872 	movx	@dptr,a
                            873 ;	eeprom_mark.c:128: while(!(I2CS & I2CS_DONE));
   0116                     874 00121$:
   0116 90 E6 78            875 	mov	dptr,#_I2CS
   0119 E0                  876 	movx	a,@dptr
   011A FF                  877 	mov	r7,a
   011B 30 E0 F8            878 	jnb	acc.0,00121$
                            879 ;	eeprom_mark.c:130: if((I2CS & I2CS_ACK)) break;
   011E 90 E6 78            880 	mov	dptr,#_I2CS
   0121 E0                  881 	movx	a,@dptr
   0122 FF                  882 	mov	r7,a
   0123 30 E1 E4            883 	jnb	acc.1,00127$
                            884 ;	eeprom_mark.c:132: return(64);
   0126 75 82 40            885 	mov	dpl,#0x40
   0129 22                  886 	ret
                            887 ;------------------------------------------------------------
                            888 ;Allocation info for local variables in function 'EERead'
                            889 ;------------------------------------------------------------
                            890 ;HWmark                    Allocated with name '_EERead_PARM_2'
                            891 ;ee_adr                    Allocated to registers r6 r7 
                            892 ;n                         Allocated with name '_EERead_n_1_1'
                            893 ;------------------------------------------------------------
                            894 ;	eeprom_mark.c:140: static uint8 EERead(uint16 ee_adr, 	unsigned char HWmark[32])
                            895 ;	-----------------------------------------
                            896 ;	 function EERead
                            897 ;	-----------------------------------------
   012A                     898 _EERead:
   012A AE 82               899 	mov	r6,dpl
   012C AF 83               900 	mov	r7,dph
                            901 ;	eeprom_mark.c:145: I2CS = I2CS_START;
   012E 90 E6 78            902 	mov	dptr,#_I2CS
   0131 74 80               903 	mov	a,#0x80
   0133 F0                  904 	movx	@dptr,a
                            905 ;	eeprom_mark.c:146: I2DAT = EEPROM_ADR | I2CWRITE;
   0134 90 E6 79            906 	mov	dptr,#_I2DAT
   0137 74 A2               907 	mov	a,#0xA2
   0139 F0                  908 	movx	@dptr,a
                            909 ;	eeprom_mark.c:147: while(!(I2CS & I2CS_DONE));
   013A                     910 00101$:
   013A 90 E6 78            911 	mov	dptr,#_I2CS
   013D E0                  912 	movx	a,@dptr
   013E FD                  913 	mov	r5,a
   013F 30 E0 F8            914 	jnb	acc.0,00101$
                            915 ;	eeprom_mark.c:150: if(!(I2CS & I2CS_ACK)) return(1);
   0142 90 E6 78            916 	mov	dptr,#_I2CS
   0145 E0                  917 	movx	a,@dptr
   0146 FD                  918 	mov	r5,a
   0147 20 E1 04            919 	jb	acc.1,00105$
   014A 75 82 01            920 	mov	dpl,#0x01
   014D 22                  921 	ret
   014E                     922 00105$:
                            923 ;	eeprom_mark.c:153: I2DAT = (ee_adr>>8);
   014E 90 E6 79            924 	mov	dptr,#_I2DAT
   0151 EF                  925 	mov	a,r7
   0152 F0                  926 	movx	@dptr,a
                            927 ;	eeprom_mark.c:154: while(!(I2CS & I2CS_DONE));
   0153                     928 00106$:
   0153 90 E6 78            929 	mov	dptr,#_I2CS
   0156 E0                  930 	movx	a,@dptr
   0157 FD                  931 	mov	r5,a
   0158 30 E0 F8            932 	jnb	acc.0,00106$
                            933 ;	eeprom_mark.c:157: if(!(I2CS & I2CS_ACK)) return(2);
   015B 90 E6 78            934 	mov	dptr,#_I2CS
   015E E0                  935 	movx	a,@dptr
   015F FD                  936 	mov	r5,a
   0160 20 E1 04            937 	jb	acc.1,00110$
   0163 75 82 02            938 	mov	dpl,#0x02
   0166 22                  939 	ret
   0167                     940 00110$:
                            941 ;	eeprom_mark.c:160: I2DAT = (ee_adr & 0xff);
   0167 7F 00               942 	mov	r7,#0x00
   0169 90 E6 79            943 	mov	dptr,#_I2DAT
   016C EE                  944 	mov	a,r6
   016D F0                  945 	movx	@dptr,a
                            946 ;	eeprom_mark.c:161: while(!(I2CS & I2CS_DONE));
   016E                     947 00111$:
   016E 90 E6 78            948 	mov	dptr,#_I2CS
   0171 E0                  949 	movx	a,@dptr
   0172 FF                  950 	mov	r7,a
   0173 30 E0 F8            951 	jnb	acc.0,00111$
                            952 ;	eeprom_mark.c:164: if(!(I2CS & I2CS_ACK)) return(3);
   0176 90 E6 78            953 	mov	dptr,#_I2CS
   0179 E0                  954 	movx	a,@dptr
   017A FF                  955 	mov	r7,a
   017B 20 E1 04            956 	jb	acc.1,00115$
   017E 75 82 03            957 	mov	dpl,#0x03
   0181 22                  958 	ret
   0182                     959 00115$:
                            960 ;	eeprom_mark.c:167: I2CS = I2CS_START;
   0182 90 E6 78            961 	mov	dptr,#_I2CS
   0185 74 80               962 	mov	a,#0x80
   0187 F0                  963 	movx	@dptr,a
                            964 ;	eeprom_mark.c:168: I2DAT = EEPROM_ADR | I2CREAD;
   0188 90 E6 79            965 	mov	dptr,#_I2DAT
   018B 74 A3               966 	mov	a,#0xA3
   018D F0                  967 	movx	@dptr,a
                            968 ;	eeprom_mark.c:169: while(!(I2CS & I2CS_DONE));
   018E                     969 00116$:
   018E 90 E6 78            970 	mov	dptr,#_I2CS
   0191 E0                  971 	movx	a,@dptr
   0192 FF                  972 	mov	r7,a
   0193 30 E0 F8            973 	jnb	acc.0,00116$
                            974 ;	eeprom_mark.c:172: if(!(I2CS & I2CS_ACK)) return(5);
   0196 90 E6 78            975 	mov	dptr,#_I2CS
   0199 E0                  976 	movx	a,@dptr
   019A FF                  977 	mov	r7,a
   019B 20 E1 04            978 	jb	acc.1,00120$
   019E 75 82 05            979 	mov	dpl,#0x05
   01A1 22                  980 	ret
   01A2                     981 00120$:
                            982 ;	eeprom_mark.c:175: HWmark[0] = I2DAT;
   01A2 AD*00               983 	mov	r5,_EERead_PARM_2
   01A4 AE*01               984 	mov	r6,(_EERead_PARM_2 + 1)
   01A6 AF*02               985 	mov	r7,(_EERead_PARM_2 + 2)
   01A8 90 E6 79            986 	mov	dptr,#_I2DAT
   01AB E0                  987 	movx	a,@dptr
   01AC FC                  988 	mov	r4,a
   01AD 8D 82               989 	mov	dpl,r5
   01AF 8E 83               990 	mov	dph,r6
   01B1 8F F0               991 	mov	b,r7
   01B3 12s00r00            992 	lcall	__gptrput
                            993 ;	eeprom_mark.c:176: while(!(I2CS & I2CS_DONE));
   01B6                     994 00121$:
   01B6 90 E6 78            995 	mov	dptr,#_I2CS
   01B9 E0                  996 	movx	a,@dptr
   01BA FC                  997 	mov	r4,a
   01BB 30 E0 F8            998 	jnb	acc.0,00121$
                            999 ;	eeprom_mark.c:177: if(!(I2CS & I2CS_ACK)) return(6);
   01BE 90 E6 78           1000 	mov	dptr,#_I2CS
   01C1 E0                 1001 	movx	a,@dptr
   01C2 FC                 1002 	mov	r4,a
   01C3 20 E1 04           1003 	jb	acc.1,00126$
   01C6 75 82 06           1004 	mov	dpl,#0x06
   01C9 22                 1005 	ret
                           1006 ;	eeprom_mark.c:180: while(!(I2CS & I2CS_DONE));
   01CA                    1007 00126$:
   01CA 90 E6 78           1008 	mov	dptr,#_I2CS
   01CD E0                 1009 	movx	a,@dptr
   01CE FC                 1010 	mov	r4,a
   01CF 30 E0 F8           1011 	jnb	acc.0,00126$
                           1012 ;	eeprom_mark.c:181: if(!(I2CS & I2CS_ACK)) return(7);
   01D2 90 E6 78           1013 	mov	dptr,#_I2CS
   01D5 E0                 1014 	movx	a,@dptr
   01D6 FC                 1015 	mov	r4,a
   01D7 20 E1 04           1016 	jb	acc.1,00130$
   01DA 75 82 07           1017 	mov	dpl,#0x07
   01DD 22                 1018 	ret
   01DE                    1019 00130$:
                           1020 ;	eeprom_mark.c:183: HWmark[0] = I2DAT;
   01DE 90 E6 79           1021 	mov	dptr,#_I2DAT
   01E1 E0                 1022 	movx	a,@dptr
   01E2 FC                 1023 	mov	r4,a
   01E3 8D 82              1024 	mov	dpl,r5
   01E5 8E 83              1025 	mov	dph,r6
   01E7 8F F0              1026 	mov	b,r7
   01E9 12s00r00           1027 	lcall	__gptrput
                           1028 ;	eeprom_mark.c:184: while(!(I2CS & I2CS_DONE));
   01EC                    1029 00131$:
   01EC 90 E6 78           1030 	mov	dptr,#_I2CS
   01EF E0                 1031 	movx	a,@dptr
   01F0 FC                 1032 	mov	r4,a
   01F1 30 E0 F8           1033 	jnb	acc.0,00131$
                           1034 ;	eeprom_mark.c:185: if(!(I2CS & I2CS_ACK)) return(8);
   01F4 90 E6 78           1035 	mov	dptr,#_I2CS
   01F7 E0                 1036 	movx	a,@dptr
   01F8 FC                 1037 	mov	r4,a
   01F9 20 E1 04           1038 	jb	acc.1,00135$
   01FC 75 82 08           1039 	mov	dpl,#0x08
   01FF 22                 1040 	ret
   0200                    1041 00135$:
                           1042 ;	eeprom_mark.c:187: HWmark[1] = I2DAT;
   0200 74 01              1043 	mov	a,#0x01
   0202 2D                 1044 	add	a,r5
   0203 FA                 1045 	mov	r2,a
   0204 E4                 1046 	clr	a
   0205 3E                 1047 	addc	a,r6
   0206 FB                 1048 	mov	r3,a
   0207 8F 04              1049 	mov	ar4,r7
   0209 90 E6 79           1050 	mov	dptr,#_I2DAT
   020C E0                 1051 	movx	a,@dptr
   020D F9                 1052 	mov	r1,a
   020E 8A 82              1053 	mov	dpl,r2
   0210 8B 83              1054 	mov	dph,r3
   0212 8C F0              1055 	mov	b,r4
   0214 12s00r00           1056 	lcall	__gptrput
                           1057 ;	eeprom_mark.c:188: while(!(I2CS & I2CS_DONE));
   0217                    1058 00136$:
   0217 90 E6 78           1059 	mov	dptr,#_I2CS
   021A E0                 1060 	movx	a,@dptr
   021B FC                 1061 	mov	r4,a
   021C 30 E0 F8           1062 	jnb	acc.0,00136$
                           1063 ;	eeprom_mark.c:189: if(!(I2CS & I2CS_ACK)) return(8);
   021F 90 E6 78           1064 	mov	dptr,#_I2CS
   0222 E0                 1065 	movx	a,@dptr
   0223 FC                 1066 	mov	r4,a
   0224 20 E1 04           1067 	jb	acc.1,00193$
   0227 75 82 08           1068 	mov	dpl,#0x08
   022A 22                 1069 	ret
                           1070 ;	eeprom_mark.c:191: for(n = 2;n<31;n++) {
   022B                    1071 00193$:
   022B 75*03 02           1072 	mov	_EERead_n_1_1,#0x02
   022E 75*04 00           1073 	mov	(_EERead_n_1_1 + 1),#0x00
   0231                    1074 00159$:
   0231 C3                 1075 	clr	c
   0232 E5*03              1076 	mov	a,_EERead_n_1_1
   0234 94 1F              1077 	subb	a,#0x1F
   0236 E5*04              1078 	mov	a,(_EERead_n_1_1 + 1)
   0238 64 80              1079 	xrl	a,#0x80
   023A 94 80              1080 	subb	a,#0x80
   023C 50 36              1081 	jnc	00162$
                           1082 ;	eeprom_mark.c:192: HWmark[n] = I2DAT;
   023E E5*03              1083 	mov	a,_EERead_n_1_1
   0240 2D                 1084 	add	a,r5
   0241 F8                 1085 	mov	r0,a
   0242 E5*04              1086 	mov	a,(_EERead_n_1_1 + 1)
   0244 3E                 1087 	addc	a,r6
   0245 F9                 1088 	mov	r1,a
   0246 8F 02              1089 	mov	ar2,r7
   0248 90 E6 79           1090 	mov	dptr,#_I2DAT
   024B E0                 1091 	movx	a,@dptr
   024C FC                 1092 	mov	r4,a
   024D 88 82              1093 	mov	dpl,r0
   024F 89 83              1094 	mov	dph,r1
   0251 8A F0              1095 	mov	b,r2
   0253 12s00r00           1096 	lcall	__gptrput
                           1097 ;	eeprom_mark.c:193: while(!(I2CS & I2CS_DONE));
   0256                    1098 00141$:
   0256 90 E6 78           1099 	mov	dptr,#_I2CS
   0259 E0                 1100 	movx	a,@dptr
   025A FC                 1101 	mov	r4,a
   025B 30 E0 F8           1102 	jnb	acc.0,00141$
                           1103 ;	eeprom_mark.c:194: if(!(I2CS & I2CS_ACK)) return(9);
   025E 90 E6 78           1104 	mov	dptr,#_I2CS
   0261 E0                 1105 	movx	a,@dptr
   0262 FC                 1106 	mov	r4,a
   0263 20 E1 04           1107 	jb	acc.1,00161$
   0266 75 82 09           1108 	mov	dpl,#0x09
   0269 22                 1109 	ret
   026A                    1110 00161$:
                           1111 ;	eeprom_mark.c:191: for(n = 2;n<31;n++) {
   026A 05*03              1112 	inc	_EERead_n_1_1
   026C E4                 1113 	clr	a
   026D B5*03 C1           1114 	cjne	a,_EERead_n_1_1,00159$
   0270 05*04              1115 	inc	(_EERead_n_1_1 + 1)
   0272 80 BD              1116 	sjmp	00159$
   0274                    1117 00162$:
                           1118 ;	eeprom_mark.c:197: I2CS = I2CS_LASTRD;
   0274 90 E6 78           1119 	mov	dptr,#_I2CS
   0277 74 20              1120 	mov	a,#0x20
   0279 F0                 1121 	movx	@dptr,a
                           1122 ;	eeprom_mark.c:198: HWmark[31] = I2DAT;
   027A 74 1F              1123 	mov	a,#0x1F
   027C 2D                 1124 	add	a,r5
   027D FD                 1125 	mov	r5,a
   027E E4                 1126 	clr	a
   027F 3E                 1127 	addc	a,r6
   0280 FE                 1128 	mov	r6,a
   0281 90 E6 79           1129 	mov	dptr,#_I2DAT
   0284 E0                 1130 	movx	a,@dptr
   0285 FC                 1131 	mov	r4,a
   0286 8D 82              1132 	mov	dpl,r5
   0288 8E 83              1133 	mov	dph,r6
   028A 8F F0              1134 	mov	b,r7
   028C 12s00r00           1135 	lcall	__gptrput
                           1136 ;	eeprom_mark.c:199: while(!(I2CS & I2CS_DONE));
   028F                    1137 00146$:
   028F 90 E6 78           1138 	mov	dptr,#_I2CS
   0292 E0                 1139 	movx	a,@dptr
   0293 FC                 1140 	mov	r4,a
   0294 30 E0 F8           1141 	jnb	acc.0,00146$
                           1142 ;	eeprom_mark.c:200: HWmark[31] = I2DAT;
   0297 90 E6 79           1143 	mov	dptr,#_I2DAT
   029A E0                 1144 	movx	a,@dptr
   029B FC                 1145 	mov	r4,a
   029C 8D 82              1146 	mov	dpl,r5
   029E 8E 83              1147 	mov	dph,r6
   02A0 8F F0              1148 	mov	b,r7
   02A2 12s00r00           1149 	lcall	__gptrput
                           1150 ;	eeprom_mark.c:201: while(!(I2CS & I2CS_DONE));
   02A5                    1151 00149$:
   02A5 90 E6 78           1152 	mov	dptr,#_I2CS
   02A8 E0                 1153 	movx	a,@dptr
   02A9 FF                 1154 	mov	r7,a
   02AA 30 E0 F8           1155 	jnb	acc.0,00149$
                           1156 ;	eeprom_mark.c:202: if(!(I2CS & I2CS_ACK)) return(10);
   02AD 90 E6 78           1157 	mov	dptr,#_I2CS
   02B0 E0                 1158 	movx	a,@dptr
   02B1 FF                 1159 	mov	r7,a
   02B2 20 E1 04           1160 	jb	acc.1,00153$
   02B5 75 82 0A           1161 	mov	dpl,#0x0A
   02B8 22                 1162 	ret
   02B9                    1163 00153$:
                           1164 ;	eeprom_mark.c:213: I2CS = I2CS_STOP;
   02B9 90 E6 78           1165 	mov	dptr,#_I2CS
   02BC 74 40              1166 	mov	a,#0x40
   02BE F0                 1167 	movx	@dptr,a
                           1168 ;	eeprom_mark.c:214: while(!(I2CS & I2CS_DONE));
   02BF                    1169 00154$:
   02BF 90 E6 78           1170 	mov	dptr,#_I2CS
   02C2 E0                 1171 	movx	a,@dptr
   02C3 FF                 1172 	mov	r7,a
   02C4 30 E0 F8           1173 	jnb	acc.0,00154$
                           1174 ;	eeprom_mark.c:216: if(!(I2CS & I2CS_ACK)) return(11);
   02C7 90 E6 78           1175 	mov	dptr,#_I2CS
   02CA E0                 1176 	movx	a,@dptr
   02CB FF                 1177 	mov	r7,a
   02CC 20 E1 04           1178 	jb	acc.1,00158$
   02CF 75 82 0B           1179 	mov	dpl,#0x0B
   02D2 22                 1180 	ret
   02D3                    1181 00158$:
                           1182 ;	eeprom_mark.c:218: return(64);
   02D3 75 82 40           1183 	mov	dpl,#0x40
   02D6 22                 1184 	ret
                           1185 ;------------------------------------------------------------
                           1186 ;Allocation info for local variables in function 'readmarkeeprom'
                           1187 ;------------------------------------------------------------
                           1188 ;n                         Allocated to registers r6 r7 
                           1189 ;------------------------------------------------------------
                           1190 ;	eeprom_mark.c:238: static uint8 readmarkeeprom(void) {
                           1191 ;	-----------------------------------------
                           1192 ;	 function readmarkeeprom
                           1193 ;	-----------------------------------------
   02D7                    1194 _readmarkeeprom:
                           1195 ;	eeprom_mark.c:242: I2CTL = 0x01;	// Set 400kHz:
   02D7 90 E6 7A           1196 	mov	dptr,#_I2CTL
   02DA 74 01              1197 	mov	a,#0x01
   02DC F0                 1198 	movx	@dptr,a
                           1199 ;	eeprom_mark.c:243: SYNCDELAY;
   02DD 00                 1200 	 nop; 
                           1201 ;	eeprom_mark.c:245: for(n=0;n<128;n++) HWmark[n] = 0x00;
   02DE 7E 00              1202 	mov	r6,#0x00
   02E0 7F 00              1203 	mov	r7,#0x00
   02E2                    1204 00101$:
   02E2 C3                 1205 	clr	c
   02E3 EE                 1206 	mov	a,r6
   02E4 94 80              1207 	subb	a,#0x80
   02E6 EF                 1208 	mov	a,r7
   02E7 64 80              1209 	xrl	a,#0x80
   02E9 94 80              1210 	subb	a,#0x80
   02EB 50 13              1211 	jnc	00104$
   02ED EE                 1212 	mov	a,r6
   02EE 25*0B              1213 	add	a,_HWmark
   02F0 F5 82              1214 	mov	dpl,a
   02F2 EF                 1215 	mov	a,r7
   02F3 35*0C              1216 	addc	a,(_HWmark + 1)
   02F5 F5 83              1217 	mov	dph,a
   02F7 E4                 1218 	clr	a
   02F8 F0                 1219 	movx	@dptr,a
   02F9 0E                 1220 	inc	r6
   02FA BE 00 E5           1221 	cjne	r6,#0x00,00101$
   02FD 0F                 1222 	inc	r7
   02FE 80 E2              1223 	sjmp	00101$
   0300                    1224 00104$:
                           1225 ;	eeprom_mark.c:246: err[32+3] = EERead( 0x0400,HWmark);
   0300 74 23              1226 	mov	a,#0x23
   0302 25*03              1227 	add	a,_err
   0304 FE                 1228 	mov	r6,a
   0305 E4                 1229 	clr	a
   0306 35*04              1230 	addc	a,(_err + 1)
   0308 FF                 1231 	mov	r7,a
   0309 85*0B*00           1232 	mov	_EERead_PARM_2,_HWmark
   030C 85*0C*01           1233 	mov	(_EERead_PARM_2 + 1),(_HWmark + 1)
   030F 75*02 00           1234 	mov	(_EERead_PARM_2 + 2),#0x00
   0312 90 04 00           1235 	mov	dptr,#0x0400
   0315 C0 07              1236 	push	ar7
   0317 C0 06              1237 	push	ar6
   0319 12s01r2A           1238 	lcall	_EERead
   031C AD 82              1239 	mov	r5,dpl
   031E D0 06              1240 	pop	ar6
   0320 D0 07              1241 	pop	ar7
   0322 8E 82              1242 	mov	dpl,r6
   0324 8F 83              1243 	mov	dph,r7
   0326 ED                 1244 	mov	a,r5
   0327 F0                 1245 	movx	@dptr,a
                           1246 ;	eeprom_mark.c:247: return(0);
   0328 75 82 00           1247 	mov	dpl,#0x00
   032B 22                 1248 	ret
                           1249 ;------------------------------------------------------------
                           1250 ;Allocation info for local variables in function 'writemarkeeprom'
                           1251 ;------------------------------------------------------------
                           1252 ;mark                      Allocated with name '_writemarkeeprom_mark_1_1'
                           1253 ;n                         Allocated to registers r3 r4 
                           1254 ;sloc0                     Allocated with name '_writemarkeeprom_sloc0_1_0'
                           1255 ;sloc1                     Allocated with name '_writemarkeeprom_sloc1_1_0'
                           1256 ;------------------------------------------------------------
                           1257 ;	eeprom_mark.c:251: static uint8 writemarkeeprom(struct mark *mark) {
                           1258 ;	-----------------------------------------
                           1259 ;	 function writemarkeeprom
                           1260 ;	-----------------------------------------
   032C                    1261 _writemarkeeprom:
   032C 85 82*0D           1262 	mov	_writemarkeeprom_mark_1_1,dpl
   032F 85 83*0E           1263 	mov	(_writemarkeeprom_mark_1_1 + 1),dph
   0332 85 F0*0F           1264 	mov	(_writemarkeeprom_mark_1_1 + 2),b
                           1265 ;	eeprom_mark.c:255: I2CTL = 0x01;	// Set 400kHz:
   0335 90 E6 7A           1266 	mov	dptr,#_I2CTL
   0338 74 01              1267 	mov	a,#0x01
   033A F0                 1268 	movx	@dptr,a
                           1269 ;	eeprom_mark.c:256: SYNCDELAY;
   033B 00                 1270 	 nop; 
                           1271 ;	eeprom_mark.c:258: for(n=0;n<128;n++) HWmark[n] = 0x00;
   033C 7B 00              1272 	mov	r3,#0x00
   033E 7C 00              1273 	mov	r4,#0x00
   0340                    1274 00101$:
   0340 C3                 1275 	clr	c
   0341 EB                 1276 	mov	a,r3
   0342 94 80              1277 	subb	a,#0x80
   0344 EC                 1278 	mov	a,r4
   0345 64 80              1279 	xrl	a,#0x80
   0347 94 80              1280 	subb	a,#0x80
   0349 50 13              1281 	jnc	00104$
   034B EB                 1282 	mov	a,r3
   034C 25*0B              1283 	add	a,_HWmark
   034E F5 82              1284 	mov	dpl,a
   0350 EC                 1285 	mov	a,r4
   0351 35*0C              1286 	addc	a,(_HWmark + 1)
   0353 F5 83              1287 	mov	dph,a
   0355 E4                 1288 	clr	a
   0356 F0                 1289 	movx	@dptr,a
   0357 0B                 1290 	inc	r3
   0358 BB 00 E5           1291 	cjne	r3,#0x00,00101$
   035B 0C                 1292 	inc	r4
   035C 80 E2              1293 	sjmp	00101$
   035E                    1294 00104$:
                           1295 ;	eeprom_mark.c:262: mark->serial_no_high,mark->serial_no_low);
   035E 74 0E              1296 	mov	a,#0x0E
   0360 25*0D              1297 	add	a,_writemarkeeprom_mark_1_1
   0362 FA                 1298 	mov	r2,a
   0363 E4                 1299 	clr	a
   0364 35*0E              1300 	addc	a,(_writemarkeeprom_mark_1_1 + 1)
   0366 FB                 1301 	mov	r3,a
   0367 AC*0F              1302 	mov	r4,(_writemarkeeprom_mark_1_1 + 2)
   0369 8A 82              1303 	mov	dpl,r2
   036B 8B 83              1304 	mov	dph,r3
   036D 8C F0              1305 	mov	b,r4
   036F 12s00r00           1306 	lcall	__gptrget
   0372 FA                 1307 	mov	r2,a
   0373 A3                 1308 	inc	dptr
   0374 12s00r00           1309 	lcall	__gptrget
   0377 FB                 1310 	mov	r3,a
   0378 74 0C              1311 	mov	a,#0x0C
   037A 25*0D              1312 	add	a,_writemarkeeprom_mark_1_1
   037C F8                 1313 	mov	r0,a
   037D E4                 1314 	clr	a
   037E 35*0E              1315 	addc	a,(_writemarkeeprom_mark_1_1 + 1)
   0380 F9                 1316 	mov	r1,a
   0381 AC*0F              1317 	mov	r4,(_writemarkeeprom_mark_1_1 + 2)
   0383 88 82              1318 	mov	dpl,r0
   0385 89 83              1319 	mov	dph,r1
   0387 8C F0              1320 	mov	b,r4
   0389 12s00r00           1321 	lcall	__gptrget
   038C F8                 1322 	mov	r0,a
   038D A3                 1323 	inc	dptr
   038E 12s00r00           1324 	lcall	__gptrget
   0391 F9                 1325 	mov	r1,a
                           1326 ;	eeprom_mark.c:261: mark->type,mark->major_version, mark->minor_version,
   0392 74 0A              1327 	mov	a,#0x0A
   0394 25*0D              1328 	add	a,_writemarkeeprom_mark_1_1
   0396 FC                 1329 	mov	r4,a
   0397 E4                 1330 	clr	a
   0398 35*0E              1331 	addc	a,(_writemarkeeprom_mark_1_1 + 1)
   039A FE                 1332 	mov	r6,a
   039B AF*0F              1333 	mov	r7,(_writemarkeeprom_mark_1_1 + 2)
   039D 8C 82              1334 	mov	dpl,r4
   039F 8E 83              1335 	mov	dph,r6
   03A1 8F F0              1336 	mov	b,r7
   03A3 12s00r00           1337 	lcall	__gptrget
   03A6 F5*10              1338 	mov	_writemarkeeprom_sloc0_1_0,a
   03A8 A3                 1339 	inc	dptr
   03A9 12s00r00           1340 	lcall	__gptrget
   03AC F5*11              1341 	mov	(_writemarkeeprom_sloc0_1_0 + 1),a
   03AE 74 08              1342 	mov	a,#0x08
   03B0 25*0D              1343 	add	a,_writemarkeeprom_mark_1_1
   03B2 FD                 1344 	mov	r5,a
   03B3 E4                 1345 	clr	a
   03B4 35*0E              1346 	addc	a,(_writemarkeeprom_mark_1_1 + 1)
   03B6 FE                 1347 	mov	r6,a
   03B7 AF*0F              1348 	mov	r7,(_writemarkeeprom_mark_1_1 + 2)
   03B9 8D 82              1349 	mov	dpl,r5
   03BB 8E 83              1350 	mov	dph,r6
   03BD 8F F0              1351 	mov	b,r7
   03BF 12s00r00           1352 	lcall	__gptrget
   03C2 F5*12              1353 	mov	_writemarkeeprom_sloc1_1_0,a
   03C4 A3                 1354 	inc	dptr
   03C5 12s00r00           1355 	lcall	__gptrget
   03C8 F5*13              1356 	mov	(_writemarkeeprom_sloc1_1_0 + 1),a
                           1357 ;	eeprom_mark.c:260: sprintf(HWmark,"HW%sv%03x.%03xs%04x.%04x",
   03CA AC*0B              1358 	mov	r4,_HWmark
   03CC AE*0C              1359 	mov	r6,(_HWmark + 1)
   03CE 7F 00              1360 	mov	r7,#0x00
   03D0 C0 02              1361 	push	ar2
   03D2 C0 03              1362 	push	ar3
   03D4 C0 00              1363 	push	ar0
   03D6 C0 01              1364 	push	ar1
   03D8 C0*10              1365 	push	_writemarkeeprom_sloc0_1_0
   03DA C0*11              1366 	push	(_writemarkeeprom_sloc0_1_0 + 1)
   03DC C0*12              1367 	push	_writemarkeeprom_sloc1_1_0
   03DE C0*13              1368 	push	(_writemarkeeprom_sloc1_1_0 + 1)
   03E0 C0*0D              1369 	push	_writemarkeeprom_mark_1_1
   03E2 C0*0E              1370 	push	(_writemarkeeprom_mark_1_1 + 1)
   03E4 C0*0F              1371 	push	(_writemarkeeprom_mark_1_1 + 2)
   03E6 74r00              1372 	mov	a,#__str_0
   03E8 C0 E0              1373 	push	acc
   03EA 74s00              1374 	mov	a,#(__str_0 >> 8)
   03EC C0 E0              1375 	push	acc
   03EE 74 80              1376 	mov	a,#0x80
   03F0 C0 E0              1377 	push	acc
   03F2 C0 04              1378 	push	ar4
   03F4 C0 06              1379 	push	ar6
   03F6 C0 07              1380 	push	ar7
   03F8 12s00r00           1381 	lcall	_sprintf
   03FB E5 81              1382 	mov	a,sp
   03FD 24 EF              1383 	add	a,#0xef
   03FF F5 81              1384 	mov	sp,a
                           1385 ;	eeprom_mark.c:263: for(n=0;n<32;n++) err[n+2] = EEWrite(0x0400+n,0x00);
   0401 7E 00              1386 	mov	r6,#0x00
   0403 7F 00              1387 	mov	r7,#0x00
   0405                    1388 00105$:
   0405 C3                 1389 	clr	c
   0406 EE                 1390 	mov	a,r6
   0407 94 20              1391 	subb	a,#0x20
   0409 EF                 1392 	mov	a,r7
   040A 64 80              1393 	xrl	a,#0x80
   040C 94 80              1394 	subb	a,#0x80
   040E 50 3E              1395 	jnc	00108$
   0410 74 02              1396 	mov	a,#0x02
   0412 2E                 1397 	add	a,r6
   0413 FC                 1398 	mov	r4,a
   0414 E4                 1399 	clr	a
   0415 3F                 1400 	addc	a,r7
   0416 FD                 1401 	mov	r5,a
   0417 EC                 1402 	mov	a,r4
   0418 25*03              1403 	add	a,_err
   041A FC                 1404 	mov	r4,a
   041B ED                 1405 	mov	a,r5
   041C 35*04              1406 	addc	a,(_err + 1)
   041E FD                 1407 	mov	r5,a
   041F 8E 02              1408 	mov	ar2,r6
   0421 74 04              1409 	mov	a,#0x04
   0423 2F                 1410 	add	a,r7
   0424 FB                 1411 	mov	r3,a
   0425 8A 82              1412 	mov	dpl,r2
   0427 8B 83              1413 	mov	dph,r3
   0429 75*00 00           1414 	mov	_EEWrite_PARM_2,#0x00
   042C C0 07              1415 	push	ar7
   042E C0 06              1416 	push	ar6
   0430 C0 05              1417 	push	ar5
   0432 C0 04              1418 	push	ar4
   0434 12s00r95           1419 	lcall	_EEWrite
   0437 AB 82              1420 	mov	r3,dpl
   0439 D0 04              1421 	pop	ar4
   043B D0 05              1422 	pop	ar5
   043D D0 06              1423 	pop	ar6
   043F D0 07              1424 	pop	ar7
   0441 8C 82              1425 	mov	dpl,r4
   0443 8D 83              1426 	mov	dph,r5
   0445 EB                 1427 	mov	a,r3
   0446 F0                 1428 	movx	@dptr,a
   0447 0E                 1429 	inc	r6
   0448 BE 00 BA           1430 	cjne	r6,#0x00,00105$
   044B 0F                 1431 	inc	r7
   044C 80 B7              1432 	sjmp	00105$
   044E                    1433 00108$:
                           1434 ;	eeprom_mark.c:264: for(n=0;n<32;n++) err[n+2] = EEWrite(0x0400+n,HWmark[n]);
   044E 7E 00              1435 	mov	r6,#0x00
   0450 7F 00              1436 	mov	r7,#0x00
   0452                    1437 00109$:
   0452 C3                 1438 	clr	c
   0453 EE                 1439 	mov	a,r6
   0454 94 20              1440 	subb	a,#0x20
   0456 EF                 1441 	mov	a,r7
   0457 64 80              1442 	xrl	a,#0x80
   0459 94 80              1443 	subb	a,#0x80
   045B 50 48              1444 	jnc	00112$
   045D 74 02              1445 	mov	a,#0x02
   045F 2E                 1446 	add	a,r6
   0460 FC                 1447 	mov	r4,a
   0461 E4                 1448 	clr	a
   0462 3F                 1449 	addc	a,r7
   0463 FD                 1450 	mov	r5,a
   0464 EC                 1451 	mov	a,r4
   0465 25*03              1452 	add	a,_err
   0467 FC                 1453 	mov	r4,a
   0468 ED                 1454 	mov	a,r5
   0469 35*04              1455 	addc	a,(_err + 1)
   046B FD                 1456 	mov	r5,a
   046C 8E 02              1457 	mov	ar2,r6
   046E 74 04              1458 	mov	a,#0x04
   0470 2F                 1459 	add	a,r7
   0471 FB                 1460 	mov	r3,a
   0472 EE                 1461 	mov	a,r6
   0473 25*0B              1462 	add	a,_HWmark
   0475 F5 82              1463 	mov	dpl,a
   0477 EF                 1464 	mov	a,r7
   0478 35*0C              1465 	addc	a,(_HWmark + 1)
   047A F5 83              1466 	mov	dph,a
   047C E0                 1467 	movx	a,@dptr
   047D F5*00              1468 	mov	_EEWrite_PARM_2,a
   047F 8A 82              1469 	mov	dpl,r2
   0481 8B 83              1470 	mov	dph,r3
   0483 C0 07              1471 	push	ar7
   0485 C0 06              1472 	push	ar6
   0487 C0 05              1473 	push	ar5
   0489 C0 04              1474 	push	ar4
   048B 12s00r95           1475 	lcall	_EEWrite
   048E AB 82              1476 	mov	r3,dpl
   0490 D0 04              1477 	pop	ar4
   0492 D0 05              1478 	pop	ar5
   0494 D0 06              1479 	pop	ar6
   0496 D0 07              1480 	pop	ar7
   0498 8C 82              1481 	mov	dpl,r4
   049A 8D 83              1482 	mov	dph,r5
   049C EB                 1483 	mov	a,r3
   049D F0                 1484 	movx	@dptr,a
   049E 0E                 1485 	inc	r6
   049F BE 00 B0           1486 	cjne	r6,#0x00,00109$
   04A2 0F                 1487 	inc	r7
   04A3 80 AD              1488 	sjmp	00109$
   04A5                    1489 00112$:
                           1490 ;	eeprom_mark.c:266: return(0);
   04A5 75 82 00           1491 	mov	dpl,#0x00
   04A8 22                 1492 	ret
                           1493 ;------------------------------------------------------------
                           1494 ;Allocation info for local variables in function 'main'
                           1495 ;------------------------------------------------------------
                           1496 ;n                         Allocated to registers r6 r7 
                           1497 ;eeprom_mark_adr           Allocated to registers 
                           1498 ;adr                       Allocated to registers 
                           1499 ;mark                      Allocated with name '_main_mark_1_1'
                           1500 ;------------------------------------------------------------
                           1501 ;	eeprom_mark.c:269: void main(void)
                           1502 ;	-----------------------------------------
                           1503 ;	 function main
                           1504 ;	-----------------------------------------
   04A9                    1505 _main:
                           1506 ;	eeprom_mark.c:276: err = (xdata unsigned char *) 0x1200;	
   04A9 75*03 00           1507 	mov	_err,#0x00
   04AC 75*04 12           1508 	mov	(_err + 1),#0x12
                           1509 ;	eeprom_mark.c:287: strcpy(mark.type,"TEST");
   04AF 75*00r19           1510 	mov	_strcpy_PARM_2,#__str_1
   04B2 75*01s00           1511 	mov	(_strcpy_PARM_2 + 1),#(__str_1 >> 8)
   04B5 75*02 80           1512 	mov	(_strcpy_PARM_2 + 2),#0x80
   04B8 90s00r14           1513 	mov	dptr,#_main_mark_1_1
   04BB 75 F0 40           1514 	mov	b,#0x40
   04BE 12s00r00           1515 	lcall	_strcpy
                           1516 ;	eeprom_mark.c:288: strcpy(mark.type,"ADC_");
   04C1 75*00r1E           1517 	mov	_strcpy_PARM_2,#__str_2
   04C4 75*01s00           1518 	mov	(_strcpy_PARM_2 + 1),#(__str_2 >> 8)
   04C7 75*02 80           1519 	mov	(_strcpy_PARM_2 + 2),#0x80
   04CA 90s00r14           1520 	mov	dptr,#_main_mark_1_1
   04CD 75 F0 40           1521 	mov	b,#0x40
   04D0 12s00r00           1522 	lcall	_strcpy
                           1523 ;	eeprom_mark.c:290: mark.major_version = 0x0;
   04D3 E4                 1524 	clr	a
   04D4 F5*1C              1525 	mov	((_main_mark_1_1 + 0x0008) + 0),a
   04D6 F5*1D              1526 	mov	((_main_mark_1_1 + 0x0008) + 1),a
                           1527 ;	eeprom_mark.c:291: mark.minor_version = 0x1;
   04D8 75*1E 01           1528 	mov	((_main_mark_1_1 + 0x000a) + 0),#0x01
                           1529 ;	eeprom_mark.c:293: mark.serial_no_high = 0x0;
   04DB E4                 1530 	clr	a
   04DC F5*1F              1531 	mov	((_main_mark_1_1 + 0x000a) + 1),a
   04DE F5*20              1532 	mov	((_main_mark_1_1 + 0x000c) + 0),a
   04E0 F5*21              1533 	mov	((_main_mark_1_1 + 0x000c) + 1),a
                           1534 ;	eeprom_mark.c:294: mark.serial_no_low  = 0x1;
   04E2 75*22 01           1535 	mov	((_main_mark_1_1 + 0x000e) + 0),#0x01
   04E5 75*23 00           1536 	mov	((_main_mark_1_1 + 0x000e) + 1),#0x00
                           1537 ;	eeprom_mark.c:298: for(n = 0;n < 200;n++);
   04E8 7E C8              1538 	mov	r6,#0xC8
   04EA 7F 00              1539 	mov	r7,#0x00
   04EC                    1540 00103$:
   04EC 1E                 1541 	dec	r6
   04ED BE FF 01           1542 	cjne	r6,#0xFF,00120$
   04F0 1F                 1543 	dec	r7
   04F1                    1544 00120$:
   04F1 EE                 1545 	mov	a,r6
   04F2 4F                 1546 	orl	a,r7
   04F3 70 F7              1547 	jnz	00103$
                           1548 ;	eeprom_mark.c:299: readmarkeeprom();
   04F5 12s02rD7           1549 	lcall	_readmarkeeprom
                           1550 ;	eeprom_mark.c:300: for(n=0;n<32;n++) dat[n] = (xdata char)HWmark[n];
   04F8 7E 00              1551 	mov	r6,#0x00
   04FA 7F 00              1552 	mov	r7,#0x00
   04FC                    1553 00104$:
   04FC C3                 1554 	clr	c
   04FD EE                 1555 	mov	a,r6
   04FE 94 20              1556 	subb	a,#0x20
   0500 EF                 1557 	mov	a,r7
   0501 64 80              1558 	xrl	a,#0x80
   0503 94 80              1559 	subb	a,#0x80
   0505 50 20              1560 	jnc	00107$
   0507 EE                 1561 	mov	a,r6
   0508 25*05              1562 	add	a,_dat
   050A FC                 1563 	mov	r4,a
   050B EF                 1564 	mov	a,r7
   050C 35*06              1565 	addc	a,(_dat + 1)
   050E FD                 1566 	mov	r5,a
   050F EE                 1567 	mov	a,r6
   0510 25*0B              1568 	add	a,_HWmark
   0512 F5 82              1569 	mov	dpl,a
   0514 EF                 1570 	mov	a,r7
   0515 35*0C              1571 	addc	a,(_HWmark + 1)
   0517 F5 83              1572 	mov	dph,a
   0519 E0                 1573 	movx	a,@dptr
   051A FB                 1574 	mov	r3,a
   051B 8C 82              1575 	mov	dpl,r4
   051D 8D 83              1576 	mov	dph,r5
   051F F0                 1577 	movx	@dptr,a
   0520 0E                 1578 	inc	r6
   0521 BE 00 D8           1579 	cjne	r6,#0x00,00104$
   0524 0F                 1580 	inc	r7
   0525 80 D5              1581 	sjmp	00104$
   0527                    1582 00107$:
                           1583 ;	eeprom_mark.c:302: hostreadmarkep1init();
   0527 12s05r2F           1584 	lcall	_hostreadmarkep1init
   052A                    1585 00109$:
                           1586 ;	eeprom_mark.c:303: for(;;) hostreadmarkep1poll();	
   052A 12s05r46           1587 	lcall	_hostreadmarkep1poll
   052D 80 FB              1588 	sjmp	00109$
                           1589 ;------------------------------------------------------------
                           1590 ;Allocation info for local variables in function 'hostreadmarkep1init'
                           1591 ;------------------------------------------------------------
                           1592 ;	eeprom_mark.c:308: static uint8 hostreadmarkep1init(void) {
                           1593 ;	-----------------------------------------
                           1594 ;	 function hostreadmarkep1init
                           1595 ;	-----------------------------------------
   052F                    1596 _hostreadmarkep1init:
                           1597 ;	eeprom_mark.c:310: EP1OUTCFG=0xa0;
   052F 90 E6 10           1598 	mov	dptr,#_EP1OUTCFG
   0532 74 A0              1599 	mov	a,#0xA0
   0534 F0                 1600 	movx	@dptr,a
                           1601 ;	eeprom_mark.c:311: EP1INCFG=0xa0;
   0535 90 E6 11           1602 	mov	dptr,#_EP1INCFG
   0538 74 A0              1603 	mov	a,#0xA0
   053A F0                 1604 	movx	@dptr,a
                           1605 ;	eeprom_mark.c:313: SYNCDELAY;
   053B 00                 1606 	 nop; 
                           1607 ;	eeprom_mark.c:314: EP1OUTBC=0xff; // Arm endpoint 1 for OUT (host->device) transfers
   053C 90 E6 8D           1608 	mov	dptr,#_EP1OUTBC
   053F 74 FF              1609 	mov	a,#0xFF
   0541 F0                 1610 	movx	@dptr,a
                           1611 ;	eeprom_mark.c:316: return(0);
   0542 75 82 00           1612 	mov	dpl,#0x00
   0545 22                 1613 	ret
                           1614 ;------------------------------------------------------------
                           1615 ;Allocation info for local variables in function 'hostreadmarkep1poll'
                           1616 ;------------------------------------------------------------
                           1617 ;src                       Allocated to registers 
                           1618 ;dest                      Allocated to registers r5 r6 
                           1619 ;ep1outbc                  Allocated with name '_hostreadmarkep1poll_ep1outbc_1_1'
                           1620 ;n                         Allocated with name '_hostreadmarkep1poll_n_1_1'
                           1621 ;------------------------------------------------------------
                           1622 ;	eeprom_mark.c:319: static uint8 hostreadmarkep1poll(void) {
                           1623 ;	-----------------------------------------
                           1624 ;	 function hostreadmarkep1poll
                           1625 ;	-----------------------------------------
   0546                    1626 _hostreadmarkep1poll:
                           1627 ;	eeprom_mark.c:325: if(!(EP1OUTCS & bmEPBUSY)) {
   0546 90 E6 A1           1628 	mov	dptr,#_EP1OUTCS
   0549 E0                 1629 	movx	a,@dptr
   054A FF                 1630 	mov	r7,a
   054B 30 E1 03           1631 	jnb	acc.1,00153$
   054E 02s06rDF           1632 	ljmp	00114$
   0551                    1633 00153$:
                           1634 ;	eeprom_mark.c:326: ep1outbc = EP1OUTBC;
   0551 90 E6 8D           1635 	mov	dptr,#_EP1OUTBC
   0554 E0                 1636 	movx	a,@dptr
   0555 F5*24              1637 	mov	_hostreadmarkep1poll_ep1outbc_1_1,a
                           1638 ;	eeprom_mark.c:327: if(ep1outbc != 0xff ) {
   0557 74 FF              1639 	mov	a,#0xFF
   0559 B5*24 03           1640 	cjne	a,_hostreadmarkep1poll_ep1outbc_1_1,00154$
   055C 02s06rDF           1641 	ljmp	00114$
   055F                    1642 00154$:
                           1643 ;	eeprom_mark.c:328: src = EP1OUTBUF;
                           1644 ;	eeprom_mark.c:329: dest = EP1INBUF;
   055F 7D C0              1645 	mov	r5,#_EP1INBUF
   0561 7E E7              1646 	mov	r6,#(_EP1INBUF >> 8)
                           1647 ;	eeprom_mark.c:330: while (EP1INCS & 0x02);
   0563                    1648 00101$:
   0563 90 E6 A2           1649 	mov	dptr,#_EP1INCS
   0566 E0                 1650 	movx	a,@dptr
   0567 FC                 1651 	mov	r4,a
   0568 20 E1 F8           1652 	jb	acc.1,00101$
                           1653 ;	eeprom_mark.c:331: for(n=0; n<32; n++) command[n] = src[n];
   056B 7B 00              1654 	mov	r3,#0x00
   056D 7C 00              1655 	mov	r4,#0x00
   056F                    1656 00115$:
   056F C3                 1657 	clr	c
   0570 EB                 1658 	mov	a,r3
   0571 94 20              1659 	subb	a,#0x20
   0573 EC                 1660 	mov	a,r4
   0574 64 80              1661 	xrl	a,#0x80
   0576 94 80              1662 	subb	a,#0x80
   0578 50 20              1663 	jnc	00118$
   057A EB                 1664 	mov	a,r3
   057B 25*09              1665 	add	a,_command
   057D F9                 1666 	mov	r1,a
   057E EC                 1667 	mov	a,r4
   057F 35*0A              1668 	addc	a,(_command + 1)
   0581 FA                 1669 	mov	r2,a
   0582 EB                 1670 	mov	a,r3
   0583 24 80              1671 	add	a,#_EP1OUTBUF
   0585 F5 82              1672 	mov	dpl,a
   0587 EC                 1673 	mov	a,r4
   0588 34 E7              1674 	addc	a,#(_EP1OUTBUF >> 8)
   058A F5 83              1675 	mov	dph,a
   058C E0                 1676 	movx	a,@dptr
   058D F8                 1677 	mov	r0,a
   058E 89 82              1678 	mov	dpl,r1
   0590 8A 83              1679 	mov	dph,r2
   0592 F0                 1680 	movx	@dptr,a
   0593 0B                 1681 	inc	r3
   0594 BB 00 D8           1682 	cjne	r3,#0x00,00115$
   0597 0C                 1683 	inc	r4
   0598 80 D5              1684 	sjmp	00115$
   059A                    1685 00118$:
                           1686 ;	eeprom_mark.c:332: for( n=0; n < ep1outbc ; n++ ) { 
   059A 8D 03              1687 	mov	ar3,r5
   059C 8E 04              1688 	mov	ar4,r6
   059E 79 00              1689 	mov	r1,#0x00
   05A0 7A 00              1690 	mov	r2,#0x00
   05A2                    1691 00119$:
   05A2 A8*24              1692 	mov	r0,_hostreadmarkep1poll_ep1outbc_1_1
   05A4 7F 00              1693 	mov	r7,#0x00
   05A6 C3                 1694 	clr	c
   05A7 E9                 1695 	mov	a,r1
   05A8 98                 1696 	subb	a,r0
   05A9 EA                 1697 	mov	a,r2
   05AA 64 80              1698 	xrl	a,#0x80
   05AC 8F F0              1699 	mov	b,r7
   05AE 63 F0 80           1700 	xrl	b,#0x80
   05B1 95 F0              1701 	subb	a,b
   05B3 50 1D              1702 	jnc	00122$
                           1703 ;	eeprom_mark.c:333: *dest++ = command[n];
   05B5 E9                 1704 	mov	a,r1
   05B6 25*09              1705 	add	a,_command
   05B8 F5 82              1706 	mov	dpl,a
   05BA EA                 1707 	mov	a,r2
   05BB 35*0A              1708 	addc	a,(_command + 1)
   05BD F5 83              1709 	mov	dph,a
   05BF E0                 1710 	movx	a,@dptr
   05C0 FF                 1711 	mov	r7,a
   05C1 8B 82              1712 	mov	dpl,r3
   05C3 8C 83              1713 	mov	dph,r4
   05C5 F0                 1714 	movx	@dptr,a
   05C6 A3                 1715 	inc	dptr
   05C7 AB 82              1716 	mov	r3,dpl
   05C9 AC 83              1717 	mov	r4,dph
                           1718 ;	eeprom_mark.c:332: for( n=0; n < ep1outbc ; n++ ) { 
   05CB 09                 1719 	inc	r1
   05CC B9 00 D3           1720 	cjne	r1,#0x00,00119$
   05CF 0A                 1721 	inc	r2
   05D0 80 D0              1722 	sjmp	00119$
   05D2                    1723 00122$:
                           1724 ;	eeprom_mark.c:335: *err++ = 0x5a;
   05D2 85*03 82           1725 	mov	dpl,_err
   05D5 85*04 83           1726 	mov	dph,(_err + 1)
   05D8 74 5A              1727 	mov	a,#0x5A
   05DA F0                 1728 	movx	@dptr,a
   05DB 05*03              1729 	inc	_err
   05DD E4                 1730 	clr	a
   05DE B5*03 02           1731 	cjne	a,_err,00160$
   05E1 05*04              1732 	inc	(_err + 1)
   05E3                    1733 00160$:
                           1734 ;	eeprom_mark.c:336: EP1INBC = ep1outbc;
   05E3 90 E6 8F           1735 	mov	dptr,#_EP1INBC
   05E6 E5*24              1736 	mov	a,_hostreadmarkep1poll_ep1outbc_1_1
   05E8 F0                 1737 	movx	@dptr,a
                           1738 ;	eeprom_mark.c:337: while (EP1INCS & 0x02);
   05E9                    1739 00104$:
   05E9 90 E6 A2           1740 	mov	dptr,#_EP1INCS
   05EC E0                 1741 	movx	a,@dptr
   05ED FF                 1742 	mov	r7,a
   05EE 20 E1 F8           1743 	jb	acc.1,00104$
                           1744 ;	eeprom_mark.c:338: dest = EP1INBUF;
   05F1 7D C0              1745 	mov	r5,#_EP1INBUF
   05F3 7E E7              1746 	mov	r6,#(_EP1INBUF >> 8)
                           1747 ;	eeprom_mark.c:339: if(!strncmp(command,"getHW",5)) {
   05F5 AB*09              1748 	mov	r3,_command
   05F7 AC*0A              1749 	mov	r4,(_command + 1)
   05F9 7F 00              1750 	mov	r7,#0x00
   05FB 75*00r23           1751 	mov	_strncmp_PARM_2,#__str_3
   05FE 75*01s00           1752 	mov	(_strncmp_PARM_2 + 1),#(__str_3 >> 8)
   0601 75*02 80           1753 	mov	(_strncmp_PARM_2 + 2),#0x80
   0604 75*00 05           1754 	mov	_strncmp_PARM_3,#0x05
   0607 75*01 00           1755 	mov	(_strncmp_PARM_3 + 1),#0x00
   060A 8B 82              1756 	mov	dpl,r3
   060C 8C 83              1757 	mov	dph,r4
   060E 8F F0              1758 	mov	b,r7
   0610 C0 06              1759 	push	ar6
   0612 C0 05              1760 	push	ar5
   0614 12s00r00           1761 	lcall	_strncmp
   0617 E5 82              1762 	mov	a,dpl
   0619 85 83 F0           1763 	mov	b,dph
   061C D0 05              1764 	pop	ar5
   061E D0 06              1765 	pop	ar6
   0620 45 F0              1766 	orl	a,b
                           1767 ;	eeprom_mark.c:340: for( n=0; HWmark[n] != '\0' ; n++ )  
   0622 70 40              1768 	jnz	00108$
   0624 8D 04              1769 	mov	ar4,r5
   0626 8E 07              1770 	mov	ar7,r6
   0628 FA                 1771 	mov	r2,a
   0629 FB                 1772 	mov	r3,a
   062A                    1773 00123$:
   062A EA                 1774 	mov	a,r2
   062B 25*0B              1775 	add	a,_HWmark
   062D F5 82              1776 	mov	dpl,a
   062F EB                 1777 	mov	a,r3
   0630 35*0C              1778 	addc	a,(_HWmark + 1)
   0632 F5 83              1779 	mov	dph,a
   0634 E0                 1780 	movx	a,@dptr
   0635 F9                 1781 	mov	r1,a
   0636 60 12              1782 	jz	00126$
                           1783 ;	eeprom_mark.c:341: *dest++ = (xdata unsigned char) HWmark[n];					
   0638 8C 82              1784 	mov	dpl,r4
   063A 8F 83              1785 	mov	dph,r7
   063C E9                 1786 	mov	a,r1
   063D F0                 1787 	movx	@dptr,a
   063E A3                 1788 	inc	dptr
   063F AC 82              1789 	mov	r4,dpl
   0641 AF 83              1790 	mov	r7,dph
                           1791 ;	eeprom_mark.c:340: for( n=0; HWmark[n] != '\0' ; n++ )  
   0643 0A                 1792 	inc	r2
   0644 BA 00 E3           1793 	cjne	r2,#0x00,00123$
   0647 0B                 1794 	inc	r3
   0648 80 E0              1795 	sjmp	00123$
   064A                    1796 00126$:
                           1797 ;	eeprom_mark.c:342: *dest++ = '\0';
   064A 8C 82              1798 	mov	dpl,r4
   064C 8F 83              1799 	mov	dph,r7
   064E E4                 1800 	clr	a
   064F F0                 1801 	movx	@dptr,a
   0650 74 01              1802 	mov	a,#0x01
   0652 2C                 1803 	add	a,r4
   0653 FD                 1804 	mov	r5,a
   0654 E4                 1805 	clr	a
   0655 3F                 1806 	addc	a,r7
   0656 FE                 1807 	mov	r6,a
                           1808 ;	eeprom_mark.c:343: n++;
   0657 74 01              1809 	mov	a,#0x01
   0659 2A                 1810 	add	a,r2
   065A FC                 1811 	mov	r4,a
   065B E4                 1812 	clr	a
   065C 3B                 1813 	addc	a,r3
   065D FF                 1814 	mov	r7,a
                           1815 ;	eeprom_mark.c:344: EP1INBC = n;
   065E 90 E6 8F           1816 	mov	dptr,#_EP1INBC
   0661 EC                 1817 	mov	a,r4
   0662 F0                 1818 	movx	@dptr,a
                           1819 ;	eeprom_mark.c:345: SYNCDELAY;
   0663 00                 1820 	 nop; 
   0664                    1821 00108$:
                           1822 ;	eeprom_mark.c:347: if(!strncmp(command,"getFW",5)) {
   0664 A9*09              1823 	mov	r1,_command
   0666 AA*0A              1824 	mov	r2,(_command + 1)
   0668 7B 00              1825 	mov	r3,#0x00
   066A 75*00r29           1826 	mov	_strncmp_PARM_2,#__str_4
   066D 75*01s00           1827 	mov	(_strncmp_PARM_2 + 1),#(__str_4 >> 8)
   0670 75*02 80           1828 	mov	(_strncmp_PARM_2 + 2),#0x80
   0673 75*00 05           1829 	mov	_strncmp_PARM_3,#0x05
   0676 75*01 00           1830 	mov	(_strncmp_PARM_3 + 1),#0x00
   0679 89 82              1831 	mov	dpl,r1
   067B 8A 83              1832 	mov	dph,r2
   067D 8B F0              1833 	mov	b,r3
   067F C0 06              1834 	push	ar6
   0681 C0 05              1835 	push	ar5
   0683 12s00r00           1836 	lcall	_strncmp
   0686 E5 82              1837 	mov	a,dpl
   0688 85 83 F0           1838 	mov	b,dph
   068B D0 05              1839 	pop	ar5
   068D D0 06              1840 	pop	ar6
   068F 45 F0              1841 	orl	a,b
                           1842 ;	eeprom_mark.c:348: for( n=0; FWmark[n] != '\0' ; n++ )  
   0691 70 46              1843 	jnz	00110$
   0693 F5*25              1844 	mov	_hostreadmarkep1poll_n_1_1,a
   0695 F5*26              1845 	mov	(_hostreadmarkep1poll_n_1_1 + 1),a
   0697                    1846 00127$:
   0697 E5*25              1847 	mov	a,_hostreadmarkep1poll_n_1_1
   0699 25*00              1848 	add	a,_FWmark
   069B F8                 1849 	mov	r0,a
   069C E5*26              1850 	mov	a,(_hostreadmarkep1poll_n_1_1 + 1)
   069E 35*01              1851 	addc	a,(_FWmark + 1)
   06A0 F9                 1852 	mov	r1,a
   06A1 AB*02              1853 	mov	r3,(_FWmark + 2)
   06A3 88 82              1854 	mov	dpl,r0
   06A5 89 83              1855 	mov	dph,r1
   06A7 8B F0              1856 	mov	b,r3
   06A9 12s00r00           1857 	lcall	__gptrget
   06AC FB                 1858 	mov	r3,a
   06AD 60 15              1859 	jz	00130$
                           1860 ;	eeprom_mark.c:349: *dest++ = (xdata unsigned char) FWmark[n];					
   06AF 8D 82              1861 	mov	dpl,r5
   06B1 8E 83              1862 	mov	dph,r6
   06B3 EB                 1863 	mov	a,r3
   06B4 F0                 1864 	movx	@dptr,a
   06B5 A3                 1865 	inc	dptr
   06B6 AD 82              1866 	mov	r5,dpl
   06B8 AE 83              1867 	mov	r6,dph
                           1868 ;	eeprom_mark.c:348: for( n=0; FWmark[n] != '\0' ; n++ )  
   06BA 05*25              1869 	inc	_hostreadmarkep1poll_n_1_1
   06BC E4                 1870 	clr	a
   06BD B5*25 D7           1871 	cjne	a,_hostreadmarkep1poll_n_1_1,00127$
   06C0 05*26              1872 	inc	(_hostreadmarkep1poll_n_1_1 + 1)
   06C2 80 D3              1873 	sjmp	00127$
   06C4                    1874 00130$:
                           1875 ;	eeprom_mark.c:350: *dest++ = '\0';
   06C4 8D 82              1876 	mov	dpl,r5
   06C6 8E 83              1877 	mov	dph,r6
   06C8 E4                 1878 	clr	a
   06C9 F0                 1879 	movx	@dptr,a
                           1880 ;	eeprom_mark.c:351: n++;
   06CA 74 01              1881 	mov	a,#0x01
   06CC 25*25              1882 	add	a,_hostreadmarkep1poll_n_1_1
   06CE FC                 1883 	mov	r4,a
   06CF E4                 1884 	clr	a
   06D0 35*26              1885 	addc	a,(_hostreadmarkep1poll_n_1_1 + 1)
   06D2 FF                 1886 	mov	r7,a
                           1887 ;	eeprom_mark.c:352: EP1INBC = n;
   06D3 90 E6 8F           1888 	mov	dptr,#_EP1INBC
   06D6 EC                 1889 	mov	a,r4
   06D7 F0                 1890 	movx	@dptr,a
                           1891 ;	eeprom_mark.c:353: SYNCDELAY;
   06D8 00                 1892 	 nop; 
   06D9                    1893 00110$:
                           1894 ;	eeprom_mark.c:355: EP1OUTBC = 0xff;
   06D9 90 E6 8D           1895 	mov	dptr,#_EP1OUTBC
   06DC 74 FF              1896 	mov	a,#0xFF
   06DE F0                 1897 	movx	@dptr,a
   06DF                    1898 00114$:
                           1899 ;	eeprom_mark.c:358: return(0);
   06DF 75 82 00           1900 	mov	dpl,#0x00
   06E2 22                 1901 	ret
                           1902 	.area CSEG    (CODE)
                           1903 	.area CONST   (CODE)
   0000                    1904 __str_0:
   0000 48 57 25 73 76 25  1905 	.ascii "HW%sv%03x.%03xs%04x.%04x"
        30 33 78 2E 25 30
        33 78 73 25 30 34
        78 2E 25 30 34 78
   0018 00                 1906 	.db 0x00
   0019                    1907 __str_1:
   0019 54 45 53 54        1908 	.ascii "TEST"
   001D 00                 1909 	.db 0x00
   001E                    1910 __str_2:
   001E 41 44 43 5F        1911 	.ascii "ADC_"
   0022 00                 1912 	.db 0x00
   0023                    1913 __str_3:
   0023 67 65 74 48 57     1914 	.ascii "getHW"
   0028 00                 1915 	.db 0x00
   0029                    1916 __str_4:
   0029 67 65 74 46 57     1917 	.ascii "getFW"
   002E 00                 1918 	.db 0x00
   002F                    1919 __str_5:
   002F 46 57 45 45 50 52  1920 	.ascii "FWEEPRv000.001"
        76 30 30 30 2E 30
        30 31
   003D 00                 1921 	.db 0x00
                           1922 	.area XINIT   (CODE)
                           1923 	.area CABS    (ABS,CODE)
