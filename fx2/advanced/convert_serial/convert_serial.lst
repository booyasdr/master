                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.2.0 #8008 (Jul  6 2012) (MINGW32)
                              4 ; This file was generated Thu Apr 23 07:09:04 2015
                              5 ;--------------------------------------------------------
                              6 	.module convert_serial
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _EPCS_Offset_Lookup_Table
                             13 	.globl _main
                             14 	.globl _EIP
                             15 	.globl _B
                             16 	.globl _EIE
                             17 	.globl _ACC
                             18 	.globl _EICON
                             19 	.globl _PSW
                             20 	.globl _TH2
                             21 	.globl _TL2
                             22 	.globl _RCAP2H
                             23 	.globl _RCAP2L
                             24 	.globl _T2CON
                             25 	.globl _SBUF1
                             26 	.globl _SCON1
                             27 	.globl _GPIFSGLDATLNOX
                             28 	.globl _GPIFSGLDATLX
                             29 	.globl _GPIFSGLDATH
                             30 	.globl _GPIFTRIG
                             31 	.globl _EP01STAT
                             32 	.globl _IP
                             33 	.globl _OEE
                             34 	.globl _OED
                             35 	.globl _OEC
                             36 	.globl _OEB
                             37 	.globl _OEA
                             38 	.globl _IOE
                             39 	.globl _IOD
                             40 	.globl _AUTOPTRSETUP
                             41 	.globl _EP68FIFOFLGS
                             42 	.globl _EP24FIFOFLGS
                             43 	.globl _EP2468STAT
                             44 	.globl _IE
                             45 	.globl _INT4CLR
                             46 	.globl _INT2CLR
                             47 	.globl _IOC
                             48 	.globl _AUTODAT2
                             49 	.globl _AUTOPTRL2
                             50 	.globl _AUTOPTRH2
                             51 	.globl _AUTODAT1
                             52 	.globl _APTR1L
                             53 	.globl _APTR1H
                             54 	.globl _SBU
                             55 	.globl _SCO
                             56 	.globl _MPA
                             57 	.globl _EXIF
                             58 	.globl _IOB
                             59 	.globl _SPC_
                             60 	.globl _CKCO
                             61 	.globl _TH1
                             62 	.globl _TH0
                             63 	.globl _TL1
                             64 	.globl _TL0
                             65 	.globl _TMOD
                             66 	.globl _TCON
                             67 	.globl _PCON
                             68 	.globl _DPS
                             69 	.globl _DPH1
                             70 	.globl _DPL1
                             71 	.globl _DPH
                             72 	.globl _DPL
                             73 	.globl _SP
                             74 	.globl _IOA
                             75 	.globl _myOutEndpntDscr
                             76 	.globl _myInEndpntDscr
                             77 	.globl _myIntrfcDscr
                             78 	.globl _myConfigDscr
                             79 	.globl _myDeviceQualDscr
                             80 	.globl _myDeviceDscr
                             81 	.globl _EP8FIFOBUF
                             82 	.globl _EP6FIFOBUF
                             83 	.globl _EP4FIFOBUF
                             84 	.globl _EP2FIFOBUF
                             85 	.globl _EP1INBUF
                             86 	.globl _EP1OUTBUF
                             87 	.globl _EP0BUF
                             88 	.globl _CT4
                             89 	.globl _CT3
                             90 	.globl _CT2
                             91 	.globl _CT1
                             92 	.globl _USBTEST
                             93 	.globl _TESTCFG
                             94 	.globl _DBUG
                             95 	.globl _UDMACRCQUAL
                             96 	.globl _UDMACRCL
                             97 	.globl _UDMACRCH
                             98 	.globl _GPIFHOLDAMOUNT
                             99 	.globl _FLOWSTBHPERIOD
                            100 	.globl _FLOWSTBEDGE
                            101 	.globl _FLOWSTB
                            102 	.globl _FLOWHOLDOFF
                            103 	.globl _FLOWEQ1CTL
                            104 	.globl _FLOWEQ0CTL
                            105 	.globl _FLOWLOGIC
                            106 	.globl _FLOWSTATE
                            107 	.globl _GPIFABORT
                            108 	.globl _GPIFREADYSTAT
                            109 	.globl _GPIFREADYCFG
                            110 	.globl _XGPIFSGLDATLNOX
                            111 	.globl _XGPIFSGLDATLX
                            112 	.globl _XGPIFSGLDATH
                            113 	.globl _EP8GPIFTRIG
                            114 	.globl _EP8GPIFPFSTOP
                            115 	.globl _EP8GPIFFLGSEL
                            116 	.globl _EP6GPIFTRIG
                            117 	.globl _EP6GPIFPFSTOP
                            118 	.globl _EP6GPIFFLGSEL
                            119 	.globl _EP4GPIFTRIG
                            120 	.globl _EP4GPIFPFSTOP
                            121 	.globl _EP4GPIFFLGSEL
                            122 	.globl _EP2GPIFTRIG
                            123 	.globl _EP2GPIFPFSTOP
                            124 	.globl _EP2GPIFFLGSEL
                            125 	.globl _GPIFTCB0
                            126 	.globl _GPIFTCB1
                            127 	.globl _GPIFTCB2
                            128 	.globl _GPIFTCB3
                            129 	.globl _GPIFADRL
                            130 	.globl _GPIFADRH
                            131 	.globl _GPIFCTLCFG
                            132 	.globl _GPIFIDLECTL
                            133 	.globl _GPIFIDLECS
                            134 	.globl _GPIFWFSELECT
                            135 	.globl _SETUPDAT
                            136 	.globl _SUDPTRCTL
                            137 	.globl _SUDPTRL
                            138 	.globl _SUDPTRH
                            139 	.globl _EP8FIFOBCL
                            140 	.globl _EP8FIFOBCH
                            141 	.globl _EP6FIFOBCL
                            142 	.globl _EP6FIFOBCH
                            143 	.globl _EP4FIFOBCL
                            144 	.globl _EP4FIFOBCH
                            145 	.globl _EP2FIFOBCL
                            146 	.globl _EP2FIFOBCH
                            147 	.globl _EP8FIFOFLGS
                            148 	.globl _EP6FIFOFLGS
                            149 	.globl _EP4FIFOFLGS
                            150 	.globl _EP2FIFOFLGS
                            151 	.globl _EP8CS
                            152 	.globl _EP6CS
                            153 	.globl _EP4CS
                            154 	.globl _EP2CS
                            155 	.globl _EP1INCS
                            156 	.globl _EP1OUTCS
                            157 	.globl _EP0CS
                            158 	.globl _EP8BCL
                            159 	.globl _EP8BCH
                            160 	.globl _EP6BCL
                            161 	.globl _EP6BCH
                            162 	.globl _EP4BCL
                            163 	.globl _EP4BCH
                            164 	.globl _EP2BCL
                            165 	.globl _EP2BCH
                            166 	.globl _EP1INBC
                            167 	.globl _EP1OUTBC
                            168 	.globl _EP0BCL
                            169 	.globl _EP0BCH
                            170 	.globl _FNADDR
                            171 	.globl _MICROFRAME
                            172 	.globl _USBFRAMEL
                            173 	.globl _USBFRAMEH
                            174 	.globl _TOGCTL
                            175 	.globl _WAKEUPCS
                            176 	.globl _SUSPEND
                            177 	.globl _USBCS
                            178 	.globl _XAUTODAT2
                            179 	.globl _XAUTODAT1
                            180 	.globl _I2CTL
                            181 	.globl _I2DAT
                            182 	.globl _I2CS
                            183 	.globl _PORTECFG
                            184 	.globl _PORTCCFG
                            185 	.globl _PORTACFG
                            186 	.globl _INTSETUP
                            187 	.globl _INT4IVEC
                            188 	.globl _INT2IVEC
                            189 	.globl _CLRERRCNT
                            190 	.globl _ERRCNTLIM
                            191 	.globl _USBERRIRQ
                            192 	.globl _USBERRIE
                            193 	.globl _GPIFIRQ
                            194 	.globl _GPIFIE
                            195 	.globl _EPIRQ
                            196 	.globl _EPIE
                            197 	.globl _USBIRQ
                            198 	.globl _USBIE
                            199 	.globl _NAKIRQ
                            200 	.globl _NAKIE
                            201 	.globl _IBNIRQ
                            202 	.globl _IBNIE
                            203 	.globl _EP8FIFOIRQ
                            204 	.globl _EP8FIFOIE
                            205 	.globl _EP6FIFOIRQ
                            206 	.globl _EP6FIFOIE
                            207 	.globl _EP4FIFOIRQ
                            208 	.globl _EP4FIFOIE
                            209 	.globl _EP2FIFOIRQ
                            210 	.globl _EP2FIFOIE
                            211 	.globl _OUTPKTEND
                            212 	.globl _INPKTEND
                            213 	.globl _EP8ISOINPKTS
                            214 	.globl _EP6ISOINPKTS
                            215 	.globl _EP4ISOINPKTS
                            216 	.globl _EP2ISOINPKTS
                            217 	.globl _EP8FIFOPFL
                            218 	.globl _EP8FIFOPFH
                            219 	.globl _EP6FIFOPFL
                            220 	.globl _EP6FIFOPFH
                            221 	.globl _EP4FIFOPFL
                            222 	.globl _EP4FIFOPFH
                            223 	.globl _EP2FIFOPFL
                            224 	.globl _EP2FIFOPFH
                            225 	.globl _EP8AUTOINLENL
                            226 	.globl _EP8AUTOINLENH
                            227 	.globl _EP6AUTOINLENL
                            228 	.globl _EP6AUTOINLENH
                            229 	.globl _EP4AUTOINLENL
                            230 	.globl _EP4AUTOINLENH
                            231 	.globl _EP2AUTOINLENL
                            232 	.globl _EP2AUTOINLENH
                            233 	.globl _EP8FIFOCFG
                            234 	.globl _EP6FIFOCFG
                            235 	.globl _EP4FIFOCFG
                            236 	.globl _EP2FIFOCFG
                            237 	.globl _EP8CFG
                            238 	.globl _EP6CFG
                            239 	.globl _EP4CFG
                            240 	.globl _EP2CFG
                            241 	.globl _EP1INCFG
                            242 	.globl _EP1OUTCFG
                            243 	.globl _REVCTL
                            244 	.globl _REVID
                            245 	.globl _FIFOPINPOLAR
                            246 	.globl _UART230
                            247 	.globl _BPADDRL
                            248 	.globl _BPADDRH
                            249 	.globl _BREAKPT
                            250 	.globl _FIFORESET
                            251 	.globl _PINFLAGSCD
                            252 	.globl _PINFLAGSAB
                            253 	.globl _IFCONFIG
                            254 	.globl _CPUCS
                            255 	.globl _RES_WAVEDATA_END
                            256 	.globl _GPIF_WAVE_DATA
                            257 	.globl _Selfpwr
                            258 	.globl _Rwuen
                            259 	.globl _Rwuen_allowed
                            260 	.globl _latency_us
                            261 	.globl _bytes_waiting_for_xmit
                            262 	.globl _USB_strings
                            263 	.globl _InterfaceSetting
                            264 	.globl _Configuration
                            265 ;--------------------------------------------------------
                            266 ; special function registers
                            267 ;--------------------------------------------------------
                            268 	.area RSEG    (ABS,DATA)
   0000                     269 	.org 0x0000
                    0080    270 _IOA	=	0x0080
                    0081    271 _SP	=	0x0081
                    0082    272 _DPL	=	0x0082
                    0083    273 _DPH	=	0x0083
                    0084    274 _DPL1	=	0x0084
                    0085    275 _DPH1	=	0x0085
                    0086    276 _DPS	=	0x0086
                    0087    277 _PCON	=	0x0087
                    0088    278 _TCON	=	0x0088
                    0089    279 _TMOD	=	0x0089
                    008A    280 _TL0	=	0x008a
                    008B    281 _TL1	=	0x008b
                    008C    282 _TH0	=	0x008c
                    008D    283 _TH1	=	0x008d
                    008E    284 _CKCO	=	0x008e
                    008F    285 _SPC_	=	0x008f
                    0090    286 _IOB	=	0x0090
                    0091    287 _EXIF	=	0x0091
                    0092    288 _MPA	=	0x0092
                    0098    289 _SCO	=	0x0098
                    0099    290 _SBU	=	0x0099
                    009A    291 _APTR1H	=	0x009a
                    009B    292 _APTR1L	=	0x009b
                    009C    293 _AUTODAT1	=	0x009c
                    009D    294 _AUTOPTRH2	=	0x009d
                    009E    295 _AUTOPTRL2	=	0x009e
                    009F    296 _AUTODAT2	=	0x009f
                    00A0    297 _IOC	=	0x00a0
                    00A1    298 _INT2CLR	=	0x00a1
                    00A2    299 _INT4CLR	=	0x00a2
                    00A8    300 _IE	=	0x00a8
                    00AA    301 _EP2468STAT	=	0x00aa
                    00AB    302 _EP24FIFOFLGS	=	0x00ab
                    00AC    303 _EP68FIFOFLGS	=	0x00ac
                    00AF    304 _AUTOPTRSETUP	=	0x00af
                    00B0    305 _IOD	=	0x00b0
                    00B1    306 _IOE	=	0x00b1
                    00B2    307 _OEA	=	0x00b2
                    00B3    308 _OEB	=	0x00b3
                    00B4    309 _OEC	=	0x00b4
                    00B5    310 _OED	=	0x00b5
                    00B6    311 _OEE	=	0x00b6
                    00B8    312 _IP	=	0x00b8
                    00BA    313 _EP01STAT	=	0x00ba
                    00BB    314 _GPIFTRIG	=	0x00bb
                    00BD    315 _GPIFSGLDATH	=	0x00bd
                    00BE    316 _GPIFSGLDATLX	=	0x00be
                    00BF    317 _GPIFSGLDATLNOX	=	0x00bf
                    00C0    318 _SCON1	=	0x00c0
                    00C1    319 _SBUF1	=	0x00c1
                    00C8    320 _T2CON	=	0x00c8
                    00CA    321 _RCAP2L	=	0x00ca
                    00CB    322 _RCAP2H	=	0x00cb
                    00CC    323 _TL2	=	0x00cc
                    00CD    324 _TH2	=	0x00cd
                    00D0    325 _PSW	=	0x00d0
                    00D8    326 _EICON	=	0x00d8
                    00E0    327 _ACC	=	0x00e0
                    00E8    328 _EIE	=	0x00e8
                    00F0    329 _B	=	0x00f0
                    00F8    330 _EIP	=	0x00f8
                            331 ;--------------------------------------------------------
                            332 ; special function bits
                            333 ;--------------------------------------------------------
                            334 	.area RSEG    (ABS,DATA)
   0000                     335 	.org 0x0000
                            336 ;--------------------------------------------------------
                            337 ; overlayable register banks
                            338 ;--------------------------------------------------------
                            339 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     340 	.ds 8
                            341 ;--------------------------------------------------------
                            342 ; overlayable bit register bank
                            343 ;--------------------------------------------------------
                            344 	.area BIT_BANK	(REL,OVR,DATA)
   0000                     345 bits:
   0000                     346 	.ds 1
                    8000    347 	b0 = bits[0]
                    8100    348 	b1 = bits[1]
                    8200    349 	b2 = bits[2]
                    8300    350 	b3 = bits[3]
                    8400    351 	b4 = bits[4]
                    8500    352 	b5 = bits[5]
                    8600    353 	b6 = bits[6]
                    8700    354 	b7 = bits[7]
                            355 ;--------------------------------------------------------
                            356 ; internal ram data
                            357 ;--------------------------------------------------------
                            358 	.area DSEG    (DATA)
   0000                     359 _Configuration::
   0000                     360 	.ds 1
   0001                     361 _InterfaceSetting::
   0001                     362 	.ds 1
   0002                     363 _USB_strings::
   0002                     364 	.ds 9
   000B                     365 _SetupCommand_i_1_21:
   000B                     366 	.ds 2
   000D                     367 _bytes_waiting_for_xmit::
   000D                     368 	.ds 2
   000F                     369 _latency_us::
   000F                     370 	.ds 2
                            371 ;--------------------------------------------------------
                            372 ; overlayable items in internal ram 
                            373 ;--------------------------------------------------------
                            374 	.area	OSEG    (OVR,DATA)
                            375 ;--------------------------------------------------------
                            376 ; Stack segment in internal ram 
                            377 ;--------------------------------------------------------
                            378 	.area	SSEG	(DATA)
   0000                     379 __start__stack:
   0000                     380 	.ds	1
                            381 
                            382 ;--------------------------------------------------------
                            383 ; indirectly addressable internal ram data
                            384 ;--------------------------------------------------------
                            385 	.area ISEG    (DATA)
                            386 ;--------------------------------------------------------
                            387 ; absolute internal ram data
                            388 ;--------------------------------------------------------
                            389 	.area IABS    (ABS,DATA)
                            390 	.area IABS    (ABS,DATA)
                            391 ;--------------------------------------------------------
                            392 ; bit data
                            393 ;--------------------------------------------------------
                            394 	.area BSEG    (BIT)
   0000                     395 _Rwuen_allowed::
   0000                     396 	.ds 1
   0001                     397 _Rwuen::
   0001                     398 	.ds 1
   0002                     399 _Selfpwr::
   0002                     400 	.ds 1
                            401 ;--------------------------------------------------------
                            402 ; paged external ram data
                            403 ;--------------------------------------------------------
                            404 	.area PSEG    (PAG,XDATA)
                            405 ;--------------------------------------------------------
                            406 ; external ram data
                            407 ;--------------------------------------------------------
                            408 	.area XSEG    (XDATA)
                    E400    409 _GPIF_WAVE_DATA	=	0xe400
                    E480    410 _RES_WAVEDATA_END	=	0xe480
                    E600    411 _CPUCS	=	0xe600
                    E601    412 _IFCONFIG	=	0xe601
                    E602    413 _PINFLAGSAB	=	0xe602
                    E603    414 _PINFLAGSCD	=	0xe603
                    E604    415 _FIFORESET	=	0xe604
                    E605    416 _BREAKPT	=	0xe605
                    E606    417 _BPADDRH	=	0xe606
                    E607    418 _BPADDRL	=	0xe607
                    E608    419 _UART230	=	0xe608
                    E609    420 _FIFOPINPOLAR	=	0xe609
                    E60A    421 _REVID	=	0xe60a
                    E60B    422 _REVCTL	=	0xe60b
                    E610    423 _EP1OUTCFG	=	0xe610
                    E611    424 _EP1INCFG	=	0xe611
                    E612    425 _EP2CFG	=	0xe612
                    E613    426 _EP4CFG	=	0xe613
                    E614    427 _EP6CFG	=	0xe614
                    E615    428 _EP8CFG	=	0xe615
                    E618    429 _EP2FIFOCFG	=	0xe618
                    E619    430 _EP4FIFOCFG	=	0xe619
                    E61A    431 _EP6FIFOCFG	=	0xe61a
                    E61B    432 _EP8FIFOCFG	=	0xe61b
                    E620    433 _EP2AUTOINLENH	=	0xe620
                    E621    434 _EP2AUTOINLENL	=	0xe621
                    E622    435 _EP4AUTOINLENH	=	0xe622
                    E623    436 _EP4AUTOINLENL	=	0xe623
                    E624    437 _EP6AUTOINLENH	=	0xe624
                    E625    438 _EP6AUTOINLENL	=	0xe625
                    E626    439 _EP8AUTOINLENH	=	0xe626
                    E627    440 _EP8AUTOINLENL	=	0xe627
                    E630    441 _EP2FIFOPFH	=	0xe630
                    E631    442 _EP2FIFOPFL	=	0xe631
                    E632    443 _EP4FIFOPFH	=	0xe632
                    E633    444 _EP4FIFOPFL	=	0xe633
                    E634    445 _EP6FIFOPFH	=	0xe634
                    E635    446 _EP6FIFOPFL	=	0xe635
                    E636    447 _EP8FIFOPFH	=	0xe636
                    E637    448 _EP8FIFOPFL	=	0xe637
                    E640    449 _EP2ISOINPKTS	=	0xe640
                    E641    450 _EP4ISOINPKTS	=	0xe641
                    E642    451 _EP6ISOINPKTS	=	0xe642
                    E643    452 _EP8ISOINPKTS	=	0xe643
                    E648    453 _INPKTEND	=	0xe648
                    E649    454 _OUTPKTEND	=	0xe649
                    E650    455 _EP2FIFOIE	=	0xe650
                    E651    456 _EP2FIFOIRQ	=	0xe651
                    E652    457 _EP4FIFOIE	=	0xe652
                    E653    458 _EP4FIFOIRQ	=	0xe653
                    E654    459 _EP6FIFOIE	=	0xe654
                    E655    460 _EP6FIFOIRQ	=	0xe655
                    E656    461 _EP8FIFOIE	=	0xe656
                    E657    462 _EP8FIFOIRQ	=	0xe657
                    E658    463 _IBNIE	=	0xe658
                    E659    464 _IBNIRQ	=	0xe659
                    E65A    465 _NAKIE	=	0xe65a
                    E65B    466 _NAKIRQ	=	0xe65b
                    E65C    467 _USBIE	=	0xe65c
                    E65D    468 _USBIRQ	=	0xe65d
                    E65E    469 _EPIE	=	0xe65e
                    E65F    470 _EPIRQ	=	0xe65f
                    E660    471 _GPIFIE	=	0xe660
                    E661    472 _GPIFIRQ	=	0xe661
                    E662    473 _USBERRIE	=	0xe662
                    E663    474 _USBERRIRQ	=	0xe663
                    E664    475 _ERRCNTLIM	=	0xe664
                    E665    476 _CLRERRCNT	=	0xe665
                    E666    477 _INT2IVEC	=	0xe666
                    E667    478 _INT4IVEC	=	0xe667
                    E668    479 _INTSETUP	=	0xe668
                    E670    480 _PORTACFG	=	0xe670
                    E671    481 _PORTCCFG	=	0xe671
                    E672    482 _PORTECFG	=	0xe672
                    E678    483 _I2CS	=	0xe678
                    E679    484 _I2DAT	=	0xe679
                    E67A    485 _I2CTL	=	0xe67a
                    E67B    486 _XAUTODAT1	=	0xe67b
                    E67C    487 _XAUTODAT2	=	0xe67c
                    E680    488 _USBCS	=	0xe680
                    E681    489 _SUSPEND	=	0xe681
                    E682    490 _WAKEUPCS	=	0xe682
                    E683    491 _TOGCTL	=	0xe683
                    E684    492 _USBFRAMEH	=	0xe684
                    E685    493 _USBFRAMEL	=	0xe685
                    E686    494 _MICROFRAME	=	0xe686
                    E687    495 _FNADDR	=	0xe687
                    E68A    496 _EP0BCH	=	0xe68a
                    E68B    497 _EP0BCL	=	0xe68b
                    E68D    498 _EP1OUTBC	=	0xe68d
                    E68F    499 _EP1INBC	=	0xe68f
                    E690    500 _EP2BCH	=	0xe690
                    E691    501 _EP2BCL	=	0xe691
                    E694    502 _EP4BCH	=	0xe694
                    E695    503 _EP4BCL	=	0xe695
                    E698    504 _EP6BCH	=	0xe698
                    E699    505 _EP6BCL	=	0xe699
                    E69C    506 _EP8BCH	=	0xe69c
                    E69D    507 _EP8BCL	=	0xe69d
                    E6A0    508 _EP0CS	=	0xe6a0
                    E6A1    509 _EP1OUTCS	=	0xe6a1
                    E6A2    510 _EP1INCS	=	0xe6a2
                    E6A3    511 _EP2CS	=	0xe6a3
                    E6A4    512 _EP4CS	=	0xe6a4
                    E6A5    513 _EP6CS	=	0xe6a5
                    E6A6    514 _EP8CS	=	0xe6a6
                    E6A7    515 _EP2FIFOFLGS	=	0xe6a7
                    E6A8    516 _EP4FIFOFLGS	=	0xe6a8
                    E6A9    517 _EP6FIFOFLGS	=	0xe6a9
                    E6AA    518 _EP8FIFOFLGS	=	0xe6aa
                    E6AB    519 _EP2FIFOBCH	=	0xe6ab
                    E6AC    520 _EP2FIFOBCL	=	0xe6ac
                    E6AD    521 _EP4FIFOBCH	=	0xe6ad
                    E6AE    522 _EP4FIFOBCL	=	0xe6ae
                    E6AF    523 _EP6FIFOBCH	=	0xe6af
                    E6B0    524 _EP6FIFOBCL	=	0xe6b0
                    E6B1    525 _EP8FIFOBCH	=	0xe6b1
                    E6B2    526 _EP8FIFOBCL	=	0xe6b2
                    E6B3    527 _SUDPTRH	=	0xe6b3
                    E6B4    528 _SUDPTRL	=	0xe6b4
                    E6B5    529 _SUDPTRCTL	=	0xe6b5
                    E6B8    530 _SETUPDAT	=	0xe6b8
                    E6C0    531 _GPIFWFSELECT	=	0xe6c0
                    E6C1    532 _GPIFIDLECS	=	0xe6c1
                    E6C2    533 _GPIFIDLECTL	=	0xe6c2
                    E6C3    534 _GPIFCTLCFG	=	0xe6c3
                    E6C4    535 _GPIFADRH	=	0xe6c4
                    E6C5    536 _GPIFADRL	=	0xe6c5
                    E6CE    537 _GPIFTCB3	=	0xe6ce
                    E6CF    538 _GPIFTCB2	=	0xe6cf
                    E6D0    539 _GPIFTCB1	=	0xe6d0
                    E6D1    540 _GPIFTCB0	=	0xe6d1
                    E6D2    541 _EP2GPIFFLGSEL	=	0xe6d2
                    E6D3    542 _EP2GPIFPFSTOP	=	0xe6d3
                    E6D4    543 _EP2GPIFTRIG	=	0xe6d4
                    E6DA    544 _EP4GPIFFLGSEL	=	0xe6da
                    E6DB    545 _EP4GPIFPFSTOP	=	0xe6db
                    E6DC    546 _EP4GPIFTRIG	=	0xe6dc
                    E6E2    547 _EP6GPIFFLGSEL	=	0xe6e2
                    E6E3    548 _EP6GPIFPFSTOP	=	0xe6e3
                    E6E4    549 _EP6GPIFTRIG	=	0xe6e4
                    E6EA    550 _EP8GPIFFLGSEL	=	0xe6ea
                    E6EB    551 _EP8GPIFPFSTOP	=	0xe6eb
                    E6EC    552 _EP8GPIFTRIG	=	0xe6ec
                    E6F0    553 _XGPIFSGLDATH	=	0xe6f0
                    E6F1    554 _XGPIFSGLDATLX	=	0xe6f1
                    E6F2    555 _XGPIFSGLDATLNOX	=	0xe6f2
                    E6F3    556 _GPIFREADYCFG	=	0xe6f3
                    E6F4    557 _GPIFREADYSTAT	=	0xe6f4
                    E6F5    558 _GPIFABORT	=	0xe6f5
                    E6C6    559 _FLOWSTATE	=	0xe6c6
                    E6C7    560 _FLOWLOGIC	=	0xe6c7
                    E6C8    561 _FLOWEQ0CTL	=	0xe6c8
                    E6C9    562 _FLOWEQ1CTL	=	0xe6c9
                    E6CA    563 _FLOWHOLDOFF	=	0xe6ca
                    E6CB    564 _FLOWSTB	=	0xe6cb
                    E6CC    565 _FLOWSTBEDGE	=	0xe6cc
                    E6CD    566 _FLOWSTBHPERIOD	=	0xe6cd
                    E60C    567 _GPIFHOLDAMOUNT	=	0xe60c
                    E67D    568 _UDMACRCH	=	0xe67d
                    E67E    569 _UDMACRCL	=	0xe67e
                    E67F    570 _UDMACRCQUAL	=	0xe67f
                    E6F8    571 _DBUG	=	0xe6f8
                    E6F9    572 _TESTCFG	=	0xe6f9
                    E6FA    573 _USBTEST	=	0xe6fa
                    E6FB    574 _CT1	=	0xe6fb
                    E6FC    575 _CT2	=	0xe6fc
                    E6FD    576 _CT3	=	0xe6fd
                    E6FE    577 _CT4	=	0xe6fe
                    E740    578 _EP0BUF	=	0xe740
                    E780    579 _EP1OUTBUF	=	0xe780
                    E7C0    580 _EP1INBUF	=	0xe7c0
                    F000    581 _EP2FIFOBUF	=	0xf000
                    F400    582 _EP4FIFOBUF	=	0xf400
                    F800    583 _EP6FIFOBUF	=	0xf800
                    FC00    584 _EP8FIFOBUF	=	0xfc00
                            585 ;--------------------------------------------------------
                            586 ; absolute external ram data
                            587 ;--------------------------------------------------------
                            588 	.area XABS    (ABS,XDATA)
   3D00                     589 	.org 0x3D00
   3D00                     590 _myDeviceDscr::
   3D00                     591 	.ds 18
   3D20                     592 	.org 0x3D20
   3D20                     593 _myDeviceQualDscr::
   3D20                     594 	.ds 10
   3D30                     595 	.org 0x3D30
   3D30                     596 _myConfigDscr::
   3D30                     597 	.ds 9
   3D39                     598 	.org 0x3D39
   3D39                     599 _myIntrfcDscr::
   3D39                     600 	.ds 9
   3D42                     601 	.org 0x3D42
   3D42                     602 _myInEndpntDscr::
   3D42                     603 	.ds 7
   3D49                     604 	.org 0x3D49
   3D49                     605 _myOutEndpntDscr::
   3D49                     606 	.ds 7
                            607 ;--------------------------------------------------------
                            608 ; external initialized ram data
                            609 ;--------------------------------------------------------
                            610 	.area XISEG   (XDATA)
                            611 	.area HOME    (CODE)
                            612 	.area GSINIT0 (CODE)
                            613 	.area GSINIT1 (CODE)
                            614 	.area GSINIT2 (CODE)
                            615 	.area GSINIT3 (CODE)
                            616 	.area GSINIT4 (CODE)
                            617 	.area GSINIT5 (CODE)
                            618 	.area GSINIT  (CODE)
                            619 	.area GSFINAL (CODE)
                            620 	.area CSEG    (CODE)
                            621 ;--------------------------------------------------------
                            622 ; interrupt vector 
                            623 ;--------------------------------------------------------
                            624 	.area HOME    (CODE)
   0000                     625 __interrupt_vect:
   0000 02s00r00            626 	ljmp	__sdcc_gsinit_startup
   0003 32                  627 	reti
   0004                     628 	.ds	7
   000B 32                  629 	reti
   000C                     630 	.ds	7
   0013 32                  631 	reti
   0014                     632 	.ds	7
   001B 32                  633 	reti
   001C                     634 	.ds	7
   0023 32                  635 	reti
   0024                     636 	.ds	7
   002B 32                  637 	reti
   002C                     638 	.ds	7
   0033 32                  639 	reti
   0034                     640 	.ds	7
   003B 32                  641 	reti
   003C                     642 	.ds	7
   0043 02s04rED            643 	ljmp	_USB_isr
                            644 ;--------------------------------------------------------
                            645 ; global & static initialisations
                            646 ;--------------------------------------------------------
                            647 	.area HOME    (CODE)
                            648 	.area GSINIT  (CODE)
                            649 	.area GSFINAL (CODE)
                            650 	.area GSINIT  (CODE)
                            651 	.globl __sdcc_gsinit_startup
                            652 	.globl __sdcc_program_startup
                            653 	.globl __start__stack
                            654 	.globl __mcs51_genXINIT
                            655 	.globl __mcs51_genXRAMCLEAR
                            656 	.globl __mcs51_genRAMCLEAR
                            657 ;	convert_serial.c:114: char * USB_strings[] = { "EN", "freesoft.org", "FX2 case converter" };
   0000 75*02r0A            658 	mov	(_USB_strings + 0),#__str_0
   0003 75*03s00            659 	mov	(_USB_strings + 1),#(__str_0 >> 8)
   0006 75*04 80            660 	mov	(_USB_strings + 2),#0x80
   0009 75*05r0D            661 	mov	((_USB_strings + 0x0003) + 0),#__str_1
   000C 75*06s00            662 	mov	((_USB_strings + 0x0003) + 1),#(__str_1 >> 8)
   000F 75*07 80            663 	mov	((_USB_strings + 0x0003) + 2),#0x80
   0012 75*08r1A            664 	mov	((_USB_strings + 0x0006) + 0),#__str_2
   0015 75*09s00            665 	mov	((_USB_strings + 0x0006) + 1),#(__str_2 >> 8)
   0018 75*0A 80            666 	mov	((_USB_strings + 0x0006) + 2),#0x80
                            667 ;	convert_serial.c:498: unsigned int bytes_waiting_for_xmit = 0;
   001B E4                  668 	clr	a
   001C F5*0D               669 	mov	_bytes_waiting_for_xmit,a
   001E F5*0E               670 	mov	(_bytes_waiting_for_xmit + 1),a
                            671 ;	convert_serial.c:499: unsigned int latency_us = 40000;
   0020 75*0F 40            672 	mov	_latency_us,#0x40
   0023 75*10 9C            673 	mov	(_latency_us + 1),#0x9C
                            674 ;	convert_serial.c:47: BOOL Rwuen_allowed = FALSE;	// Allow remote wakeup to be enabled
   0026 C2*00               675 	clr	_Rwuen_allowed
                            676 ;	convert_serial.c:48: BOOL Rwuen = FALSE;		// Remote wakeup enable
   0028 C2*01               677 	clr	_Rwuen
                            678 ;	convert_serial.c:49: BOOL Selfpwr = FALSE;		// Device is (not) self-powered
   002A C2*02               679 	clr	_Selfpwr
                            680 ;	convert_serial.c:132: DEVICEDSCR xdata at 0x3d00 myDeviceDscr = {
   002C 90s3Dr00            681 	mov	dptr,#_myDeviceDscr
   002F 74 12               682 	mov	a,#0x12
   0031 F0                  683 	movx	@dptr,a
   0032 90s3Dr01            684 	mov	dptr,#(_myDeviceDscr + 0x0001)
   0035 74 01               685 	mov	a,#0x01
   0037 F0                  686 	movx	@dptr,a
   0038 90s3Dr02            687 	mov	dptr,#(_myDeviceDscr + 0x0002)
   003B E4                  688 	clr	a
   003C F0                  689 	movx	@dptr,a
   003D A3                  690 	inc	dptr
   003E 74 02               691 	mov	a,#0x02
   0040 F0                  692 	movx	@dptr,a
   0041 90s3Dr04            693 	mov	dptr,#(_myDeviceDscr + 0x0004)
   0044 E4                  694 	clr	a
   0045 F0                  695 	movx	@dptr,a
   0046 90s3Dr05            696 	mov	dptr,#(_myDeviceDscr + 0x0005)
   0049 F0                  697 	movx	@dptr,a
   004A 90s3Dr06            698 	mov	dptr,#(_myDeviceDscr + 0x0006)
   004D F0                  699 	movx	@dptr,a
   004E 90s3Dr07            700 	mov	dptr,#(_myDeviceDscr + 0x0007)
   0051 74 40               701 	mov	a,#0x40
   0053 F0                  702 	movx	@dptr,a
   0054 90s3Dr08            703 	mov	dptr,#(_myDeviceDscr + 0x0008)
   0057 74 B4               704 	mov	a,#0xB4
   0059 F0                  705 	movx	@dptr,a
   005A A3                  706 	inc	dptr
   005B 74 04               707 	mov	a,#0x04
   005D F0                  708 	movx	@dptr,a
   005E 90s3Dr0A            709 	mov	dptr,#(_myDeviceDscr + 0x000a)
   0061 74 13               710 	mov	a,#0x13
   0063 F0                  711 	movx	@dptr,a
   0064 A3                  712 	inc	dptr
   0065 74 86               713 	mov	a,#0x86
   0067 F0                  714 	movx	@dptr,a
   0068 90s3Dr0C            715 	mov	dptr,#(_myDeviceDscr + 0x000c)
   006B E4                  716 	clr	a
   006C F0                  717 	movx	@dptr,a
   006D A3                  718 	inc	dptr
   006E 74 01               719 	mov	a,#0x01
   0070 F0                  720 	movx	@dptr,a
   0071 90s3Dr0E            721 	mov	dptr,#(_myDeviceDscr + 0x000e)
   0074 74 01               722 	mov	a,#0x01
   0076 F0                  723 	movx	@dptr,a
   0077 90s3Dr0F            724 	mov	dptr,#(_myDeviceDscr + 0x000f)
   007A 74 02               725 	mov	a,#0x02
   007C F0                  726 	movx	@dptr,a
   007D 90s3Dr10            727 	mov	dptr,#(_myDeviceDscr + 0x0010)
   0080 E4                  728 	clr	a
   0081 F0                  729 	movx	@dptr,a
   0082 90s3Dr11            730 	mov	dptr,#(_myDeviceDscr + 0x0011)
   0085 74 01               731 	mov	a,#0x01
   0087 F0                  732 	movx	@dptr,a
                            733 ;	convert_serial.c:159: DEVICEQUALDSCR xdata at 0x3d20 myDeviceQualDscr = {
   0088 90s3Dr20            734 	mov	dptr,#_myDeviceQualDscr
   008B 74 0A               735 	mov	a,#0x0A
   008D F0                  736 	movx	@dptr,a
   008E 90s3Dr21            737 	mov	dptr,#(_myDeviceQualDscr + 0x0001)
   0091 74 06               738 	mov	a,#0x06
   0093 F0                  739 	movx	@dptr,a
   0094 90s3Dr22            740 	mov	dptr,#(_myDeviceQualDscr + 0x0002)
   0097 E4                  741 	clr	a
   0098 F0                  742 	movx	@dptr,a
   0099 A3                  743 	inc	dptr
   009A 74 02               744 	mov	a,#0x02
   009C F0                  745 	movx	@dptr,a
   009D 90s3Dr24            746 	mov	dptr,#(_myDeviceQualDscr + 0x0004)
   00A0 E4                  747 	clr	a
   00A1 F0                  748 	movx	@dptr,a
   00A2 90s3Dr25            749 	mov	dptr,#(_myDeviceQualDscr + 0x0005)
   00A5 F0                  750 	movx	@dptr,a
   00A6 90s3Dr26            751 	mov	dptr,#(_myDeviceQualDscr + 0x0006)
   00A9 F0                  752 	movx	@dptr,a
   00AA 90s3Dr27            753 	mov	dptr,#(_myDeviceQualDscr + 0x0007)
   00AD 74 40               754 	mov	a,#0x40
   00AF F0                  755 	movx	@dptr,a
   00B0 90s3Dr28            756 	mov	dptr,#(_myDeviceQualDscr + 0x0008)
   00B3 74 01               757 	mov	a,#0x01
   00B5 F0                  758 	movx	@dptr,a
                            759 ;	convert_serial.c:177: CONFIGDSCR xdata at 0x3d30 myConfigDscr = {
   00B6 90s3Dr30            760 	mov	dptr,#_myConfigDscr
   00B9 74 09               761 	mov	a,#0x09
   00BB F0                  762 	movx	@dptr,a
   00BC 90s3Dr31            763 	mov	dptr,#(_myConfigDscr + 0x0001)
   00BF 74 02               764 	mov	a,#0x02
   00C1 F0                  765 	movx	@dptr,a
   00C2 90s3Dr32            766 	mov	dptr,#(_myConfigDscr + 0x0002)
   00C5 74 20               767 	mov	a,#0x20
   00C7 F0                  768 	movx	@dptr,a
   00C8 A3                  769 	inc	dptr
   00C9 E4                  770 	clr	a
   00CA F0                  771 	movx	@dptr,a
   00CB 90s3Dr34            772 	mov	dptr,#(_myConfigDscr + 0x0004)
   00CE 74 01               773 	mov	a,#0x01
   00D0 F0                  774 	movx	@dptr,a
   00D1 90s3Dr35            775 	mov	dptr,#(_myConfigDscr + 0x0005)
   00D4 74 01               776 	mov	a,#0x01
   00D6 F0                  777 	movx	@dptr,a
   00D7 90s3Dr36            778 	mov	dptr,#(_myConfigDscr + 0x0006)
   00DA E4                  779 	clr	a
   00DB F0                  780 	movx	@dptr,a
   00DC 90s3Dr37            781 	mov	dptr,#(_myConfigDscr + 0x0007)
   00DF 74 A0               782 	mov	a,#0xA0
   00E1 F0                  783 	movx	@dptr,a
   00E2 90s3Dr38            784 	mov	dptr,#(_myConfigDscr + 0x0008)
   00E5 74 1E               785 	mov	a,#0x1E
   00E7 F0                  786 	movx	@dptr,a
                            787 ;	convert_serial.c:188: INTRFCDSCR xdata at 0x3d30+DSCR_OFFSET(0,0) myIntrfcDscr = {
   00E8 90s3Dr39            788 	mov	dptr,#_myIntrfcDscr
   00EB 74 09               789 	mov	a,#0x09
   00ED F0                  790 	movx	@dptr,a
   00EE 90s3Dr3A            791 	mov	dptr,#(_myIntrfcDscr + 0x0001)
   00F1 74 04               792 	mov	a,#0x04
   00F3 F0                  793 	movx	@dptr,a
   00F4 90s3Dr3B            794 	mov	dptr,#(_myIntrfcDscr + 0x0002)
   00F7 E4                  795 	clr	a
   00F8 F0                  796 	movx	@dptr,a
   00F9 90s3Dr3C            797 	mov	dptr,#(_myIntrfcDscr + 0x0003)
   00FC F0                  798 	movx	@dptr,a
   00FD 90s3Dr3D            799 	mov	dptr,#(_myIntrfcDscr + 0x0004)
   0100 74 02               800 	mov	a,#0x02
   0102 F0                  801 	movx	@dptr,a
   0103 90s3Dr3E            802 	mov	dptr,#(_myIntrfcDscr + 0x0005)
   0106 74 FF               803 	mov	a,#0xFF
   0108 F0                  804 	movx	@dptr,a
   0109 90s3Dr3F            805 	mov	dptr,#(_myIntrfcDscr + 0x0006)
   010C 74 FF               806 	mov	a,#0xFF
   010E F0                  807 	movx	@dptr,a
   010F 90s3Dr40            808 	mov	dptr,#(_myIntrfcDscr + 0x0007)
   0112 74 FF               809 	mov	a,#0xFF
   0114 F0                  810 	movx	@dptr,a
   0115 90s3Dr41            811 	mov	dptr,#(_myIntrfcDscr + 0x0008)
   0118 E4                  812 	clr	a
   0119 F0                  813 	movx	@dptr,a
                            814 ;	convert_serial.c:200: ENDPNTDSCR xdata at 0x3d30+DSCR_OFFSET(1,0) myInEndpntDscr = {
   011A 90s3Dr42            815 	mov	dptr,#_myInEndpntDscr
   011D 74 07               816 	mov	a,#0x07
   011F F0                  817 	movx	@dptr,a
   0120 90s3Dr43            818 	mov	dptr,#(_myInEndpntDscr + 0x0001)
   0123 74 05               819 	mov	a,#0x05
   0125 F0                  820 	movx	@dptr,a
   0126 90s3Dr44            821 	mov	dptr,#(_myInEndpntDscr + 0x0002)
   0129 74 81               822 	mov	a,#0x81
   012B F0                  823 	movx	@dptr,a
   012C 90s3Dr45            824 	mov	dptr,#(_myInEndpntDscr + 0x0003)
   012F 74 02               825 	mov	a,#0x02
   0131 F0                  826 	movx	@dptr,a
   0132 90s3Dr46            827 	mov	dptr,#(_myInEndpntDscr + 0x0004)
   0135 E4                  828 	clr	a
   0136 F0                  829 	movx	@dptr,a
   0137 A3                  830 	inc	dptr
   0138 74 02               831 	mov	a,#0x02
   013A F0                  832 	movx	@dptr,a
   013B 90s3Dr48            833 	mov	dptr,#(_myInEndpntDscr + 0x0006)
   013E E4                  834 	clr	a
   013F F0                  835 	movx	@dptr,a
                            836 ;	convert_serial.c:210: ENDPNTDSCR xdata at 0x3d30+DSCR_OFFSET(1,1) myOutEndpntDscr = {
   0140 90s3Dr49            837 	mov	dptr,#_myOutEndpntDscr
   0143 74 07               838 	mov	a,#0x07
   0145 F0                  839 	movx	@dptr,a
   0146 90s3Dr4A            840 	mov	dptr,#(_myOutEndpntDscr + 0x0001)
   0149 74 05               841 	mov	a,#0x05
   014B F0                  842 	movx	@dptr,a
   014C 90s3Dr4B            843 	mov	dptr,#(_myOutEndpntDscr + 0x0002)
   014F 74 01               844 	mov	a,#0x01
   0151 F0                  845 	movx	@dptr,a
   0152 90s3Dr4C            846 	mov	dptr,#(_myOutEndpntDscr + 0x0003)
   0155 74 02               847 	mov	a,#0x02
   0157 F0                  848 	movx	@dptr,a
   0158 90s3Dr4D            849 	mov	dptr,#(_myOutEndpntDscr + 0x0004)
   015B E4                  850 	clr	a
   015C F0                  851 	movx	@dptr,a
   015D A3                  852 	inc	dptr
   015E 74 02               853 	mov	a,#0x02
   0160 F0                  854 	movx	@dptr,a
   0161 90s3Dr4F            855 	mov	dptr,#(_myOutEndpntDscr + 0x0006)
   0164 E4                  856 	clr	a
   0165 F0                  857 	movx	@dptr,a
                            858 	.area GSFINAL (CODE)
   0000 02s00r46            859 	ljmp	__sdcc_program_startup
                            860 ;--------------------------------------------------------
                            861 ; Home
                            862 ;--------------------------------------------------------
                            863 	.area HOME    (CODE)
                            864 	.area HOME    (CODE)
   0046                     865 __sdcc_program_startup:
   0046 12s06r83            866 	lcall	_main
                            867 ;	return from main will lock up
   0049 80 FE               868 	sjmp .
                            869 ;--------------------------------------------------------
                            870 ; code
                            871 ;--------------------------------------------------------
                            872 	.area CSEG    (CODE)
                            873 ;------------------------------------------------------------
                            874 ;Allocation info for local variables in function 'count_array_size'
                            875 ;------------------------------------------------------------
                            876 ;array                     Allocated to registers 
                            877 ;size                      Allocated to registers r3 r4 
                            878 ;------------------------------------------------------------
                            879 ;	convert_serial.c:224: static int count_array_size(void ** array)
                            880 ;	-----------------------------------------
                            881 ;	 function count_array_size
                            882 ;	-----------------------------------------
   0000                     883 _count_array_size:
                    0007    884 	ar7 = 0x07
                    0006    885 	ar6 = 0x06
                    0005    886 	ar5 = 0x05
                    0004    887 	ar4 = 0x04
                    0003    888 	ar3 = 0x03
                    0002    889 	ar2 = 0x02
                    0001    890 	ar1 = 0x01
                    0000    891 	ar0 = 0x00
   0000 AD 82               892 	mov	r5,dpl
   0002 AE 83               893 	mov	r6,dph
   0004 AF F0               894 	mov	r7,b
                            895 ;	convert_serial.c:227: for (size=0; *array != 0; array++, size++);
   0006 7B 00               896 	mov	r3,#0x00
   0008 7C 00               897 	mov	r4,#0x00
   000A                     898 00101$:
   000A 8D 82               899 	mov	dpl,r5
   000C 8E 83               900 	mov	dph,r6
   000E 8F F0               901 	mov	b,r7
   0010 12s00r00            902 	lcall	__gptrget
   0013 F8                  903 	mov	r0,a
   0014 A3                  904 	inc	dptr
   0015 12s00r00            905 	lcall	__gptrget
   0018 F9                  906 	mov	r1,a
   0019 A3                  907 	inc	dptr
   001A 12s00r00            908 	lcall	__gptrget
   001D FA                  909 	mov	r2,a
   001E E4                  910 	clr	a
   001F C0 E0               911 	push	acc
   0021 E4                  912 	clr	a
   0022 C0 E0               913 	push	acc
   0024 E4                  914 	clr	a
   0025 C0 E0               915 	push	acc
   0027 88 82               916 	mov	dpl,r0
   0029 89 83               917 	mov	dph,r1
   002B 8A F0               918 	mov	b,r2
   002D 12s00r00            919 	lcall	___gptr_cmp
   0030 15 81               920 	dec	sp
   0032 15 81               921 	dec	sp
   0034 15 81               922 	dec	sp
   0036 60 0E               923 	jz	00104$
   0038 74 03               924 	mov	a,#0x03
   003A 2D                  925 	add	a,r5
   003B FD                  926 	mov	r5,a
   003C E4                  927 	clr	a
   003D 3E                  928 	addc	a,r6
   003E FE                  929 	mov	r6,a
   003F 0B                  930 	inc	r3
   0040 BB 00 C7            931 	cjne	r3,#0x00,00101$
   0043 0C                  932 	inc	r4
   0044 80 C4               933 	sjmp	00101$
   0046                     934 00104$:
                            935 ;	convert_serial.c:228: return size;
   0046 8B 82               936 	mov	dpl,r3
   0048 8C 83               937 	mov	dph,r4
   004A 22                  938 	ret
                            939 ;------------------------------------------------------------
                            940 ;Allocation info for local variables in function 'SetupCommand'
                            941 ;------------------------------------------------------------
                            942 ;i                         Allocated with name '_SetupCommand_i_1_21'
                            943 ;interface                 Allocated to registers r6 r7 
                            944 ;------------------------------------------------------------
                            945 ;	convert_serial.c:231: static void SetupCommand(void)
                            946 ;	-----------------------------------------
                            947 ;	 function SetupCommand
                            948 ;	-----------------------------------------
   004B                     949 _SetupCommand:
                            950 ;	convert_serial.c:238: switch(SETUPDAT[0] & SETUP_MASK) {
   004B 90 E6 B8            951 	mov	dptr,#_SETUPDAT
   004E E0                  952 	movx	a,@dptr
   004F FF                  953 	mov	r7,a
   0050 53 07 60            954 	anl	ar7,#0x60
   0053 BF 00 02            955 	cjne	r7,#0x00,00222$
   0056 80 03               956 	sjmp	00223$
   0058                     957 00222$:
   0058 02s04rDD            958 	ljmp	00163$
   005B                     959 00223$:
                            960 ;	convert_serial.c:241: switch(SETUPDAT[1])
   005B 90 E6 B9            961 	mov	dptr,#(_SETUPDAT + 0x0001)
   005E E0                  962 	movx	a,@dptr
   005F FF                  963 	mov  r7,a
   0060 24 F4               964 	add	a,#0xff - 0x0B
   0062 50 03               965 	jnc	00224$
   0064 02s04rD3            966 	ljmp	00161$
   0067                     967 00224$:
   0067 EF                  968 	mov	a,r7
   0068 2F                  969 	add	a,r7
   0069 2F                  970 	add	a,r7
   006A 90s00r6E            971 	mov	dptr,#00225$
   006D 73                  972 	jmp	@a+dptr
   006E                     973 00225$:
   006E 02s02rE0            974 	ljmp	00133$
   0071 02s03r82            975 	ljmp	00139$
   0074 02s04rD3            976 	ljmp	00161$
   0077 02s04r39            977 	ljmp	00149$
   007A 02s04rD3            978 	ljmp	00161$
   007D 02s04rD3            979 	ljmp	00161$
   0080 02s00r92            980 	ljmp	00102$
   0083 02s04rD3            981 	ljmp	00161$
   0086 02s02rCC            982 	ljmp	00132$
   0089 02s02rC3            983 	ljmp	00131$
   008C 02s02r72            984 	ljmp	00125$
   008F 02s02rA0            985 	ljmp	00128$
                            986 ;	convert_serial.c:243: case SC_GET_DESCRIPTOR:
   0092                     987 00102$:
                            988 ;	convert_serial.c:244: switch(SETUPDAT[3])
   0092 90 E6 BB            989 	mov	dptr,#(_SETUPDAT + 0x0003)
   0095 E0                  990 	movx	a,@dptr
   0096 FF                  991 	mov	r7,a
   0097 BF 01 02            992 	cjne	r7,#0x01,00226$
   009A 80 19               993 	sjmp	00103$
   009C                     994 00226$:
   009C BF 02 02            995 	cjne	r7,#0x02,00227$
   009F 80 46               996 	sjmp	00105$
   00A1                     997 00227$:
   00A1 BF 03 03            998 	cjne	r7,#0x03,00228$
   00A4 02s01r81            999 	ljmp	00113$
   00A7                    1000 00228$:
   00A7 BF 06 02           1001 	cjne	r7,#0x06,00229$
   00AA 80 22              1002 	sjmp	00104$
   00AC                    1003 00229$:
   00AC BF 07 03           1004 	cjne	r7,#0x07,00230$
   00AF 02s01r34           1005 	ljmp	00109$
   00B2                    1006 00230$:
   00B2 02s02r67           1007 	ljmp	00123$
                           1008 ;	convert_serial.c:246: case GD_DEVICE:
   00B5                    1009 00103$:
                           1010 ;	convert_serial.c:247: SUDPTRH = MSB(&myDeviceDscr);
   00B5 7Er00              1011 	mov	r6,#_myDeviceDscr
   00B7 7Fs3D              1012 	mov	r7,#(_myDeviceDscr >> 8)
   00B9 8F 06              1013 	mov	ar6,r7
   00BB 90 E6 B3           1014 	mov	dptr,#_SUDPTRH
   00BE EE                 1015 	mov	a,r6
   00BF F0                 1016 	movx	@dptr,a
                           1017 ;	convert_serial.c:248: SUDPTRL = LSB(&myDeviceDscr);
   00C0 7Er00              1018 	mov	r6,#_myDeviceDscr
   00C2 7Fs3D              1019 	mov	r7,#(_myDeviceDscr >> 8)
   00C4 7F 00              1020 	mov	r7,#0x00
   00C6 90 E6 B4           1021 	mov	dptr,#_SUDPTRL
   00C9 EE                 1022 	mov	a,r6
   00CA F0                 1023 	movx	@dptr,a
                           1024 ;	convert_serial.c:249: break;
   00CB 02s04rE5           1025 	ljmp	00164$
                           1026 ;	convert_serial.c:250: case GD_DEVICE_QUALIFIER:
   00CE                    1027 00104$:
                           1028 ;	convert_serial.c:251: SUDPTRH = MSB(&myDeviceQualDscr);
   00CE 7Er20              1029 	mov	r6,#_myDeviceQualDscr
   00D0 7Fs3D              1030 	mov	r7,#(_myDeviceQualDscr >> 8)
   00D2 8F 06              1031 	mov	ar6,r7
   00D4 90 E6 B3           1032 	mov	dptr,#_SUDPTRH
   00D7 EE                 1033 	mov	a,r6
   00D8 F0                 1034 	movx	@dptr,a
                           1035 ;	convert_serial.c:252: SUDPTRL = LSB(&myDeviceQualDscr);
   00D9 7Er20              1036 	mov	r6,#_myDeviceQualDscr
   00DB 7Fs3D              1037 	mov	r7,#(_myDeviceQualDscr >> 8)
   00DD 7F 00              1038 	mov	r7,#0x00
   00DF 90 E6 B4           1039 	mov	dptr,#_SUDPTRL
   00E2 EE                 1040 	mov	a,r6
   00E3 F0                 1041 	movx	@dptr,a
                           1042 ;	convert_serial.c:253: break;
   00E4 02s04rE5           1043 	ljmp	00164$
                           1044 ;	convert_serial.c:254: case GD_CONFIGURATION:
   00E7                    1045 00105$:
                           1046 ;	convert_serial.c:255: myConfigDscr.type = CONFIG_DSCR;
   00E7 90s3Dr31           1047 	mov	dptr,#(_myConfigDscr + 0x0001)
   00EA 74 02              1048 	mov	a,#0x02
   00EC F0                 1049 	movx	@dptr,a
                           1050 ;	convert_serial.c:256: if (USBCS & bmHSM) {
   00ED 90 E6 80           1051 	mov	dptr,#_USBCS
   00F0 E0                 1052 	movx	a,@dptr
   00F1 FF                 1053 	mov	r7,a
   00F2 30 E7 14           1054 	jnb	acc.7,00107$
                           1055 ;	convert_serial.c:258: myInEndpntDscr.mp = 64;
   00F5 90s3Dr46           1056 	mov	dptr,#(_myInEndpntDscr + 0x0004)
   00F8 74 40              1057 	mov	a,#0x40
   00FA F0                 1058 	movx	@dptr,a
   00FB A3                 1059 	inc	dptr
   00FC E4                 1060 	clr	a
   00FD F0                 1061 	movx	@dptr,a
                           1062 ;	convert_serial.c:259: myOutEndpntDscr.mp = 64;
   00FE 90s3Dr4D           1063 	mov	dptr,#(_myOutEndpntDscr + 0x0004)
   0101 74 40              1064 	mov	a,#0x40
   0103 F0                 1065 	movx	@dptr,a
   0104 A3                 1066 	inc	dptr
   0105 E4                 1067 	clr	a
   0106 F0                 1068 	movx	@dptr,a
   0107 80 12              1069 	sjmp	00108$
   0109                    1070 00107$:
                           1071 ;	convert_serial.c:262: myInEndpntDscr.mp = 64;
   0109 90s3Dr46           1072 	mov	dptr,#(_myInEndpntDscr + 0x0004)
   010C 74 40              1073 	mov	a,#0x40
   010E F0                 1074 	movx	@dptr,a
   010F A3                 1075 	inc	dptr
   0110 E4                 1076 	clr	a
   0111 F0                 1077 	movx	@dptr,a
                           1078 ;	convert_serial.c:263: myOutEndpntDscr.mp = 64;
   0112 90s3Dr4D           1079 	mov	dptr,#(_myOutEndpntDscr + 0x0004)
   0115 74 40              1080 	mov	a,#0x40
   0117 F0                 1081 	movx	@dptr,a
   0118 A3                 1082 	inc	dptr
   0119 E4                 1083 	clr	a
   011A F0                 1084 	movx	@dptr,a
   011B                    1085 00108$:
                           1086 ;	convert_serial.c:265: SUDPTRH = MSB(&myConfigDscr);
   011B 7Er30              1087 	mov	r6,#_myConfigDscr
   011D 7Fs3D              1088 	mov	r7,#(_myConfigDscr >> 8)
   011F 8F 06              1089 	mov	ar6,r7
   0121 90 E6 B3           1090 	mov	dptr,#_SUDPTRH
   0124 EE                 1091 	mov	a,r6
   0125 F0                 1092 	movx	@dptr,a
                           1093 ;	convert_serial.c:266: SUDPTRL = LSB(&myConfigDscr);
   0126 7Er30              1094 	mov	r6,#_myConfigDscr
   0128 7Fs3D              1095 	mov	r7,#(_myConfigDscr >> 8)
   012A 7F 00              1096 	mov	r7,#0x00
   012C 90 E6 B4           1097 	mov	dptr,#_SUDPTRL
   012F EE                 1098 	mov	a,r6
   0130 F0                 1099 	movx	@dptr,a
                           1100 ;	convert_serial.c:267: break;
   0131 02s04rE5           1101 	ljmp	00164$
                           1102 ;	convert_serial.c:268: case GD_OTHER_SPEED_CONFIGURATION:
   0134                    1103 00109$:
                           1104 ;	convert_serial.c:269: myConfigDscr.type = OTHERSPEED_DSCR;
   0134 90s3Dr31           1105 	mov	dptr,#(_myConfigDscr + 0x0001)
   0137 74 07              1106 	mov	a,#0x07
   0139 F0                 1107 	movx	@dptr,a
                           1108 ;	convert_serial.c:270: if (USBCS & bmHSM) {
   013A 90 E6 80           1109 	mov	dptr,#_USBCS
   013D E0                 1110 	movx	a,@dptr
   013E FF                 1111 	mov	r7,a
   013F 30 E7 14           1112 	jnb	acc.7,00111$
                           1113 ;	convert_serial.c:273: myInEndpntDscr.mp = 64;
   0142 90s3Dr46           1114 	mov	dptr,#(_myInEndpntDscr + 0x0004)
   0145 74 40              1115 	mov	a,#0x40
   0147 F0                 1116 	movx	@dptr,a
   0148 A3                 1117 	inc	dptr
   0149 E4                 1118 	clr	a
   014A F0                 1119 	movx	@dptr,a
                           1120 ;	convert_serial.c:274: myOutEndpntDscr.mp = 64;
   014B 90s3Dr4D           1121 	mov	dptr,#(_myOutEndpntDscr + 0x0004)
   014E 74 40              1122 	mov	a,#0x40
   0150 F0                 1123 	movx	@dptr,a
   0151 A3                 1124 	inc	dptr
   0152 E4                 1125 	clr	a
   0153 F0                 1126 	movx	@dptr,a
   0154 80 12              1127 	sjmp	00112$
   0156                    1128 00111$:
                           1129 ;	convert_serial.c:278: myInEndpntDscr.mp = 64;
   0156 90s3Dr46           1130 	mov	dptr,#(_myInEndpntDscr + 0x0004)
   0159 74 40              1131 	mov	a,#0x40
   015B F0                 1132 	movx	@dptr,a
   015C A3                 1133 	inc	dptr
   015D E4                 1134 	clr	a
   015E F0                 1135 	movx	@dptr,a
                           1136 ;	convert_serial.c:279: myOutEndpntDscr.mp = 64;
   015F 90s3Dr4D           1137 	mov	dptr,#(_myOutEndpntDscr + 0x0004)
   0162 74 40              1138 	mov	a,#0x40
   0164 F0                 1139 	movx	@dptr,a
   0165 A3                 1140 	inc	dptr
   0166 E4                 1141 	clr	a
   0167 F0                 1142 	movx	@dptr,a
   0168                    1143 00112$:
                           1144 ;	convert_serial.c:281: SUDPTRH = MSB(&myConfigDscr);
   0168 7Er30              1145 	mov	r6,#_myConfigDscr
   016A 7Fs3D              1146 	mov	r7,#(_myConfigDscr >> 8)
   016C 8F 06              1147 	mov	ar6,r7
   016E 90 E6 B3           1148 	mov	dptr,#_SUDPTRH
   0171 EE                 1149 	mov	a,r6
   0172 F0                 1150 	movx	@dptr,a
                           1151 ;	convert_serial.c:282: SUDPTRL = LSB(&myConfigDscr);
   0173 7Er30              1152 	mov	r6,#_myConfigDscr
   0175 7Fs3D              1153 	mov	r7,#(_myConfigDscr >> 8)
   0177 7F 00              1154 	mov	r7,#0x00
   0179 90 E6 B4           1155 	mov	dptr,#_SUDPTRL
   017C EE                 1156 	mov	a,r6
   017D F0                 1157 	movx	@dptr,a
                           1158 ;	convert_serial.c:283: break;
   017E 02s04rE5           1159 	ljmp	00164$
                           1160 ;	convert_serial.c:284: case GD_STRING:
   0181                    1161 00113$:
                           1162 ;	convert_serial.c:285: if (SETUPDAT[2] >= count_array_size((void **) USB_strings)) {
   0181 90 E6 BA           1163 	mov	dptr,#(_SETUPDAT + 0x0002)
   0184 E0                 1164 	movx	a,@dptr
   0185 FF                 1165 	mov	r7,a
   0186 90s00r02           1166 	mov	dptr,#_USB_strings
   0189 75 F0 40           1167 	mov	b,#0x40
   018C C0 07              1168 	push	ar7
   018E 12s00r00           1169 	lcall	_count_array_size
   0191 AD 82              1170 	mov	r5,dpl
   0193 AE 83              1171 	mov	r6,dph
   0195 D0 07              1172 	pop	ar7
   0197 7C 00              1173 	mov	r4,#0x00
   0199 C3                 1174 	clr	c
   019A EF                 1175 	mov	a,r7
   019B 9D                 1176 	subb	a,r5
   019C EC                 1177 	mov	a,r4
   019D 64 80              1178 	xrl	a,#0x80
   019F 8E F0              1179 	mov	b,r6
   01A1 63 F0 80           1180 	xrl	b,#0x80
   01A4 95 F0              1181 	subb	a,b
   01A6 40 0B              1182 	jc	00179$
                           1183 ;	convert_serial.c:286: EZUSB_STALL_EP0();
   01A8 90 E6 A0           1184 	mov	dptr,#_EP0CS
   01AB E0                 1185 	movx	a,@dptr
   01AC FF                 1186 	mov	r7,a
   01AD 44 01              1187 	orl	a,#0x01
   01AF F0                 1188 	movx	@dptr,a
   01B0 02s04rE5           1189 	ljmp	00164$
                           1190 ;	convert_serial.c:288: for (i=0; i<31; i++) {
   01B3                    1191 00179$:
   01B3 E4                 1192 	clr	a
   01B4 F5*0B              1193 	mov	_SetupCommand_i_1_21,a
   01B6 F5*0C              1194 	mov	(_SetupCommand_i_1_21 + 1),a
   01B8                    1195 00116$:
   01B8 C3                 1196 	clr	c
   01B9 E5*0B              1197 	mov	a,_SetupCommand_i_1_21
   01BB 94 1F              1198 	subb	a,#0x1F
   01BD E5*0C              1199 	mov	a,(_SetupCommand_i_1_21 + 1)
   01BF 64 80              1200 	xrl	a,#0x80
   01C1 94 80              1201 	subb	a,#0x80
   01C3 50 7B              1202 	jnc	00119$
                           1203 ;	convert_serial.c:289: if (USB_strings[SETUPDAT[2]][i] == '\0') break;
   01C5 90 E6 BA           1204 	mov	dptr,#(_SETUPDAT + 0x0002)
   01C8 E0                 1205 	movx	a,@dptr
   01C9 75 F0 03           1206 	mov	b,#0x03
   01CC A4                 1207 	mul	ab
   01CD 24r02              1208 	add	a,#_USB_strings
   01CF F9                 1209 	mov	r1,a
   01D0 87 03              1210 	mov	ar3,@r1
   01D2 09                 1211 	inc	r1
   01D3 87 04              1212 	mov	ar4,@r1
   01D5 09                 1213 	inc	r1
   01D6 87 05              1214 	mov	ar5,@r1
   01D8 19                 1215 	dec	r1
   01D9 19                 1216 	dec	r1
   01DA E5*0B              1217 	mov	a,_SetupCommand_i_1_21
   01DC 2B                 1218 	add	a,r3
   01DD FB                 1219 	mov	r3,a
   01DE E5*0C              1220 	mov	a,(_SetupCommand_i_1_21 + 1)
   01E0 3C                 1221 	addc	a,r4
   01E1 FC                 1222 	mov	r4,a
   01E2 8B 82              1223 	mov	dpl,r3
   01E4 8C 83              1224 	mov	dph,r4
   01E6 8D F0              1225 	mov	b,r5
   01E8 12s00r00           1226 	lcall	__gptrget
   01EB 60 53              1227 	jz	00119$
                           1228 ;	convert_serial.c:290: EP0BUF[2*i+2] = USB_strings[SETUPDAT[2]][i];
   01ED E5*0B              1229 	mov	a,_SetupCommand_i_1_21
   01EF 25 E0              1230 	add	a,acc
   01F1 FD                 1231 	mov	r5,a
   01F2 24 02              1232 	add	a,#0x02
   01F4 24 40              1233 	add	a,#_EP0BUF
   01F6 FB                 1234 	mov	r3,a
   01F7 E4                 1235 	clr	a
   01F8 34 E7              1236 	addc	a,#(_EP0BUF >> 8)
   01FA FC                 1237 	mov	r4,a
   01FB 90 E6 BA           1238 	mov	dptr,#(_SETUPDAT + 0x0002)
   01FE E0                 1239 	movx	a,@dptr
   01FF 75 F0 03           1240 	mov	b,#0x03
   0202 A4                 1241 	mul	ab
   0203 24r02              1242 	add	a,#_USB_strings
   0205 F9                 1243 	mov	r1,a
   0206 87 02              1244 	mov	ar2,@r1
   0208 09                 1245 	inc	r1
   0209 87 06              1246 	mov	ar6,@r1
   020B 09                 1247 	inc	r1
   020C 87 07              1248 	mov	ar7,@r1
   020E 19                 1249 	dec	r1
   020F 19                 1250 	dec	r1
   0210 E5*0B              1251 	mov	a,_SetupCommand_i_1_21
   0212 2A                 1252 	add	a,r2
   0213 FA                 1253 	mov	r2,a
   0214 E5*0C              1254 	mov	a,(_SetupCommand_i_1_21 + 1)
   0216 3E                 1255 	addc	a,r6
   0217 FE                 1256 	mov	r6,a
   0218 8A 82              1257 	mov	dpl,r2
   021A 8E 83              1258 	mov	dph,r6
   021C 8F F0              1259 	mov	b,r7
   021E 12s00r00           1260 	lcall	__gptrget
   0221 FA                 1261 	mov	r2,a
   0222 8B 82              1262 	mov	dpl,r3
   0224 8C 83              1263 	mov	dph,r4
   0226 F0                 1264 	movx	@dptr,a
                           1265 ;	convert_serial.c:291: EP0BUF[2*i+3] = '\0';
   0227 74 03              1266 	mov	a,#0x03
   0229 2D                 1267 	add	a,r5
   022A 24 40              1268 	add	a,#_EP0BUF
   022C F5 82              1269 	mov	dpl,a
   022E E4                 1270 	clr	a
   022F 34 E7              1271 	addc	a,#(_EP0BUF >> 8)
   0231 F5 83              1272 	mov	dph,a
   0233 E4                 1273 	clr	a
   0234 F0                 1274 	movx	@dptr,a
                           1275 ;	convert_serial.c:288: for (i=0; i<31; i++) {
   0235 05*0B              1276 	inc	_SetupCommand_i_1_21
   0237 E4                 1277 	clr	a
   0238 B5*0B 02           1278 	cjne	a,_SetupCommand_i_1_21,00236$
   023B 05*0C              1279 	inc	(_SetupCommand_i_1_21 + 1)
   023D                    1280 00236$:
   023D 02s01rB8           1281 	ljmp	00116$
   0240                    1282 00119$:
                           1283 ;	convert_serial.c:293: EP0BUF[0] = 2*i+2;
   0240 E5*0B              1284 	mov	a,_SetupCommand_i_1_21
   0242 25 E0              1285 	add	a,acc
   0244 FE                 1286 	mov	r6,a
   0245 0E                 1287 	inc	r6
   0246 0E                 1288 	inc	r6
   0247 90 E7 40           1289 	mov	dptr,#_EP0BUF
   024A EE                 1290 	mov	a,r6
   024B F0                 1291 	movx	@dptr,a
                           1292 ;	convert_serial.c:294: EP0BUF[1] = STRING_DSCR;
   024C 90 E7 41           1293 	mov	dptr,#(_EP0BUF + 0x0001)
   024F 74 03              1294 	mov	a,#0x03
   0251 F0                 1295 	movx	@dptr,a
                           1296 ;	convert_serial.c:295: SYNCDELAY; EP0BCH = 0;
   0252 00                 1297 	nop 
   0253 00                 1298 	nop 
   0254 00                 1299 	nop 
   0255 00                 1300 	nop 
   0256 90 E6 8A           1301 	mov	dptr,#_EP0BCH
   0259 E4                 1302 	clr	a
   025A F0                 1303 	movx	@dptr,a
                           1304 ;	convert_serial.c:296: SYNCDELAY; EP0BCL = 2*i+2;
   025B 00                 1305 	nop 
   025C 00                 1306 	nop 
   025D 00                 1307 	nop 
   025E 00                 1308 	nop 
   025F 90 E6 8B           1309 	mov	dptr,#_EP0BCL
   0262 EE                 1310 	mov	a,r6
   0263 F0                 1311 	movx	@dptr,a
                           1312 ;	convert_serial.c:298: break;
   0264 02s04rE5           1313 	ljmp	00164$
                           1314 ;	convert_serial.c:299: default:            // Invalid request
   0267                    1315 00123$:
                           1316 ;	convert_serial.c:300: EZUSB_STALL_EP0();
   0267 90 E6 A0           1317 	mov	dptr,#_EP0CS
   026A E0                 1318 	movx	a,@dptr
   026B FF                 1319 	mov	r7,a
   026C 44 01              1320 	orl	a,#0x01
   026E F0                 1321 	movx	@dptr,a
                           1322 ;	convert_serial.c:302: break;
   026F 02s04rE5           1323 	ljmp	00164$
                           1324 ;	convert_serial.c:303: case SC_GET_INTERFACE:
   0272                    1325 00125$:
                           1326 ;	convert_serial.c:304: interface = SETUPDAT[4];
   0272 90 E6 BC           1327 	mov	dptr,#(_SETUPDAT + 0x0004)
   0275 E0                 1328 	movx	a,@dptr
   0276 FE                 1329 	mov	r6,a
   0277 7F 00              1330 	mov	r7,#0x00
                           1331 ;	convert_serial.c:305: if (interface < NUM_INTERFACES) {
   0279 C3                 1332 	clr	c
   027A EE                 1333 	mov	a,r6
   027B 94 01              1334 	subb	a,#0x01
   027D EF                 1335 	mov	a,r7
   027E 64 80              1336 	xrl	a,#0x80
   0280 94 80              1337 	subb	a,#0x80
   0282 40 03              1338 	jc	00237$
   0284 02s04rE5           1339 	ljmp	00164$
   0287                    1340 00237$:
                           1341 ;	convert_serial.c:306: EP0BUF[0] = InterfaceSetting[interface];
   0287 EE                 1342 	mov	a,r6
   0288 24r01              1343 	add	a,#_InterfaceSetting
   028A F9                 1344 	mov	r1,a
   028B 87 05              1345 	mov	ar5,@r1
   028D 90 E7 40           1346 	mov	dptr,#_EP0BUF
   0290 ED                 1347 	mov	a,r5
   0291 F0                 1348 	movx	@dptr,a
                           1349 ;	convert_serial.c:307: EP0BCH = 0;
   0292 90 E6 8A           1350 	mov	dptr,#_EP0BCH
   0295 E4                 1351 	clr	a
   0296 F0                 1352 	movx	@dptr,a
                           1353 ;	convert_serial.c:308: EP0BCL = 1;
   0297 90 E6 8B           1354 	mov	dptr,#_EP0BCL
   029A 74 01              1355 	mov	a,#0x01
   029C F0                 1356 	movx	@dptr,a
                           1357 ;	convert_serial.c:310: break;
   029D 02s04rE5           1358 	ljmp	00164$
                           1359 ;	convert_serial.c:311: case SC_SET_INTERFACE:
   02A0                    1360 00128$:
                           1361 ;	convert_serial.c:312: interface = SETUPDAT[4];
   02A0 90 E6 BC           1362 	mov	dptr,#(_SETUPDAT + 0x0004)
   02A3 E0                 1363 	movx	a,@dptr
   02A4 FD                 1364 	mov	r5,a
   02A5 FE                 1365 	mov	r6,a
   02A6 7F 00              1366 	mov	r7,#0x00
                           1367 ;	convert_serial.c:313: if (interface < NUM_INTERFACES) {
   02A8 C3                 1368 	clr	c
   02A9 EE                 1369 	mov	a,r6
   02AA 94 01              1370 	subb	a,#0x01
   02AC EF                 1371 	mov	a,r7
   02AD 64 80              1372 	xrl	a,#0x80
   02AF 94 80              1373 	subb	a,#0x80
   02B1 40 03              1374 	jc	00238$
   02B3 02s04rE5           1375 	ljmp	00164$
   02B6                    1376 00238$:
                           1377 ;	convert_serial.c:314: InterfaceSetting[interface] = SETUPDAT[2];
   02B6 EE                 1378 	mov	a,r6
   02B7 24r01              1379 	add	a,#_InterfaceSetting
   02B9 F9                 1380 	mov	r1,a
   02BA 90 E6 BA           1381 	mov	dptr,#(_SETUPDAT + 0x0002)
   02BD E0                 1382 	movx	a,@dptr
   02BE FF                 1383 	mov	r7,a
   02BF F7                 1384 	mov	@r1,a
                           1385 ;	convert_serial.c:316: break;
   02C0 02s04rE5           1386 	ljmp	00164$
                           1387 ;	convert_serial.c:317: case SC_SET_CONFIGURATION:
   02C3                    1388 00131$:
                           1389 ;	convert_serial.c:318: Configuration = SETUPDAT[2];
   02C3 90 E6 BA           1390 	mov	dptr,#(_SETUPDAT + 0x0002)
   02C6 E0                 1391 	movx	a,@dptr
   02C7 F5*00              1392 	mov	_Configuration,a
                           1393 ;	convert_serial.c:319: break;
   02C9 02s04rE5           1394 	ljmp	00164$
                           1395 ;	convert_serial.c:320: case SC_GET_CONFIGURATION:
   02CC                    1396 00132$:
                           1397 ;	convert_serial.c:321: EP0BUF[0] = Configuration;
   02CC 90 E7 40           1398 	mov	dptr,#_EP0BUF
   02CF E5*00              1399 	mov	a,_Configuration
   02D1 F0                 1400 	movx	@dptr,a
                           1401 ;	convert_serial.c:322: EP0BCH = 0;
   02D2 90 E6 8A           1402 	mov	dptr,#_EP0BCH
   02D5 E4                 1403 	clr	a
   02D6 F0                 1404 	movx	@dptr,a
                           1405 ;	convert_serial.c:323: EP0BCL = 1;
   02D7 90 E6 8B           1406 	mov	dptr,#_EP0BCL
   02DA 74 01              1407 	mov	a,#0x01
   02DC F0                 1408 	movx	@dptr,a
                           1409 ;	convert_serial.c:324: break;
   02DD 02s04rE5           1410 	ljmp	00164$
                           1411 ;	convert_serial.c:325: case SC_GET_STATUS:
   02E0                    1412 00133$:
                           1413 ;	convert_serial.c:326: switch(SETUPDAT[0])
   02E0 90 E6 B8           1414 	mov	dptr,#_SETUPDAT
   02E3 E0                 1415 	movx	a,@dptr
   02E4 FF                 1416 	mov	r7,a
   02E5 BF 80 02           1417 	cjne	r7,#0x80,00239$
   02E8 80 0D              1418 	sjmp	00134$
   02EA                    1419 00239$:
   02EA BF 81 02           1420 	cjne	r7,#0x81,00240$
   02ED 80 2D              1421 	sjmp	00135$
   02EF                    1422 00240$:
   02EF BF 82 02           1423 	cjne	r7,#0x82,00241$
   02F2 80 3E              1424 	sjmp	00136$
   02F4                    1425 00241$:
   02F4 02s03r77           1426 	ljmp	00137$
                           1427 ;	convert_serial.c:328: case GS_DEVICE:
   02F7                    1428 00134$:
                           1429 ;	convert_serial.c:329: EP0BUF[0] = ((BYTE)Rwuen << 1) | (BYTE)Selfpwr;
   02F7 A2*01              1430 	mov	c,_Rwuen
   02F9 E4                 1431 	clr	a
   02FA 33                 1432 	rlc	a
   02FB 25 E0              1433 	add	a,acc
   02FD FF                 1434 	mov	r7,a
   02FE A2*02              1435 	mov	c,_Selfpwr
   0300 E4                 1436 	clr	a
   0301 33                 1437 	rlc	a
   0302 FE                 1438 	mov	r6,a
   0303 42 07              1439 	orl	ar7,a
   0305 90 E7 40           1440 	mov	dptr,#_EP0BUF
   0308 EF                 1441 	mov	a,r7
   0309 F0                 1442 	movx	@dptr,a
                           1443 ;	convert_serial.c:330: EP0BUF[1] = 0;
   030A 90 E7 41           1444 	mov	dptr,#(_EP0BUF + 0x0001)
                           1445 ;	convert_serial.c:331: EP0BCH = 0;
   030D E4                 1446 	clr	a
   030E F0                 1447 	movx	@dptr,a
   030F 90 E6 8A           1448 	mov	dptr,#_EP0BCH
   0312 F0                 1449 	movx	@dptr,a
                           1450 ;	convert_serial.c:332: EP0BCL = 2;
   0313 90 E6 8B           1451 	mov	dptr,#_EP0BCL
   0316 74 02              1452 	mov	a,#0x02
   0318 F0                 1453 	movx	@dptr,a
                           1454 ;	convert_serial.c:333: break;
   0319 02s04rE5           1455 	ljmp	00164$
                           1456 ;	convert_serial.c:334: case GS_INTERFACE:
   031C                    1457 00135$:
                           1458 ;	convert_serial.c:335: EP0BUF[0] = 0;
   031C 90 E7 40           1459 	mov	dptr,#_EP0BUF
                           1460 ;	convert_serial.c:336: EP0BUF[1] = 0;
                           1461 ;	convert_serial.c:337: EP0BCH = 0;
   031F E4                 1462 	clr	a
   0320 F0                 1463 	movx	@dptr,a
   0321 90 E7 41           1464 	mov	dptr,#(_EP0BUF + 0x0001)
   0324 F0                 1465 	movx	@dptr,a
   0325 90 E6 8A           1466 	mov	dptr,#_EP0BCH
   0328 F0                 1467 	movx	@dptr,a
                           1468 ;	convert_serial.c:338: EP0BCL = 2;
   0329 90 E6 8B           1469 	mov	dptr,#_EP0BCL
   032C 74 02              1470 	mov	a,#0x02
   032E F0                 1471 	movx	@dptr,a
                           1472 ;	convert_serial.c:339: break;
   032F 02s04rE5           1473 	ljmp	00164$
                           1474 ;	convert_serial.c:340: case GS_ENDPOINT:
   0332                    1475 00136$:
                           1476 ;	convert_serial.c:341: EP0BUF[0] = *(BYTE xdata *) epcs(SETUPDAT[4]) & bmEPSTALL;
   0332 90 E6 BC           1477 	mov	dptr,#(_SETUPDAT + 0x0004)
   0335 E0                 1478 	movx	a,@dptr
   0336 FF                 1479 	mov	r7,a
   0337 53 07 7E           1480 	anl	ar7,#0x7E
   033A 90 E6 BC           1481 	mov	dptr,#(_SETUPDAT + 0x0004)
   033D E0                 1482 	movx	a,@dptr
   033E FE                 1483 	mov	r6,a
   033F C3                 1484 	clr	c
   0340 74 80              1485 	mov	a,#0x80
   0342 9E                 1486 	subb	a,r6
   0343 E4                 1487 	clr	a
   0344 33                 1488 	rlc	a
   0345 4F                 1489 	orl	a,r7
   0346 90s00r00           1490 	mov	dptr,#_EPCS_Offset_Lookup_Table
   0349 93                 1491 	movc	a,@a+dptr
   034A FF                 1492 	mov	r7,a
   034B 33                 1493 	rlc	a
   034C 95 E0              1494 	subb	a,acc
   034E FE                 1495 	mov	r6,a
   034F 74 A1              1496 	mov	a,#0xA1
   0351 2F                 1497 	add	a,r7
   0352 FF                 1498 	mov	r7,a
   0353 74 E6              1499 	mov	a,#0xE6
   0355 3E                 1500 	addc	a,r6
   0356 FE                 1501 	mov	r6,a
   0357 8F 82              1502 	mov	dpl,r7
   0359 8E 83              1503 	mov	dph,r6
   035B E0                 1504 	movx	a,@dptr
   035C FF                 1505 	mov	r7,a
   035D 53 07 01           1506 	anl	ar7,#0x01
   0360 90 E7 40           1507 	mov	dptr,#_EP0BUF
   0363 EF                 1508 	mov	a,r7
   0364 F0                 1509 	movx	@dptr,a
                           1510 ;	convert_serial.c:342: EP0BUF[1] = 0;
   0365 90 E7 41           1511 	mov	dptr,#(_EP0BUF + 0x0001)
                           1512 ;	convert_serial.c:343: EP0BCH = 0;
   0368 E4                 1513 	clr	a
   0369 F0                 1514 	movx	@dptr,a
   036A 90 E6 8A           1515 	mov	dptr,#_EP0BCH
   036D F0                 1516 	movx	@dptr,a
                           1517 ;	convert_serial.c:344: EP0BCL = 2;
   036E 90 E6 8B           1518 	mov	dptr,#_EP0BCL
   0371 74 02              1519 	mov	a,#0x02
   0373 F0                 1520 	movx	@dptr,a
                           1521 ;	convert_serial.c:345: break;
   0374 02s04rE5           1522 	ljmp	00164$
                           1523 ;	convert_serial.c:346: default:            // Invalid Command
   0377                    1524 00137$:
                           1525 ;	convert_serial.c:347: EZUSB_STALL_EP0();
   0377 90 E6 A0           1526 	mov	dptr,#_EP0CS
   037A E0                 1527 	movx	a,@dptr
   037B FF                 1528 	mov	r7,a
   037C 44 01              1529 	orl	a,#0x01
   037E F0                 1530 	movx	@dptr,a
                           1531 ;	convert_serial.c:349: break;
   037F 02s04rE5           1532 	ljmp	00164$
                           1533 ;	convert_serial.c:350: case SC_CLEAR_FEATURE:
   0382                    1534 00139$:
                           1535 ;	convert_serial.c:351: switch(SETUPDAT[0])
   0382 90 E6 B8           1536 	mov	dptr,#_SETUPDAT
   0385 E0                 1537 	movx	a,@dptr
   0386 FF                 1538 	mov	r7,a
   0387 60 08              1539 	jz	00140$
   0389 BF 02 02           1540 	cjne	r7,#0x02,00243$
   038C 80 1B              1541 	sjmp	00144$
   038E                    1542 00243$:
   038E 02s04rE5           1543 	ljmp	00164$
                           1544 ;	convert_serial.c:353: case FT_DEVICE:
   0391                    1545 00140$:
                           1546 ;	convert_serial.c:354: if(SETUPDAT[2] == 1)
   0391 90 E6 BA           1547 	mov	dptr,#(_SETUPDAT + 0x0002)
   0394 E0                 1548 	movx	a,@dptr
   0395 FF                 1549 	mov	r7,a
   0396 BF 01 05           1550 	cjne	r7,#0x01,00142$
                           1551 ;	convert_serial.c:355: Rwuen = FALSE;       // Disable Remote Wakeup
   0399 C2*01              1552 	clr	_Rwuen
   039B 02s04rE5           1553 	ljmp	00164$
   039E                    1554 00142$:
                           1555 ;	convert_serial.c:357: EZUSB_STALL_EP0();
   039E 90 E6 A0           1556 	mov	dptr,#_EP0CS
   03A1 E0                 1557 	movx	a,@dptr
   03A2 FF                 1558 	mov	r7,a
   03A3 44 01              1559 	orl	a,#0x01
   03A5 F0                 1560 	movx	@dptr,a
                           1561 ;	convert_serial.c:358: break;
   03A6 02s04rE5           1562 	ljmp	00164$
                           1563 ;	convert_serial.c:359: case FT_ENDPOINT:
   03A9                    1564 00144$:
                           1565 ;	convert_serial.c:360: if(SETUPDAT[2] == 0)
   03A9 90 E6 BA           1566 	mov	dptr,#(_SETUPDAT + 0x0002)
   03AC E0                 1567 	movx	a,@dptr
   03AD 60 03              1568 	jz	00246$
   03AF 02s04r2E           1569 	ljmp	00146$
   03B2                    1570 00246$:
                           1571 ;	convert_serial.c:362: *(BYTE xdata *) epcs(SETUPDAT[4]) &= ~bmEPSTALL;
   03B2 90 E6 BC           1572 	mov	dptr,#(_SETUPDAT + 0x0004)
   03B5 E0                 1573 	movx	a,@dptr
   03B6 FF                 1574 	mov	r7,a
   03B7 53 07 7E           1575 	anl	ar7,#0x7E
   03BA 90 E6 BC           1576 	mov	dptr,#(_SETUPDAT + 0x0004)
   03BD E0                 1577 	movx	a,@dptr
   03BE FE                 1578 	mov	r6,a
   03BF C3                 1579 	clr	c
   03C0 74 80              1580 	mov	a,#0x80
   03C2 9E                 1581 	subb	a,r6
   03C3 E4                 1582 	clr	a
   03C4 33                 1583 	rlc	a
   03C5 4F                 1584 	orl	a,r7
   03C6 90s00r00           1585 	mov	dptr,#_EPCS_Offset_Lookup_Table
   03C9 93                 1586 	movc	a,@a+dptr
   03CA FF                 1587 	mov	r7,a
   03CB 33                 1588 	rlc	a
   03CC 95 E0              1589 	subb	a,acc
   03CE FE                 1590 	mov	r6,a
   03CF 74 A1              1591 	mov	a,#0xA1
   03D1 2F                 1592 	add	a,r7
   03D2 FF                 1593 	mov	r7,a
   03D3 74 E6              1594 	mov	a,#0xE6
   03D5 3E                 1595 	addc	a,r6
   03D6 FE                 1596 	mov	r6,a
   03D7 90 E6 BC           1597 	mov	dptr,#(_SETUPDAT + 0x0004)
   03DA E0                 1598 	movx	a,@dptr
   03DB FD                 1599 	mov	r5,a
   03DC 53 05 7E           1600 	anl	ar5,#0x7E
   03DF 90 E6 BC           1601 	mov	dptr,#(_SETUPDAT + 0x0004)
   03E2 E0                 1602 	movx	a,@dptr
   03E3 FC                 1603 	mov	r4,a
   03E4 C3                 1604 	clr	c
   03E5 74 80              1605 	mov	a,#0x80
   03E7 9C                 1606 	subb	a,r4
   03E8 E4                 1607 	clr	a
   03E9 33                 1608 	rlc	a
   03EA 4D                 1609 	orl	a,r5
   03EB 90s00r00           1610 	mov	dptr,#_EPCS_Offset_Lookup_Table
   03EE 93                 1611 	movc	a,@a+dptr
   03EF FD                 1612 	mov	r5,a
   03F0 33                 1613 	rlc	a
   03F1 95 E0              1614 	subb	a,acc
   03F3 FC                 1615 	mov	r4,a
   03F4 74 A1              1616 	mov	a,#0xA1
   03F6 2D                 1617 	add	a,r5
   03F7 FD                 1618 	mov	r5,a
   03F8 74 E6              1619 	mov	a,#0xE6
   03FA 3C                 1620 	addc	a,r4
   03FB FC                 1621 	mov	r4,a
   03FC 8D 82              1622 	mov	dpl,r5
   03FE 8C 83              1623 	mov	dph,r4
   0400 E0                 1624 	movx	a,@dptr
   0401 FD                 1625 	mov	r5,a
   0402 53 05 FE           1626 	anl	ar5,#0xFE
   0405 8F 82              1627 	mov	dpl,r7
   0407 8E 83              1628 	mov	dph,r6
   0409 ED                 1629 	mov	a,r5
   040A F0                 1630 	movx	@dptr,a
                           1631 ;	convert_serial.c:363: EZUSB_RESET_DATA_TOGGLE( SETUPDAT[4] );
   040B 90 E6 BC           1632 	mov	dptr,#(_SETUPDAT + 0x0004)
   040E E0                 1633 	movx	a,@dptr
   040F 54 80              1634 	anl	a,#0x80
   0411 C4                 1635 	swap	a
   0412 23                 1636 	rl	a
   0413 54 1F              1637 	anl	a,#0x1F
   0415 FF                 1638 	mov	r7,a
   0416 90 E6 BC           1639 	mov	dptr,#(_SETUPDAT + 0x0004)
   0419 E0                 1640 	movx	a,@dptr
   041A FE                 1641 	mov	r6,a
   041B 74 0F              1642 	mov	a,#0x0F
   041D 5E                 1643 	anl	a,r6
   041E 90 E6 83           1644 	mov	dptr,#_TOGCTL
   0421 2F                 1645 	add	a,r7
   0422 F0                 1646 	movx	@dptr,a
   0423 90 E6 83           1647 	mov	dptr,#_TOGCTL
   0426 E0                 1648 	movx	a,@dptr
   0427 FF                 1649 	mov	r7,a
   0428 44 20              1650 	orl	a,#0x20
   042A F0                 1651 	movx	@dptr,a
   042B 02s04rE5           1652 	ljmp	00164$
   042E                    1653 00146$:
                           1654 ;	convert_serial.c:366: EZUSB_STALL_EP0();
   042E 90 E6 A0           1655 	mov	dptr,#_EP0CS
   0431 E0                 1656 	movx	a,@dptr
   0432 FF                 1657 	mov	r7,a
   0433 44 01              1658 	orl	a,#0x01
   0435 F0                 1659 	movx	@dptr,a
                           1660 ;	convert_serial.c:369: break;
   0436 02s04rE5           1661 	ljmp	00164$
                           1662 ;	convert_serial.c:370: case SC_SET_FEATURE:
   0439                    1663 00149$:
                           1664 ;	convert_serial.c:371: switch(SETUPDAT[0])
   0439 90 E6 B8           1665 	mov	dptr,#_SETUPDAT
   043C E0                 1666 	movx	a,@dptr
   043D FF                 1667 	mov	r7,a
   043E 60 08              1668 	jz	00150$
   0440 BF 02 02           1669 	cjne	r7,#0x02,00248$
   0443 80 29              1670 	sjmp	00158$
   0445                    1671 00248$:
   0445 02s04rC9           1672 	ljmp	00159$
                           1673 ;	convert_serial.c:373: case FT_DEVICE:
   0448                    1674 00150$:
                           1675 ;	convert_serial.c:374: if((SETUPDAT[2] == 1) && Rwuen_allowed)
   0448 90 E6 BA           1676 	mov	dptr,#(_SETUPDAT + 0x0002)
   044B E0                 1677 	movx	a,@dptr
   044C FF                 1678 	mov	r7,a
   044D BF 01 08           1679 	cjne	r7,#0x01,00155$
   0450 30*00 05           1680 	jnb	_Rwuen_allowed,00155$
                           1681 ;	convert_serial.c:375: Rwuen = TRUE;      // Enable Remote Wakeup
   0453 D2*01              1682 	setb	_Rwuen
   0455 02s04rE5           1683 	ljmp	00164$
   0458                    1684 00155$:
                           1685 ;	convert_serial.c:376: else if(SETUPDAT[2] == 2)
   0458 90 E6 BA           1686 	mov	dptr,#(_SETUPDAT + 0x0002)
   045B E0                 1687 	movx	a,@dptr
   045C FF                 1688 	mov	r7,a
   045D BF 02 03           1689 	cjne	r7,#0x02,00252$
   0460 02s04rE5           1690 	ljmp	00164$
   0463                    1691 00252$:
                           1692 ;	convert_serial.c:386: EZUSB_STALL_EP0();
   0463 90 E6 A0           1693 	mov	dptr,#_EP0CS
   0466 E0                 1694 	movx	a,@dptr
   0467 FF                 1695 	mov	r7,a
   0468 44 01              1696 	orl	a,#0x01
   046A F0                 1697 	movx	@dptr,a
                           1698 ;	convert_serial.c:387: break;
   046B 02s04rE5           1699 	ljmp	00164$
                           1700 ;	convert_serial.c:388: case FT_ENDPOINT:
   046E                    1701 00158$:
                           1702 ;	convert_serial.c:389: *(BYTE xdata *) epcs(SETUPDAT[4]) |= bmEPSTALL;
   046E 90 E6 BC           1703 	mov	dptr,#(_SETUPDAT + 0x0004)
   0471 E0                 1704 	movx	a,@dptr
   0472 FF                 1705 	mov	r7,a
   0473 53 07 7E           1706 	anl	ar7,#0x7E
   0476 90 E6 BC           1707 	mov	dptr,#(_SETUPDAT + 0x0004)
   0479 E0                 1708 	movx	a,@dptr
   047A FE                 1709 	mov	r6,a
   047B C3                 1710 	clr	c
   047C 74 80              1711 	mov	a,#0x80
   047E 9E                 1712 	subb	a,r6
   047F E4                 1713 	clr	a
   0480 33                 1714 	rlc	a
   0481 4F                 1715 	orl	a,r7
   0482 90s00r00           1716 	mov	dptr,#_EPCS_Offset_Lookup_Table
   0485 93                 1717 	movc	a,@a+dptr
   0486 FF                 1718 	mov	r7,a
   0487 33                 1719 	rlc	a
   0488 95 E0              1720 	subb	a,acc
   048A FE                 1721 	mov	r6,a
   048B 74 A1              1722 	mov	a,#0xA1
   048D 2F                 1723 	add	a,r7
   048E FF                 1724 	mov	r7,a
   048F 74 E6              1725 	mov	a,#0xE6
   0491 3E                 1726 	addc	a,r6
   0492 FE                 1727 	mov	r6,a
   0493 90 E6 BC           1728 	mov	dptr,#(_SETUPDAT + 0x0004)
   0496 E0                 1729 	movx	a,@dptr
   0497 FD                 1730 	mov	r5,a
   0498 53 05 7E           1731 	anl	ar5,#0x7E
   049B 90 E6 BC           1732 	mov	dptr,#(_SETUPDAT + 0x0004)
   049E E0                 1733 	movx	a,@dptr
   049F FC                 1734 	mov	r4,a
   04A0 C3                 1735 	clr	c
   04A1 74 80              1736 	mov	a,#0x80
   04A3 9C                 1737 	subb	a,r4
   04A4 E4                 1738 	clr	a
   04A5 33                 1739 	rlc	a
   04A6 4D                 1740 	orl	a,r5
   04A7 90s00r00           1741 	mov	dptr,#_EPCS_Offset_Lookup_Table
   04AA 93                 1742 	movc	a,@a+dptr
   04AB FD                 1743 	mov	r5,a
   04AC 33                 1744 	rlc	a
   04AD 95 E0              1745 	subb	a,acc
   04AF FC                 1746 	mov	r4,a
   04B0 74 A1              1747 	mov	a,#0xA1
   04B2 2D                 1748 	add	a,r5
   04B3 FD                 1749 	mov	r5,a
   04B4 74 E6              1750 	mov	a,#0xE6
   04B6 3C                 1751 	addc	a,r4
   04B7 FC                 1752 	mov	r4,a
   04B8 8D 82              1753 	mov	dpl,r5
   04BA 8C 83              1754 	mov	dph,r4
   04BC E0                 1755 	movx	a,@dptr
   04BD FD                 1756 	mov	r5,a
   04BE 43 05 01           1757 	orl	ar5,#0x01
   04C1 8F 82              1758 	mov	dpl,r7
   04C3 8E 83              1759 	mov	dph,r6
   04C5 ED                 1760 	mov	a,r5
   04C6 F0                 1761 	movx	@dptr,a
                           1762 ;	convert_serial.c:390: break;
                           1763 ;	convert_serial.c:391: default:
   04C7 80 1C              1764 	sjmp	00164$
   04C9                    1765 00159$:
                           1766 ;	convert_serial.c:392: EZUSB_STALL_EP0();
   04C9 90 E6 A0           1767 	mov	dptr,#_EP0CS
   04CC E0                 1768 	movx	a,@dptr
   04CD FF                 1769 	mov	r7,a
   04CE 44 01              1770 	orl	a,#0x01
   04D0 F0                 1771 	movx	@dptr,a
                           1772 ;	convert_serial.c:394: break;
                           1773 ;	convert_serial.c:395: default:                     // *** Invalid Command
   04D1 80 12              1774 	sjmp	00164$
   04D3                    1775 00161$:
                           1776 ;	convert_serial.c:396: EZUSB_STALL_EP0();
   04D3 90 E6 A0           1777 	mov	dptr,#_EP0CS
   04D6 E0                 1778 	movx	a,@dptr
   04D7 FF                 1779 	mov	r7,a
   04D8 44 01              1780 	orl	a,#0x01
   04DA F0                 1781 	movx	@dptr,a
                           1782 ;	convert_serial.c:399: break;
                           1783 ;	convert_serial.c:401: default:
   04DB 80 08              1784 	sjmp	00164$
   04DD                    1785 00163$:
                           1786 ;	convert_serial.c:402: EZUSB_STALL_EP0();
   04DD 90 E6 A0           1787 	mov	dptr,#_EP0CS
   04E0 E0                 1788 	movx	a,@dptr
   04E1 FF                 1789 	mov	r7,a
   04E2 44 01              1790 	orl	a,#0x01
   04E4 F0                 1791 	movx	@dptr,a
                           1792 ;	convert_serial.c:404: }
   04E5                    1793 00164$:
                           1794 ;	convert_serial.c:407: EP0CS |= bmHSNAK;
   04E5 90 E6 A0           1795 	mov	dptr,#_EP0CS
   04E8 E0                 1796 	movx	a,@dptr
   04E9 44 80              1797 	orl	a,#0x80
   04EB F0                 1798 	movx	@dptr,a
   04EC 22                 1799 	ret
                           1800 ;------------------------------------------------------------
                           1801 ;Allocation info for local variables in function 'USB_isr'
                           1802 ;------------------------------------------------------------
                           1803 ;	convert_serial.c:410: static void USB_isr(void) __interrupt 8
                           1804 ;	-----------------------------------------
                           1805 ;	 function USB_isr
                           1806 ;	-----------------------------------------
   04ED                    1807 _USB_isr:
   04ED C0*00              1808 	push	bits
   04EF C0 E0              1809 	push	acc
   04F1 C0 F0              1810 	push	b
   04F3 C0 82              1811 	push	dpl
   04F5 C0 83              1812 	push	dph
   04F7 C0 07              1813 	push	(0+7)
   04F9 C0 06              1814 	push	(0+6)
   04FB C0 05              1815 	push	(0+5)
   04FD C0 04              1816 	push	(0+4)
   04FF C0 03              1817 	push	(0+3)
   0501 C0 02              1818 	push	(0+2)
   0503 C0 01              1819 	push	(0+1)
   0505 C0 00              1820 	push	(0+0)
   0507 C0 D0              1821 	push	psw
   0509 75 D0 00           1822 	mov	psw,#0x00
                           1823 ;	convert_serial.c:413: EXIF &= ~0x10;
   050C AF 91              1824 	mov	r7,_EXIF
   050E 74 EF              1825 	mov	a,#0xEF
   0510 5F                 1826 	anl	a,r7
   0511 F5 91              1827 	mov	_EXIF,a
                           1828 ;	convert_serial.c:416: USBIRQ = 0x01;
   0513 90 E6 5D           1829 	mov	dptr,#_USBIRQ
   0516 74 01              1830 	mov	a,#0x01
   0518 F0                 1831 	movx	@dptr,a
                           1832 ;	convert_serial.c:418: SetupCommand();
   0519 12s00r4B           1833 	lcall	_SetupCommand
   051C D0 D0              1834 	pop	psw
   051E D0 00              1835 	pop	(0+0)
   0520 D0 01              1836 	pop	(0+1)
   0522 D0 02              1837 	pop	(0+2)
   0524 D0 03              1838 	pop	(0+3)
   0526 D0 04              1839 	pop	(0+4)
   0528 D0 05              1840 	pop	(0+5)
   052A D0 06              1841 	pop	(0+6)
   052C D0 07              1842 	pop	(0+7)
   052E D0 83              1843 	pop	dph
   0530 D0 82              1844 	pop	dpl
   0532 D0 F0              1845 	pop	b
   0534 D0 E0              1846 	pop	acc
   0536 D0*00              1847 	pop	bits
   0538 32                 1848 	reti
                           1849 ;------------------------------------------------------------
                           1850 ;Allocation info for local variables in function 'Initialize'
                           1851 ;------------------------------------------------------------
                           1852 ;	convert_serial.c:425: static void Initialize(void)
                           1853 ;	-----------------------------------------
                           1854 ;	 function Initialize
                           1855 ;	-----------------------------------------
   0539                    1856 _Initialize:
                           1857 ;	convert_serial.c:435: SYNCDELAY;
   0539 00                 1858 	nop 
   053A 00                 1859 	nop 
   053B 00                 1860 	nop 
   053C 00                 1861 	nop 
                           1862 ;	convert_serial.c:437: REVCTL=0x03;  // See TRM...
   053D 90 E6 0B           1863 	mov	dptr,#_REVCTL
   0540 74 03              1864 	mov	a,#0x03
   0542 F0                 1865 	movx	@dptr,a
                           1866 ;	convert_serial.c:438: SYNCDELAY;
   0543 00                 1867 	nop 
   0544 00                 1868 	nop 
   0545 00                 1869 	nop 
   0546 00                 1870 	nop 
                           1871 ;	convert_serial.c:443: EP1OUTCFG=0xa0;
   0547 90 E6 10           1872 	mov	dptr,#_EP1OUTCFG
   054A 74 A0              1873 	mov	a,#0xA0
   054C F0                 1874 	movx	@dptr,a
                           1875 ;	convert_serial.c:444: EP1INCFG=0xa0;
   054D 90 E6 11           1876 	mov	dptr,#_EP1INCFG
   0550 74 A0              1877 	mov	a,#0xA0
   0552 F0                 1878 	movx	@dptr,a
                           1879 ;	convert_serial.c:445: EP2CFG=0;
   0553 90 E6 12           1880 	mov	dptr,#_EP2CFG
                           1881 ;	convert_serial.c:446: EP4CFG=0;
                           1882 ;	convert_serial.c:447: EP6CFG=0;
                           1883 ;	convert_serial.c:448: EP8CFG=0;
   0556 E4                 1884 	clr	a
   0557 F0                 1885 	movx	@dptr,a
   0558 90 E6 13           1886 	mov	dptr,#_EP4CFG
   055B F0                 1887 	movx	@dptr,a
   055C 90 E6 14           1888 	mov	dptr,#_EP6CFG
   055F F0                 1889 	movx	@dptr,a
   0560 90 E6 15           1890 	mov	dptr,#_EP8CFG
   0563 F0                 1891 	movx	@dptr,a
                           1892 ;	convert_serial.c:450: SYNCDELAY;
   0564 00                 1893 	nop 
   0565 00                 1894 	nop 
   0566 00                 1895 	nop 
   0567 00                 1896 	nop 
                           1897 ;	convert_serial.c:451: EP1OUTBC=0xff; // Arm endpoint 1 for OUT (host->device) transfers
   0568 90 E6 8D           1898 	mov	dptr,#_EP1OUTBC
   056B 74 FF              1899 	mov	a,#0xFF
   056D F0                 1900 	movx	@dptr,a
                           1901 ;	convert_serial.c:463: IE = 0x80;
   056E 75 A8 80           1902 	mov	_IE,#0x80
                           1903 ;	convert_serial.c:464: EIE = 0x01;
   0571 75 E8 01           1904 	mov	_EIE,#0x01
                           1905 ;	convert_serial.c:467: USBIE = 0x01;
   0574 90 E6 5C           1906 	mov	dptr,#_USBIE
   0577 74 01              1907 	mov	a,#0x01
   0579 F0                 1908 	movx	@dptr,a
   057A 22                 1909 	ret
                           1910 ;------------------------------------------------------------
                           1911 ;Allocation info for local variables in function 'ProcessXmitData'
                           1912 ;------------------------------------------------------------
                           1913 ;	convert_serial.c:501: static void ProcessXmitData(void)
                           1914 ;	-----------------------------------------
                           1915 ;	 function ProcessXmitData
                           1916 ;	-----------------------------------------
   057B                    1917 _ProcessXmitData:
                           1918 ;	convert_serial.c:504: TCON &= ~0x30;
   057B AF 88              1919 	mov	r7,_TCON
   057D 74 CF              1920 	mov	a,#0xCF
   057F 5F                 1921 	anl	a,r7
   0580 F5 88              1922 	mov	_TCON,a
                           1923 ;	convert_serial.c:508: EP1INBUF[0] = FTDI_RS0_CTS | FTDI_RS0_DSR | 1;
   0582 90 E7 C0           1924 	mov	dptr,#_EP1INBUF
   0585 74 31              1925 	mov	a,#0x31
   0587 F0                 1926 	movx	@dptr,a
                           1927 ;	convert_serial.c:509: EP1INBUF[1] = FTDI_RS_DR;
   0588 90 E7 C1           1928 	mov	dptr,#(_EP1INBUF + 0x0001)
   058B 74 01              1929 	mov	a,#0x01
   058D F0                 1930 	movx	@dptr,a
                           1931 ;	convert_serial.c:512: SYNCDELAY;
   058E 00                 1932 	nop 
   058F 00                 1933 	nop 
   0590 00                 1934 	nop 
   0591 00                 1935 	nop 
                           1936 ;	convert_serial.c:513: EP1INBC = bytes_waiting_for_xmit + 2;
   0592 AF*0D              1937 	mov	r7,_bytes_waiting_for_xmit
   0594 90 E6 8F           1938 	mov	dptr,#_EP1INBC
   0597 74 02              1939 	mov	a,#0x02
   0599 2F                 1940 	add	a,r7
   059A F0                 1941 	movx	@dptr,a
                           1942 ;	convert_serial.c:515: bytes_waiting_for_xmit = 0;
   059B E4                 1943 	clr	a
   059C F5*0D              1944 	mov	_bytes_waiting_for_xmit,a
   059E F5*0E              1945 	mov	(_bytes_waiting_for_xmit + 1),a
   05A0 22                 1946 	ret
                           1947 ;------------------------------------------------------------
                           1948 ;Allocation info for local variables in function 'putchar'
                           1949 ;------------------------------------------------------------
                           1950 ;c                         Allocated to registers r7 
                           1951 ;dest                      Allocated to registers r5 r6 
                           1952 ;------------------------------------------------------------
                           1953 ;	convert_serial.c:519: static void putchar(char c)
                           1954 ;	-----------------------------------------
                           1955 ;	 function putchar
                           1956 ;	-----------------------------------------
   05A1                    1957 _putchar:
   05A1 AF 82              1958 	mov	r7,dpl
                           1959 ;	convert_serial.c:521: xdata unsigned char *dest=EP1INBUF + bytes_waiting_for_xmit + 2;
   05A3 E5*0D              1960 	mov	a,_bytes_waiting_for_xmit
   05A5 24 C0              1961 	add	a,#_EP1INBUF
   05A7 FD                 1962 	mov	r5,a
   05A8 E5*0E              1963 	mov	a,(_bytes_waiting_for_xmit + 1)
   05AA 34 E7              1964 	addc	a,#(_EP1INBUF >> 8)
   05AC FE                 1965 	mov	r6,a
   05AD 74 02              1966 	mov	a,#0x02
   05AF 2D                 1967 	add	a,r5
   05B0 FD                 1968 	mov	r5,a
   05B1 E4                 1969 	clr	a
   05B2 3E                 1970 	addc	a,r6
   05B3 FE                 1971 	mov	r6,a
                           1972 ;	convert_serial.c:524: while (EP1INCS & 0x02);
   05B4                    1973 00101$:
   05B4 90 E6 A2           1974 	mov	dptr,#_EP1INCS
   05B7 E0                 1975 	movx	a,@dptr
   05B8 FC                 1976 	mov	r4,a
   05B9 20 E1 F8           1977 	jb	acc.1,00101$
                           1978 ;	convert_serial.c:526: *dest = c;
   05BC 8D 82              1979 	mov	dpl,r5
   05BE 8E 83              1980 	mov	dph,r6
   05C0 EF                 1981 	mov	a,r7
   05C1 F0                 1982 	movx	@dptr,a
                           1983 ;	convert_serial.c:528: if (++bytes_waiting_for_xmit >= 62) ProcessXmitData();
   05C2 05*0D              1984 	inc	_bytes_waiting_for_xmit
   05C4 E4                 1985 	clr	a
   05C5 B5*0D 02           1986 	cjne	a,_bytes_waiting_for_xmit,00122$
   05C8 05*0E              1987 	inc	(_bytes_waiting_for_xmit + 1)
   05CA                    1988 00122$:
   05CA C3                 1989 	clr	c
   05CB E5*0D              1990 	mov	a,_bytes_waiting_for_xmit
   05CD 94 3E              1991 	subb	a,#0x3E
   05CF E5*0E              1992 	mov	a,(_bytes_waiting_for_xmit + 1)
   05D1 94 00              1993 	subb	a,#0x00
   05D3 40 03              1994 	jc	00105$
   05D5 12s05r7B           1995 	lcall	_ProcessXmitData
   05D8                    1996 00105$:
                           1997 ;	convert_serial.c:531: if (bytes_waiting_for_xmit && !(TCON & 0x10)) {
   05D8 E5*0D              1998 	mov	a,_bytes_waiting_for_xmit
   05DA 45*0E              1999 	orl	a,(_bytes_waiting_for_xmit + 1)
   05DC 60 19              2000 	jz	00109$
   05DE E5 88              2001 	mov	a,_TCON
   05E0 20 E4 14           2002 	jb	acc.4,00109$
                           2003 ;	convert_serial.c:532: TH0 = MSB(0xffff - latency_us);
   05E3 74 FF              2004 	mov	a,#0xFF
   05E5 C3                 2005 	clr	c
   05E6 95*0F              2006 	subb	a,_latency_us
   05E8 FE                 2007 	mov	r6,a
   05E9 74 FF              2008 	mov	a,#0xFF
   05EB 95*10              2009 	subb	a,(_latency_us + 1)
   05ED FD                 2010 	mov	r5,a
   05EE 8D 8C              2011 	mov	_TH0,r5
                           2012 ;	convert_serial.c:533: TL0 = LSB(0xffff - latency_us);
   05F0 7F 00              2013 	mov	r7,#0x00
   05F2 8E 8A              2014 	mov	_TL0,r6
                           2015 ;	convert_serial.c:534: TCON |= 0x10;
   05F4 43 88 10           2016 	orl	_TCON,#0x10
   05F7                    2017 00109$:
   05F7 22                 2018 	ret
                           2019 ;------------------------------------------------------------
                           2020 ;Allocation info for local variables in function 'ProcessRecvData'
                           2021 ;------------------------------------------------------------
                           2022 ;src                       Allocated to registers 
                           2023 ;len                       Allocated to registers r6 r7 
                           2024 ;i                         Allocated to registers r2 r3 
                           2025 ;------------------------------------------------------------
                           2026 ;	convert_serial.c:538: static void ProcessRecvData(void)
                           2027 ;	-----------------------------------------
                           2028 ;	 function ProcessRecvData
                           2029 ;	-----------------------------------------
   05F8                    2030 _ProcessRecvData:
                           2031 ;	convert_serial.c:540: xdata const unsigned char *src=EP1OUTBUF;
                           2032 ;	convert_serial.c:541: unsigned int len = EP1OUTBC;
   05F8 90 E6 8D           2033 	mov	dptr,#_EP1OUTBC
   05FB E0                 2034 	movx	a,@dptr
   05FC FE                 2035 	mov	r6,a
   05FD 7F 00              2036 	mov	r7,#0x00
                           2037 ;	convert_serial.c:546: src++; len--;
   05FF 74 01              2038 	mov	a,#0x01
   0601 24 80              2039 	add	a,#_EP1OUTBUF
   0603 FC                 2040 	mov	r4,a
   0604 E4                 2041 	clr	a
   0605 34 E7              2042 	addc	a,#(_EP1OUTBUF >> 8)
   0607 FD                 2043 	mov	r5,a
   0608 1E                 2044 	dec	r6
   0609 BE FF 01           2045 	cjne	r6,#0xFF,00120$
   060C 1F                 2046 	dec	r7
   060D                    2047 00120$:
                           2048 ;	convert_serial.c:548: for(i=0; i<len; i++,src++)
   060D 7A 00              2049 	mov	r2,#0x00
   060F 7B 00              2050 	mov	r3,#0x00
   0611                    2051 00105$:
   0611 C3                 2052 	clr	c
   0612 EA                 2053 	mov	a,r2
   0613 9E                 2054 	subb	a,r6
   0614 EB                 2055 	mov	a,r3
   0615 9F                 2056 	subb	a,r7
   0616 50 60              2057 	jnc	00108$
                           2058 ;	convert_serial.c:550: if(*src>='a' && *src<='z')
   0618 8C 82              2059 	mov	dpl,r4
   061A 8D 83              2060 	mov	dph,r5
   061C E0                 2061 	movx	a,@dptr
   061D F9                 2062 	mov	r1,a
   061E B9 61 00           2063 	cjne	r1,#0x61,00122$
   0621                    2064 00122$:
   0621 40 27              2065 	jc	00102$
   0623 E9                 2066 	mov	a,r1
   0624 24 85              2067 	add	a,#0xff - 0x7A
   0626 40 22              2068 	jc	00102$
                           2069 ;	convert_serial.c:551: {  putchar(*src-'a'+'A');  }
   0628 74 E0              2070 	mov	a,#0xE0
   062A 29                 2071 	add	a,r1
   062B F5 82              2072 	mov	dpl,a
   062D C0 07              2073 	push	ar7
   062F C0 06              2074 	push	ar6
   0631 C0 05              2075 	push	ar5
   0633 C0 04              2076 	push	ar4
   0635 C0 03              2077 	push	ar3
   0637 C0 02              2078 	push	ar2
   0639 12s05rA1           2079 	lcall	_putchar
   063C D0 02              2080 	pop	ar2
   063E D0 03              2081 	pop	ar3
   0640 D0 04              2082 	pop	ar4
   0642 D0 05              2083 	pop	ar5
   0644 D0 06              2084 	pop	ar6
   0646 D0 07              2085 	pop	ar7
   0648 80 22              2086 	sjmp	00107$
   064A                    2087 00102$:
                           2088 ;	convert_serial.c:553: {  putchar(*src);  }
   064A 8C 82              2089 	mov	dpl,r4
   064C 8D 83              2090 	mov	dph,r5
   064E E0                 2091 	movx	a,@dptr
   064F F5 82              2092 	mov	dpl,a
   0651 C0 07              2093 	push	ar7
   0653 C0 06              2094 	push	ar6
   0655 C0 05              2095 	push	ar5
   0657 C0 04              2096 	push	ar4
   0659 C0 03              2097 	push	ar3
   065B C0 02              2098 	push	ar2
   065D 12s05rA1           2099 	lcall	_putchar
   0660 D0 02              2100 	pop	ar2
   0662 D0 03              2101 	pop	ar3
   0664 D0 04              2102 	pop	ar4
   0666 D0 05              2103 	pop	ar5
   0668 D0 06              2104 	pop	ar6
   066A D0 07              2105 	pop	ar7
   066C                    2106 00107$:
                           2107 ;	convert_serial.c:548: for(i=0; i<len; i++,src++)
   066C 0A                 2108 	inc	r2
   066D BA 00 01           2109 	cjne	r2,#0x00,00125$
   0670 0B                 2110 	inc	r3
   0671                    2111 00125$:
   0671 0C                 2112 	inc	r4
   0672 BC 00 9C           2113 	cjne	r4,#0x00,00105$
   0675 0D                 2114 	inc	r5
   0676 80 99              2115 	sjmp	00105$
   0678                    2116 00108$:
                           2117 ;	convert_serial.c:556: EP1OUTBC=0xff; // re-arm endpoint 1 for OUT (host->device) transfers
   0678 90 E6 8D           2118 	mov	dptr,#_EP1OUTBC
   067B 74 FF              2119 	mov	a,#0xFF
   067D F0                 2120 	movx	@dptr,a
                           2121 ;	convert_serial.c:557: SYNCDELAY;
   067E 00                 2122 	nop 
   067F 00                 2123 	nop 
   0680 00                 2124 	nop 
   0681 00                 2125 	nop 
   0682 22                 2126 	ret
                           2127 ;------------------------------------------------------------
                           2128 ;Allocation info for local variables in function 'main'
                           2129 ;------------------------------------------------------------
                           2130 ;	convert_serial.c:561: void main(void)
                           2131 ;	-----------------------------------------
                           2132 ;	 function main
                           2133 ;	-----------------------------------------
   0683                    2134 _main:
                           2135 ;	convert_serial.c:565: Initialize();
   0683 12s05r39           2136 	lcall	_Initialize
                           2137 ;	convert_serial.c:571: CKCO &= ~(0x08);
   0686 AF 8E              2138 	mov	r7,_CKCO
   0688 74 F7              2139 	mov	a,#0xF7
   068A 5F                 2140 	anl	a,r7
   068B F5 8E              2141 	mov	_CKCO,a
                           2142 ;	convert_serial.c:572: TMOD = 0x01;
   068D 75 89 01           2143 	mov	_TMOD,#0x01
                           2144 ;	convert_serial.c:573: TCON &= ~0x30;
   0690 AF 88              2145 	mov	r7,_TCON
   0692 74 CF              2146 	mov	a,#0xCF
   0694 5F                 2147 	anl	a,r7
   0695 F5 88              2148 	mov	_TCON,a
   0697                    2149 00106$:
                           2150 ;	convert_serial.c:578: if(!(EP1OUTCS & bmEPBUSY))
   0697 90 E6 A1           2151 	mov	dptr,#_EP1OUTCS
   069A E0                 2152 	movx	a,@dptr
   069B FF                 2153 	mov	r7,a
   069C 20 E1 03           2154 	jb	acc.1,00102$
                           2155 ;	convert_serial.c:580: ProcessRecvData();
   069F 12s05rF8           2156 	lcall	_ProcessRecvData
   06A2                    2157 00102$:
                           2158 ;	convert_serial.c:584: if((TCON & 0x20))
   06A2 E5 88              2159 	mov	a,_TCON
   06A4 30 E5 F0           2160 	jnb	acc.5,00106$
                           2161 ;	convert_serial.c:586: ProcessXmitData();
   06A7 12s05r7B           2162 	lcall	_ProcessXmitData
   06AA 80 EB              2163 	sjmp	00106$
                           2164 	.area CSEG    (CODE)
                           2165 	.area CONST   (CODE)
   0000                    2166 _EPCS_Offset_Lookup_Table:
   0000 00                 2167 	.db #0x00	;  0
   0001 01                 2168 	.db #0x01	;  1
   0002 02                 2169 	.db #0x02	;  2
   0003 02                 2170 	.db #0x02	;  2
   0004 03                 2171 	.db #0x03	;  3
   0005 03                 2172 	.db #0x03	;  3
   0006 04                 2173 	.db #0x04	;  4
   0007 04                 2174 	.db #0x04	;  4
   0008 05                 2175 	.db #0x05	;  5
   0009 05                 2176 	.db #0x05	;  5
   000A                    2177 __str_0:
   000A 45 4E              2178 	.ascii "EN"
   000C 00                 2179 	.db 0x00
   000D                    2180 __str_1:
   000D 66 72 65 65 73 6F  2181 	.ascii "freesoft.org"
        66 74 2E 6F 72 67
   0019 00                 2182 	.db 0x00
   001A                    2183 __str_2:
   001A 46 58 32 20 63 61  2184 	.ascii "FX2 case converter"
        73 65 20 63 6F 6E
        76 65 72 74 65 72
   002C 00                 2185 	.db 0x00
                           2186 	.area XINIT   (CODE)
                           2187 	.area CABS    (ABS,CODE)
