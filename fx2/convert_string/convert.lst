                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.2.0 #8008 (Jul  6 2012) (MINGW32)
                              4 ; This file was generated Mon Apr 13 07:29:54 2015
                              5 ;--------------------------------------------------------
                              6 	.module convert
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _main
                             13 	.globl _EIP
                             14 	.globl _B
                             15 	.globl _EIE
                             16 	.globl _ACC
                             17 	.globl _EICON
                             18 	.globl _PSW
                             19 	.globl _TH2
                             20 	.globl _TL2
                             21 	.globl _RCAP2H
                             22 	.globl _RCAP2L
                             23 	.globl _T2CON
                             24 	.globl _SBUF1
                             25 	.globl _SCON1
                             26 	.globl _GPIFSGLDATLNOX
                             27 	.globl _GPIFSGLDATLX
                             28 	.globl _GPIFSGLDATH
                             29 	.globl _GPIFTRIG
                             30 	.globl _EP01STAT
                             31 	.globl _IP
                             32 	.globl _OEE
                             33 	.globl _OED
                             34 	.globl _OEC
                             35 	.globl _OEB
                             36 	.globl _OEA
                             37 	.globl _IOE
                             38 	.globl _IOD
                             39 	.globl _AUTOPTRSETUP
                             40 	.globl _EP68FIFOFLGS
                             41 	.globl _EP24FIFOFLGS
                             42 	.globl _EP2468STAT
                             43 	.globl _IE
                             44 	.globl _INT4CLR
                             45 	.globl _INT2CLR
                             46 	.globl _IOC
                             47 	.globl _AUTODAT2
                             48 	.globl _AUTOPTRL2
                             49 	.globl _AUTOPTRH2
                             50 	.globl _AUTODAT1
                             51 	.globl _APTR1L
                             52 	.globl _APTR1H
                             53 	.globl _SBU
                             54 	.globl _SCO
                             55 	.globl _MPA
                             56 	.globl _EXIF
                             57 	.globl _IOB
                             58 	.globl _SPC_
                             59 	.globl _CKCO
                             60 	.globl _TH1
                             61 	.globl _TH0
                             62 	.globl _TL1
                             63 	.globl _TL0
                             64 	.globl _TMOD
                             65 	.globl _TCON
                             66 	.globl _PCON
                             67 	.globl _DPS
                             68 	.globl _DPH1
                             69 	.globl _DPL1
                             70 	.globl _DPH
                             71 	.globl _DPL
                             72 	.globl _SP
                             73 	.globl _IOA
                             74 	.globl _EP8FIFOBUF
                             75 	.globl _EP6FIFOBUF
                             76 	.globl _EP4FIFOBUF
                             77 	.globl _EP2FIFOBUF
                             78 	.globl _EP1INBUF
                             79 	.globl _EP1OUTBUF
                             80 	.globl _EP0BUF
                             81 	.globl _CT4
                             82 	.globl _CT3
                             83 	.globl _CT2
                             84 	.globl _CT1
                             85 	.globl _USBTEST
                             86 	.globl _TESTCFG
                             87 	.globl _DBUG
                             88 	.globl _UDMACRCQUAL
                             89 	.globl _UDMACRCL
                             90 	.globl _UDMACRCH
                             91 	.globl _GPIFHOLDAMOUNT
                             92 	.globl _FLOWSTBHPERIOD
                             93 	.globl _FLOWSTBEDGE
                             94 	.globl _FLOWSTB
                             95 	.globl _FLOWHOLDOFF
                             96 	.globl _FLOWEQ1CTL
                             97 	.globl _FLOWEQ0CTL
                             98 	.globl _FLOWLOGIC
                             99 	.globl _FLOWSTATE
                            100 	.globl _GPIFABORT
                            101 	.globl _GPIFREADYSTAT
                            102 	.globl _GPIFREADYCFG
                            103 	.globl _XGPIFSGLDATLNOX
                            104 	.globl _XGPIFSGLDATLX
                            105 	.globl _XGPIFSGLDATH
                            106 	.globl _EP8GPIFTRIG
                            107 	.globl _EP8GPIFPFSTOP
                            108 	.globl _EP8GPIFFLGSEL
                            109 	.globl _EP6GPIFTRIG
                            110 	.globl _EP6GPIFPFSTOP
                            111 	.globl _EP6GPIFFLGSEL
                            112 	.globl _EP4GPIFTRIG
                            113 	.globl _EP4GPIFPFSTOP
                            114 	.globl _EP4GPIFFLGSEL
                            115 	.globl _EP2GPIFTRIG
                            116 	.globl _EP2GPIFPFSTOP
                            117 	.globl _EP2GPIFFLGSEL
                            118 	.globl _GPIFTCB0
                            119 	.globl _GPIFTCB1
                            120 	.globl _GPIFTCB2
                            121 	.globl _GPIFTCB3
                            122 	.globl _GPIFADRL
                            123 	.globl _GPIFADRH
                            124 	.globl _GPIFCTLCFG
                            125 	.globl _GPIFIDLECTL
                            126 	.globl _GPIFIDLECS
                            127 	.globl _GPIFWFSELECT
                            128 	.globl _SETUPDAT
                            129 	.globl _SUDPTRCTL
                            130 	.globl _SUDPTRL
                            131 	.globl _SUDPTRH
                            132 	.globl _EP8FIFOBCL
                            133 	.globl _EP8FIFOBCH
                            134 	.globl _EP6FIFOBCL
                            135 	.globl _EP6FIFOBCH
                            136 	.globl _EP4FIFOBCL
                            137 	.globl _EP4FIFOBCH
                            138 	.globl _EP2FIFOBCL
                            139 	.globl _EP2FIFOBCH
                            140 	.globl _EP8FIFOFLGS
                            141 	.globl _EP6FIFOFLGS
                            142 	.globl _EP4FIFOFLGS
                            143 	.globl _EP2FIFOFLGS
                            144 	.globl _EP8CS
                            145 	.globl _EP6CS
                            146 	.globl _EP4CS
                            147 	.globl _EP2CS
                            148 	.globl _EP1INCS
                            149 	.globl _EP1OUTCS
                            150 	.globl _EP0CS
                            151 	.globl _EP8BCL
                            152 	.globl _EP8BCH
                            153 	.globl _EP6BCL
                            154 	.globl _EP6BCH
                            155 	.globl _EP4BCL
                            156 	.globl _EP4BCH
                            157 	.globl _EP2BCL
                            158 	.globl _EP2BCH
                            159 	.globl _EP1INBC
                            160 	.globl _EP1OUTBC
                            161 	.globl _EP0BCL
                            162 	.globl _EP0BCH
                            163 	.globl _FNADDR
                            164 	.globl _MICROFRAME
                            165 	.globl _USBFRAMEL
                            166 	.globl _USBFRAMEH
                            167 	.globl _TOGCTL
                            168 	.globl _WAKEUPCS
                            169 	.globl _SUSPEND
                            170 	.globl _USBCS
                            171 	.globl _XAUTODAT2
                            172 	.globl _XAUTODAT1
                            173 	.globl _I2CTL
                            174 	.globl _I2DAT
                            175 	.globl _I2CS
                            176 	.globl _PORTECFG
                            177 	.globl _PORTCCFG
                            178 	.globl _PORTACFG
                            179 	.globl _INTSETUP
                            180 	.globl _INT4IVEC
                            181 	.globl _INT2IVEC
                            182 	.globl _CLRERRCNT
                            183 	.globl _ERRCNTLIM
                            184 	.globl _USBERRIRQ
                            185 	.globl _USBERRIE
                            186 	.globl _GPIFIRQ
                            187 	.globl _GPIFIE
                            188 	.globl _EPIRQ
                            189 	.globl _EPIE
                            190 	.globl _USBIRQ
                            191 	.globl _USBIE
                            192 	.globl _NAKIRQ
                            193 	.globl _NAKIE
                            194 	.globl _IBNIRQ
                            195 	.globl _IBNIE
                            196 	.globl _EP8FIFOIRQ
                            197 	.globl _EP8FIFOIE
                            198 	.globl _EP6FIFOIRQ
                            199 	.globl _EP6FIFOIE
                            200 	.globl _EP4FIFOIRQ
                            201 	.globl _EP4FIFOIE
                            202 	.globl _EP2FIFOIRQ
                            203 	.globl _EP2FIFOIE
                            204 	.globl _OUTPKTEND
                            205 	.globl _INPKTEND
                            206 	.globl _EP8ISOINPKTS
                            207 	.globl _EP6ISOINPKTS
                            208 	.globl _EP4ISOINPKTS
                            209 	.globl _EP2ISOINPKTS
                            210 	.globl _EP8FIFOPFL
                            211 	.globl _EP8FIFOPFH
                            212 	.globl _EP6FIFOPFL
                            213 	.globl _EP6FIFOPFH
                            214 	.globl _EP4FIFOPFL
                            215 	.globl _EP4FIFOPFH
                            216 	.globl _EP2FIFOPFL
                            217 	.globl _EP2FIFOPFH
                            218 	.globl _EP8AUTOINLENL
                            219 	.globl _EP8AUTOINLENH
                            220 	.globl _EP6AUTOINLENL
                            221 	.globl _EP6AUTOINLENH
                            222 	.globl _EP4AUTOINLENL
                            223 	.globl _EP4AUTOINLENH
                            224 	.globl _EP2AUTOINLENL
                            225 	.globl _EP2AUTOINLENH
                            226 	.globl _EP8FIFOCFG
                            227 	.globl _EP6FIFOCFG
                            228 	.globl _EP4FIFOCFG
                            229 	.globl _EP2FIFOCFG
                            230 	.globl _EP8CFG
                            231 	.globl _EP6CFG
                            232 	.globl _EP4CFG
                            233 	.globl _EP2CFG
                            234 	.globl _EP1INCFG
                            235 	.globl _EP1OUTCFG
                            236 	.globl _REVCTL
                            237 	.globl _REVID
                            238 	.globl _FIFOPINPOLAR
                            239 	.globl _UART230
                            240 	.globl _BPADDRL
                            241 	.globl _BPADDRH
                            242 	.globl _BREAKPT
                            243 	.globl _FIFORESET
                            244 	.globl _PINFLAGSCD
                            245 	.globl _PINFLAGSAB
                            246 	.globl _IFCONFIG
                            247 	.globl _CPUCS
                            248 	.globl _RES_WAVEDATA_END
                            249 	.globl _GPIF_WAVE_DATA
                            250 ;--------------------------------------------------------
                            251 ; special function registers
                            252 ;--------------------------------------------------------
                            253 	.area RSEG    (ABS,DATA)
   0000                     254 	.org 0x0000
                    0080    255 _IOA	=	0x0080
                    0081    256 _SP	=	0x0081
                    0082    257 _DPL	=	0x0082
                    0083    258 _DPH	=	0x0083
                    0084    259 _DPL1	=	0x0084
                    0085    260 _DPH1	=	0x0085
                    0086    261 _DPS	=	0x0086
                    0087    262 _PCON	=	0x0087
                    0088    263 _TCON	=	0x0088
                    0089    264 _TMOD	=	0x0089
                    008A    265 _TL0	=	0x008a
                    008B    266 _TL1	=	0x008b
                    008C    267 _TH0	=	0x008c
                    008D    268 _TH1	=	0x008d
                    008E    269 _CKCO	=	0x008e
                    008F    270 _SPC_	=	0x008f
                    0090    271 _IOB	=	0x0090
                    0091    272 _EXIF	=	0x0091
                    0092    273 _MPA	=	0x0092
                    0098    274 _SCO	=	0x0098
                    0099    275 _SBU	=	0x0099
                    009A    276 _APTR1H	=	0x009a
                    009B    277 _APTR1L	=	0x009b
                    009C    278 _AUTODAT1	=	0x009c
                    009D    279 _AUTOPTRH2	=	0x009d
                    009E    280 _AUTOPTRL2	=	0x009e
                    009F    281 _AUTODAT2	=	0x009f
                    00A0    282 _IOC	=	0x00a0
                    00A1    283 _INT2CLR	=	0x00a1
                    00A2    284 _INT4CLR	=	0x00a2
                    00A8    285 _IE	=	0x00a8
                    00AA    286 _EP2468STAT	=	0x00aa
                    00AB    287 _EP24FIFOFLGS	=	0x00ab
                    00AC    288 _EP68FIFOFLGS	=	0x00ac
                    00AF    289 _AUTOPTRSETUP	=	0x00af
                    00B0    290 _IOD	=	0x00b0
                    00B1    291 _IOE	=	0x00b1
                    00B2    292 _OEA	=	0x00b2
                    00B3    293 _OEB	=	0x00b3
                    00B4    294 _OEC	=	0x00b4
                    00B5    295 _OED	=	0x00b5
                    00B6    296 _OEE	=	0x00b6
                    00B8    297 _IP	=	0x00b8
                    00BA    298 _EP01STAT	=	0x00ba
                    00BB    299 _GPIFTRIG	=	0x00bb
                    00BD    300 _GPIFSGLDATH	=	0x00bd
                    00BE    301 _GPIFSGLDATLX	=	0x00be
                    00BF    302 _GPIFSGLDATLNOX	=	0x00bf
                    00C0    303 _SCON1	=	0x00c0
                    00C1    304 _SBUF1	=	0x00c1
                    00C8    305 _T2CON	=	0x00c8
                    00CA    306 _RCAP2L	=	0x00ca
                    00CB    307 _RCAP2H	=	0x00cb
                    00CC    308 _TL2	=	0x00cc
                    00CD    309 _TH2	=	0x00cd
                    00D0    310 _PSW	=	0x00d0
                    00D8    311 _EICON	=	0x00d8
                    00E0    312 _ACC	=	0x00e0
                    00E8    313 _EIE	=	0x00e8
                    00F0    314 _B	=	0x00f0
                    00F8    315 _EIP	=	0x00f8
                            316 ;--------------------------------------------------------
                            317 ; special function bits
                            318 ;--------------------------------------------------------
                            319 	.area RSEG    (ABS,DATA)
   0000                     320 	.org 0x0000
                            321 ;--------------------------------------------------------
                            322 ; overlayable register banks
                            323 ;--------------------------------------------------------
                            324 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     325 	.ds 8
                            326 ;--------------------------------------------------------
                            327 ; internal ram data
                            328 ;--------------------------------------------------------
                            329 	.area DSEG    (DATA)
                            330 ;--------------------------------------------------------
                            331 ; overlayable items in internal ram 
                            332 ;--------------------------------------------------------
                            333 	.area	OSEG    (OVR,DATA)
   0000                     334 _ProcessSendData_len_1_4:
   0000                     335 	.ds 2
   0002                     336 _ProcessSendData_sloc0_1_0:
   0002                     337 	.ds 1
                            338 ;--------------------------------------------------------
                            339 ; Stack segment in internal ram 
                            340 ;--------------------------------------------------------
                            341 	.area	SSEG	(DATA)
   0000                     342 __start__stack:
   0000                     343 	.ds	1
                            344 
                            345 ;--------------------------------------------------------
                            346 ; indirectly addressable internal ram data
                            347 ;--------------------------------------------------------
                            348 	.area ISEG    (DATA)
                            349 ;--------------------------------------------------------
                            350 ; absolute internal ram data
                            351 ;--------------------------------------------------------
                            352 	.area IABS    (ABS,DATA)
                            353 	.area IABS    (ABS,DATA)
                            354 ;--------------------------------------------------------
                            355 ; bit data
                            356 ;--------------------------------------------------------
                            357 	.area BSEG    (BIT)
                            358 ;--------------------------------------------------------
                            359 ; paged external ram data
                            360 ;--------------------------------------------------------
                            361 	.area PSEG    (PAG,XDATA)
                            362 ;--------------------------------------------------------
                            363 ; external ram data
                            364 ;--------------------------------------------------------
                            365 	.area XSEG    (XDATA)
                    E400    366 _GPIF_WAVE_DATA	=	0xe400
                    E480    367 _RES_WAVEDATA_END	=	0xe480
                    E600    368 _CPUCS	=	0xe600
                    E601    369 _IFCONFIG	=	0xe601
                    E602    370 _PINFLAGSAB	=	0xe602
                    E603    371 _PINFLAGSCD	=	0xe603
                    E604    372 _FIFORESET	=	0xe604
                    E605    373 _BREAKPT	=	0xe605
                    E606    374 _BPADDRH	=	0xe606
                    E607    375 _BPADDRL	=	0xe607
                    E608    376 _UART230	=	0xe608
                    E609    377 _FIFOPINPOLAR	=	0xe609
                    E60A    378 _REVID	=	0xe60a
                    E60B    379 _REVCTL	=	0xe60b
                    E610    380 _EP1OUTCFG	=	0xe610
                    E611    381 _EP1INCFG	=	0xe611
                    E612    382 _EP2CFG	=	0xe612
                    E613    383 _EP4CFG	=	0xe613
                    E614    384 _EP6CFG	=	0xe614
                    E615    385 _EP8CFG	=	0xe615
                    E618    386 _EP2FIFOCFG	=	0xe618
                    E619    387 _EP4FIFOCFG	=	0xe619
                    E61A    388 _EP6FIFOCFG	=	0xe61a
                    E61B    389 _EP8FIFOCFG	=	0xe61b
                    E620    390 _EP2AUTOINLENH	=	0xe620
                    E621    391 _EP2AUTOINLENL	=	0xe621
                    E622    392 _EP4AUTOINLENH	=	0xe622
                    E623    393 _EP4AUTOINLENL	=	0xe623
                    E624    394 _EP6AUTOINLENH	=	0xe624
                    E625    395 _EP6AUTOINLENL	=	0xe625
                    E626    396 _EP8AUTOINLENH	=	0xe626
                    E627    397 _EP8AUTOINLENL	=	0xe627
                    E630    398 _EP2FIFOPFH	=	0xe630
                    E631    399 _EP2FIFOPFL	=	0xe631
                    E632    400 _EP4FIFOPFH	=	0xe632
                    E633    401 _EP4FIFOPFL	=	0xe633
                    E634    402 _EP6FIFOPFH	=	0xe634
                    E635    403 _EP6FIFOPFL	=	0xe635
                    E636    404 _EP8FIFOPFH	=	0xe636
                    E637    405 _EP8FIFOPFL	=	0xe637
                    E640    406 _EP2ISOINPKTS	=	0xe640
                    E641    407 _EP4ISOINPKTS	=	0xe641
                    E642    408 _EP6ISOINPKTS	=	0xe642
                    E643    409 _EP8ISOINPKTS	=	0xe643
                    E648    410 _INPKTEND	=	0xe648
                    E649    411 _OUTPKTEND	=	0xe649
                    E650    412 _EP2FIFOIE	=	0xe650
                    E651    413 _EP2FIFOIRQ	=	0xe651
                    E652    414 _EP4FIFOIE	=	0xe652
                    E653    415 _EP4FIFOIRQ	=	0xe653
                    E654    416 _EP6FIFOIE	=	0xe654
                    E655    417 _EP6FIFOIRQ	=	0xe655
                    E656    418 _EP8FIFOIE	=	0xe656
                    E657    419 _EP8FIFOIRQ	=	0xe657
                    E658    420 _IBNIE	=	0xe658
                    E659    421 _IBNIRQ	=	0xe659
                    E65A    422 _NAKIE	=	0xe65a
                    E65B    423 _NAKIRQ	=	0xe65b
                    E65C    424 _USBIE	=	0xe65c
                    E65D    425 _USBIRQ	=	0xe65d
                    E65E    426 _EPIE	=	0xe65e
                    E65F    427 _EPIRQ	=	0xe65f
                    E660    428 _GPIFIE	=	0xe660
                    E661    429 _GPIFIRQ	=	0xe661
                    E662    430 _USBERRIE	=	0xe662
                    E663    431 _USBERRIRQ	=	0xe663
                    E664    432 _ERRCNTLIM	=	0xe664
                    E665    433 _CLRERRCNT	=	0xe665
                    E666    434 _INT2IVEC	=	0xe666
                    E667    435 _INT4IVEC	=	0xe667
                    E668    436 _INTSETUP	=	0xe668
                    E670    437 _PORTACFG	=	0xe670
                    E671    438 _PORTCCFG	=	0xe671
                    E672    439 _PORTECFG	=	0xe672
                    E678    440 _I2CS	=	0xe678
                    E679    441 _I2DAT	=	0xe679
                    E67A    442 _I2CTL	=	0xe67a
                    E67B    443 _XAUTODAT1	=	0xe67b
                    E67C    444 _XAUTODAT2	=	0xe67c
                    E680    445 _USBCS	=	0xe680
                    E681    446 _SUSPEND	=	0xe681
                    E682    447 _WAKEUPCS	=	0xe682
                    E683    448 _TOGCTL	=	0xe683
                    E684    449 _USBFRAMEH	=	0xe684
                    E685    450 _USBFRAMEL	=	0xe685
                    E686    451 _MICROFRAME	=	0xe686
                    E687    452 _FNADDR	=	0xe687
                    E68A    453 _EP0BCH	=	0xe68a
                    E68B    454 _EP0BCL	=	0xe68b
                    E68D    455 _EP1OUTBC	=	0xe68d
                    E68F    456 _EP1INBC	=	0xe68f
                    E690    457 _EP2BCH	=	0xe690
                    E691    458 _EP2BCL	=	0xe691
                    E694    459 _EP4BCH	=	0xe694
                    E695    460 _EP4BCL	=	0xe695
                    E698    461 _EP6BCH	=	0xe698
                    E699    462 _EP6BCL	=	0xe699
                    E69C    463 _EP8BCH	=	0xe69c
                    E69D    464 _EP8BCL	=	0xe69d
                    E6A0    465 _EP0CS	=	0xe6a0
                    E6A1    466 _EP1OUTCS	=	0xe6a1
                    E6A2    467 _EP1INCS	=	0xe6a2
                    E6A3    468 _EP2CS	=	0xe6a3
                    E6A4    469 _EP4CS	=	0xe6a4
                    E6A5    470 _EP6CS	=	0xe6a5
                    E6A6    471 _EP8CS	=	0xe6a6
                    E6A7    472 _EP2FIFOFLGS	=	0xe6a7
                    E6A8    473 _EP4FIFOFLGS	=	0xe6a8
                    E6A9    474 _EP6FIFOFLGS	=	0xe6a9
                    E6AA    475 _EP8FIFOFLGS	=	0xe6aa
                    E6AB    476 _EP2FIFOBCH	=	0xe6ab
                    E6AC    477 _EP2FIFOBCL	=	0xe6ac
                    E6AD    478 _EP4FIFOBCH	=	0xe6ad
                    E6AE    479 _EP4FIFOBCL	=	0xe6ae
                    E6AF    480 _EP6FIFOBCH	=	0xe6af
                    E6B0    481 _EP6FIFOBCL	=	0xe6b0
                    E6B1    482 _EP8FIFOBCH	=	0xe6b1
                    E6B2    483 _EP8FIFOBCL	=	0xe6b2
                    E6B3    484 _SUDPTRH	=	0xe6b3
                    E6B4    485 _SUDPTRL	=	0xe6b4
                    E6B5    486 _SUDPTRCTL	=	0xe6b5
                    E6B8    487 _SETUPDAT	=	0xe6b8
                    E6C0    488 _GPIFWFSELECT	=	0xe6c0
                    E6C1    489 _GPIFIDLECS	=	0xe6c1
                    E6C2    490 _GPIFIDLECTL	=	0xe6c2
                    E6C3    491 _GPIFCTLCFG	=	0xe6c3
                    E6C4    492 _GPIFADRH	=	0xe6c4
                    E6C5    493 _GPIFADRL	=	0xe6c5
                    E6CE    494 _GPIFTCB3	=	0xe6ce
                    E6CF    495 _GPIFTCB2	=	0xe6cf
                    E6D0    496 _GPIFTCB1	=	0xe6d0
                    E6D1    497 _GPIFTCB0	=	0xe6d1
                    E6D2    498 _EP2GPIFFLGSEL	=	0xe6d2
                    E6D3    499 _EP2GPIFPFSTOP	=	0xe6d3
                    E6D4    500 _EP2GPIFTRIG	=	0xe6d4
                    E6DA    501 _EP4GPIFFLGSEL	=	0xe6da
                    E6DB    502 _EP4GPIFPFSTOP	=	0xe6db
                    E6DC    503 _EP4GPIFTRIG	=	0xe6dc
                    E6E2    504 _EP6GPIFFLGSEL	=	0xe6e2
                    E6E3    505 _EP6GPIFPFSTOP	=	0xe6e3
                    E6E4    506 _EP6GPIFTRIG	=	0xe6e4
                    E6EA    507 _EP8GPIFFLGSEL	=	0xe6ea
                    E6EB    508 _EP8GPIFPFSTOP	=	0xe6eb
                    E6EC    509 _EP8GPIFTRIG	=	0xe6ec
                    E6F0    510 _XGPIFSGLDATH	=	0xe6f0
                    E6F1    511 _XGPIFSGLDATLX	=	0xe6f1
                    E6F2    512 _XGPIFSGLDATLNOX	=	0xe6f2
                    E6F3    513 _GPIFREADYCFG	=	0xe6f3
                    E6F4    514 _GPIFREADYSTAT	=	0xe6f4
                    E6F5    515 _GPIFABORT	=	0xe6f5
                    E6C6    516 _FLOWSTATE	=	0xe6c6
                    E6C7    517 _FLOWLOGIC	=	0xe6c7
                    E6C8    518 _FLOWEQ0CTL	=	0xe6c8
                    E6C9    519 _FLOWEQ1CTL	=	0xe6c9
                    E6CA    520 _FLOWHOLDOFF	=	0xe6ca
                    E6CB    521 _FLOWSTB	=	0xe6cb
                    E6CC    522 _FLOWSTBEDGE	=	0xe6cc
                    E6CD    523 _FLOWSTBHPERIOD	=	0xe6cd
                    E60C    524 _GPIFHOLDAMOUNT	=	0xe60c
                    E67D    525 _UDMACRCH	=	0xe67d
                    E67E    526 _UDMACRCL	=	0xe67e
                    E67F    527 _UDMACRCQUAL	=	0xe67f
                    E6F8    528 _DBUG	=	0xe6f8
                    E6F9    529 _TESTCFG	=	0xe6f9
                    E6FA    530 _USBTEST	=	0xe6fa
                    E6FB    531 _CT1	=	0xe6fb
                    E6FC    532 _CT2	=	0xe6fc
                    E6FD    533 _CT3	=	0xe6fd
                    E6FE    534 _CT4	=	0xe6fe
                    E740    535 _EP0BUF	=	0xe740
                    E780    536 _EP1OUTBUF	=	0xe780
                    E7C0    537 _EP1INBUF	=	0xe7c0
                    F000    538 _EP2FIFOBUF	=	0xf000
                    F400    539 _EP4FIFOBUF	=	0xf400
                    F800    540 _EP6FIFOBUF	=	0xf800
                    FC00    541 _EP8FIFOBUF	=	0xfc00
                            542 ;--------------------------------------------------------
                            543 ; absolute external ram data
                            544 ;--------------------------------------------------------
                            545 	.area XABS    (ABS,XDATA)
                            546 ;--------------------------------------------------------
                            547 ; external initialized ram data
                            548 ;--------------------------------------------------------
                            549 	.area XISEG   (XDATA)
                            550 	.area HOME    (CODE)
                            551 	.area GSINIT0 (CODE)
                            552 	.area GSINIT1 (CODE)
                            553 	.area GSINIT2 (CODE)
                            554 	.area GSINIT3 (CODE)
                            555 	.area GSINIT4 (CODE)
                            556 	.area GSINIT5 (CODE)
                            557 	.area GSINIT  (CODE)
                            558 	.area GSFINAL (CODE)
                            559 	.area CSEG    (CODE)
                            560 ;--------------------------------------------------------
                            561 ; interrupt vector 
                            562 ;--------------------------------------------------------
                            563 	.area HOME    (CODE)
   0000                     564 __interrupt_vect:
   0000 02s00r00            565 	ljmp	__sdcc_gsinit_startup
                            566 ;--------------------------------------------------------
                            567 ; global & static initialisations
                            568 ;--------------------------------------------------------
                            569 	.area HOME    (CODE)
                            570 	.area GSINIT  (CODE)
                            571 	.area GSFINAL (CODE)
                            572 	.area GSINIT  (CODE)
                            573 	.globl __sdcc_gsinit_startup
                            574 	.globl __sdcc_program_startup
                            575 	.globl __start__stack
                            576 	.globl __mcs51_genXINIT
                            577 	.globl __mcs51_genXRAMCLEAR
                            578 	.globl __mcs51_genRAMCLEAR
                            579 	.area GSFINAL (CODE)
   0000 02s00r03            580 	ljmp	__sdcc_program_startup
                            581 ;--------------------------------------------------------
                            582 ; Home
                            583 ;--------------------------------------------------------
                            584 	.area HOME    (CODE)
                            585 	.area HOME    (CODE)
   0003                     586 __sdcc_program_startup:
   0003 12s01r20            587 	lcall	_main
                            588 ;	return from main will lock up
   0006 80 FE               589 	sjmp .
                            590 ;--------------------------------------------------------
                            591 ; code
                            592 ;--------------------------------------------------------
                            593 	.area CSEG    (CODE)
                            594 ;------------------------------------------------------------
                            595 ;Allocation info for local variables in function 'Initialize'
                            596 ;------------------------------------------------------------
                            597 ;	convert.c:26: static void Initialize(void)
                            598 ;	-----------------------------------------
                            599 ;	 function Initialize
                            600 ;	-----------------------------------------
   0000                     601 _Initialize:
                    0007    602 	ar7 = 0x07
                    0006    603 	ar6 = 0x06
                    0005    604 	ar5 = 0x05
                    0004    605 	ar4 = 0x04
                    0003    606 	ar3 = 0x03
                    0002    607 	ar2 = 0x02
                    0001    608 	ar1 = 0x01
                    0000    609 	ar0 = 0x00
                            610 ;	convert.c:28: CPUCS=0x10;   // 48 MHz, CLKOUT output disabled. 
   0000 90 E6 00            611 	mov	dptr,#_CPUCS
   0003 74 10               612 	mov	a,#0x10
   0005 F0                  613 	movx	@dptr,a
                            614 ;	convert.c:52: IFCONFIG=0xC3;  // External IFCLK, 48MHz; slave FIFO. 
   0006 90 E6 01            615 	mov	dptr,#_IFCONFIG
   0009 74 C3               616 	mov	a,#0xC3
   000B F0                  617 	movx	@dptr,a
                            618 ;	convert.c:53: SYNCDELAY;
   000C 00                  619 	nop 
   000D 00                  620 	nop 
   000E 00                  621 	nop 
   000F 00                  622 	nop 
                            623 ;	convert.c:79: FIFOPINPOLAR=0x00;
   0010 90 E6 09            624 	mov	dptr,#_FIFOPINPOLAR
   0013 E4                  625 	clr	a
   0014 F0                  626 	movx	@dptr,a
                            627 ;	convert.c:80: SYNCDELAY;
   0015 00                  628 	nop 
   0016 00                  629 	nop 
   0017 00                  630 	nop 
   0018 00                  631 	nop 
                            632 ;	convert.c:82: FIFOPINPOLAR=0x0c;
   0019 90 E6 09            633 	mov	dptr,#_FIFOPINPOLAR
   001C 74 0C               634 	mov	a,#0x0C
   001E F0                  635 	movx	@dptr,a
                            636 ;	convert.c:83: SYNCDELAY;
   001F 00                  637 	nop 
   0020 00                  638 	nop 
   0021 00                  639 	nop 
   0022 00                  640 	nop 
                            641 ;	convert.c:86: REVCTL=0x03;  // See TRM...
   0023 90 E6 0B            642 	mov	dptr,#_REVCTL
   0026 74 03               643 	mov	a,#0x03
   0028 F0                  644 	movx	@dptr,a
                            645 ;	convert.c:87: SYNCDELAY;
   0029 00                  646 	nop 
   002A 00                  647 	nop 
   002B 00                  648 	nop 
   002C 00                  649 	nop 
                            650 ;	convert.c:89: EP6CFG=0xe2;  // 1110 0010 (bulk IN, 512 bytes, double-buffered)
   002D 90 E6 14            651 	mov	dptr,#_EP6CFG
   0030 74 E2               652 	mov	a,#0xE2
   0032 F0                  653 	movx	@dptr,a
                            654 ;	convert.c:90: SYNCDELAY;
   0033 00                  655 	nop 
   0034 00                  656 	nop 
   0035 00                  657 	nop 
   0036 00                  658 	nop 
                            659 ;	convert.c:92: EP2CFG=0xa2;  // 1010 0010 (bulk OUT, 512 bytes, double-buffered)
   0037 90 E6 12            660 	mov	dptr,#_EP2CFG
   003A 74 A2               661 	mov	a,#0xA2
   003C F0                  662 	movx	@dptr,a
                            663 ;	convert.c:93: SYNCDELAY;
   003D 00                  664 	nop 
   003E 00                  665 	nop 
   003F 00                  666 	nop 
   0040 00                  667 	nop 
                            668 ;	convert.c:95: FIFORESET = 0x80;  SYNCDELAY;  // NAK all requests from host. 
   0041 90 E6 04            669 	mov	dptr,#_FIFORESET
   0044 74 80               670 	mov	a,#0x80
   0046 F0                  671 	movx	@dptr,a
   0047 00                  672 	nop 
   0048 00                  673 	nop 
   0049 00                  674 	nop 
   004A 00                  675 	nop 
                            676 ;	convert.c:96: FIFORESET = 0x82;  SYNCDELAY;  // Reset individual EP (2,4,6,8)
   004B 90 E6 04            677 	mov	dptr,#_FIFORESET
   004E 74 82               678 	mov	a,#0x82
   0050 F0                  679 	movx	@dptr,a
   0051 00                  680 	nop 
   0052 00                  681 	nop 
   0053 00                  682 	nop 
   0054 00                  683 	nop 
                            684 ;	convert.c:97: FIFORESET = 0x84;  SYNCDELAY;
   0055 90 E6 04            685 	mov	dptr,#_FIFORESET
   0058 74 84               686 	mov	a,#0x84
   005A F0                  687 	movx	@dptr,a
   005B 00                  688 	nop 
   005C 00                  689 	nop 
   005D 00                  690 	nop 
   005E 00                  691 	nop 
                            692 ;	convert.c:98: FIFORESET = 0x86;  SYNCDELAY;
   005F 90 E6 04            693 	mov	dptr,#_FIFORESET
   0062 74 86               694 	mov	a,#0x86
   0064 F0                  695 	movx	@dptr,a
   0065 00                  696 	nop 
   0066 00                  697 	nop 
   0067 00                  698 	nop 
   0068 00                  699 	nop 
                            700 ;	convert.c:99: FIFORESET = 0x88;  SYNCDELAY;
   0069 90 E6 04            701 	mov	dptr,#_FIFORESET
   006C 74 88               702 	mov	a,#0x88
   006E F0                  703 	movx	@dptr,a
   006F 00                  704 	nop 
   0070 00                  705 	nop 
   0071 00                  706 	nop 
   0072 00                  707 	nop 
                            708 ;	convert.c:100: FIFORESET = 0x00;  SYNCDELAY;  // Resume normal operation. 
   0073 90 E6 04            709 	mov	dptr,#_FIFORESET
   0076 E4                  710 	clr	a
   0077 F0                  711 	movx	@dptr,a
   0078 00                  712 	nop 
   0079 00                  713 	nop 
   007A 00                  714 	nop 
   007B 00                  715 	nop 
                            716 ;	convert.c:102: EP2FIFOCFG = 0x00;  // Make sure AUTOOUT=0. 
   007C 90 E6 18            717 	mov	dptr,#_EP2FIFOCFG
   007F E4                  718 	clr	a
   0080 F0                  719 	movx	@dptr,a
                            720 ;	convert.c:103: SYNCDELAY;
   0081 00                  721 	nop 
   0082 00                  722 	nop 
   0083 00                  723 	nop 
   0084 00                  724 	nop 
                            725 ;	convert.c:108: OUTPKTEND = 0x82;  SYNCDELAY;
   0085 90 E6 49            726 	mov	dptr,#_OUTPKTEND
   0088 74 82               727 	mov	a,#0x82
   008A F0                  728 	movx	@dptr,a
   008B 00                  729 	nop 
   008C 00                  730 	nop 
   008D 00                  731 	nop 
   008E 00                  732 	nop 
                            733 ;	convert.c:109: OUTPKTEND = 0x82;  SYNCDELAY;
   008F 90 E6 49            734 	mov	dptr,#_OUTPKTEND
   0092 74 82               735 	mov	a,#0x82
   0094 F0                  736 	movx	@dptr,a
   0095 00                  737 	nop 
   0096 00                  738 	nop 
   0097 00                  739 	nop 
   0098 00                  740 	nop 
   0099 22                  741 	ret
                            742 ;------------------------------------------------------------
                            743 ;Allocation info for local variables in function 'ProcessSendData'
                            744 ;------------------------------------------------------------
                            745 ;src                       Allocated to registers 
                            746 ;dest                      Allocated to registers 
                            747 ;len                       Allocated with name '_ProcessSendData_len_1_4'
                            748 ;i                         Allocated to registers r0 r1 
                            749 ;sloc0                     Allocated with name '_ProcessSendData_sloc0_1_0'
                            750 ;------------------------------------------------------------
                            751 ;	convert.c:115: static void ProcessSendData(void)
                            752 ;	-----------------------------------------
                            753 ;	 function ProcessSendData
                            754 ;	-----------------------------------------
   009A                     755 _ProcessSendData:
                            756 ;	convert.c:117: xdata const unsigned char *src=EP2FIFOBUF;
   009A 7E 00               757 	mov	r6,#_EP2FIFOBUF
   009C 7F F0               758 	mov	r7,#(_EP2FIFOBUF >> 8)
                            759 ;	convert.c:118: xdata unsigned char *dest=EP6FIFOBUF;
   009E 7C 00               760 	mov	r4,#_EP6FIFOBUF
   00A0 7D F8               761 	mov	r5,#(_EP6FIFOBUF >> 8)
                            762 ;	convert.c:119: unsigned int len = ((int)EP2BCH)<<8 | EP2BCL;
   00A2 90 E6 90            763 	mov	dptr,#_EP2BCH
   00A5 E0                  764 	movx	a,@dptr
   00A6 FA                  765 	mov	r2,a
   00A7 7B 00               766 	mov	r3,#0x00
   00A9 90 E6 91            767 	mov	dptr,#_EP2BCL
   00AC E0                  768 	movx	a,@dptr
   00AD F8                  769 	mov	r0,a
   00AE 79 00               770 	mov	r1,#0x00
   00B0 E8                  771 	mov	a,r0
   00B1 4B                  772 	orl	a,r3
   00B2 F5*00               773 	mov	_ProcessSendData_len_1_4,a
   00B4 E9                  774 	mov	a,r1
   00B5 4A                  775 	orl	a,r2
   00B6 F5*01               776 	mov	(_ProcessSendData_len_1_4 + 1),a
                            777 ;	convert.c:121: for(i=0; i<len; i++,src++,dest++)
   00B8 78 00               778 	mov	r0,#0x00
   00BA 79 00               779 	mov	r1,#0x00
   00BC                     780 00105$:
   00BC C3                  781 	clr	c
   00BD E8                  782 	mov	a,r0
   00BE 95*00               783 	subb	a,_ProcessSendData_len_1_4
   00C0 E9                  784 	mov	a,r1
   00C1 95*01               785 	subb	a,(_ProcessSendData_len_1_4 + 1)
   00C3 50 3B               786 	jnc	00108$
                            787 ;	convert.c:123: if(*src>='a' && *src<='z')
   00C5 8E 82               788 	mov	dpl,r6
   00C7 8F 83               789 	mov	dph,r7
   00C9 E0                  790 	movx	a,@dptr
   00CA F5*02               791 	mov	_ProcessSendData_sloc0_1_0,a
   00CC C3                  792 	clr	c
   00CD 94 61               793 	subb	a,#0x61
   00CF 40 13               794 	jc	00102$
   00D1 E5*02               795 	mov	a,_ProcessSendData_sloc0_1_0
   00D3 24 85               796 	add	a,#0xff - 0x7A
   00D5 40 0D               797 	jc	00102$
                            798 ;	convert.c:124: {  *dest=*src-'a'+'A';  }
   00D7 AB*02               799 	mov	r3,_ProcessSendData_sloc0_1_0
   00D9 74 E0               800 	mov	a,#0xE0
   00DB 2B                  801 	add	a,r3
   00DC FB                  802 	mov	r3,a
   00DD 8C 82               803 	mov	dpl,r4
   00DF 8D 83               804 	mov	dph,r5
   00E1 F0                  805 	movx	@dptr,a
   00E2 80 0B               806 	sjmp	00107$
   00E4                     807 00102$:
                            808 ;	convert.c:126: {  *dest=*src;  }
   00E4 8E 82               809 	mov	dpl,r6
   00E6 8F 83               810 	mov	dph,r7
   00E8 E0                  811 	movx	a,@dptr
   00E9 FB                  812 	mov	r3,a
   00EA 8C 82               813 	mov	dpl,r4
   00EC 8D 83               814 	mov	dph,r5
   00EE F0                  815 	movx	@dptr,a
   00EF                     816 00107$:
                            817 ;	convert.c:121: for(i=0; i<len; i++,src++,dest++)
   00EF 08                  818 	inc	r0
   00F0 B8 00 01            819 	cjne	r0,#0x00,00123$
   00F3 09                  820 	inc	r1
   00F4                     821 00123$:
   00F4 0E                  822 	inc	r6
   00F5 BE 00 01            823 	cjne	r6,#0x00,00124$
   00F8 0F                  824 	inc	r7
   00F9                     825 00124$:
   00F9 0C                  826 	inc	r4
   00FA BC 00 BF            827 	cjne	r4,#0x00,00105$
   00FD 0D                  828 	inc	r5
   00FE 80 BC               829 	sjmp	00105$
   0100                     830 00108$:
                            831 ;	convert.c:130: SYNCDELAY;  OUTPKTEND=0x82;
   0100 00                  832 	nop 
   0101 00                  833 	nop 
   0102 00                  834 	nop 
   0103 00                  835 	nop 
   0104 90 E6 49            836 	mov	dptr,#_OUTPKTEND
   0107 74 82               837 	mov	a,#0x82
   0109 F0                  838 	movx	@dptr,a
                            839 ;	convert.c:136: SYNCDELAY;  EP6BCH=len>>8;
   010A 00                  840 	nop 
   010B 00                  841 	nop 
   010C 00                  842 	nop 
   010D 00                  843 	nop 
   010E 90 E6 98            844 	mov	dptr,#_EP6BCH
   0111 E5*01               845 	mov	a,(_ProcessSendData_len_1_4 + 1)
   0113 F0                  846 	movx	@dptr,a
                            847 ;	convert.c:137: SYNCDELAY;  EP6BCL=len&0xff;
   0114 00                  848 	nop 
   0115 00                  849 	nop 
   0116 00                  850 	nop 
   0117 00                  851 	nop 
   0118 AE*00               852 	mov	r6,_ProcessSendData_len_1_4
   011A 90 E6 99            853 	mov	dptr,#_EP6BCL
   011D EE                  854 	mov	a,r6
   011E F0                  855 	movx	@dptr,a
   011F 22                  856 	ret
                            857 ;------------------------------------------------------------
                            858 ;Allocation info for local variables in function 'main'
                            859 ;------------------------------------------------------------
                            860 ;	convert.c:141: void main(void)
                            861 ;	-----------------------------------------
                            862 ;	 function main
                            863 ;	-----------------------------------------
   0120                     864 _main:
                            865 ;	convert.c:143: Initialize();
   0120 12s00r00            866 	lcall	_Initialize
   0123                     867 00107$:
                            868 ;	convert.c:148: if(!(EP2CS & (1<<2)))
   0123 90 E6 A3            869 	mov	dptr,#_EP2CS
   0126 E0                  870 	movx	a,@dptr
   0127 FF                  871 	mov	r7,a
   0128 20 E2 F8            872 	jb	acc.2,00107$
                            873 ;	convert.c:152: while(EP6CS & (1<<3));
   012B                     874 00101$:
   012B 90 E6 A5            875 	mov	dptr,#_EP6CS
   012E E0                  876 	movx	a,@dptr
   012F FF                  877 	mov	r7,a
   0130 20 E3 F8            878 	jb	acc.3,00101$
                            879 ;	convert.c:153: ProcessSendData();
   0133 12s00r9A            880 	lcall	_ProcessSendData
   0136 80 EB               881 	sjmp	00107$
                            882 	.area CSEG    (CODE)
                            883 	.area CONST   (CODE)
                            884 	.area XINIT   (CODE)
                            885 	.area CABS    (ABS,CODE)
